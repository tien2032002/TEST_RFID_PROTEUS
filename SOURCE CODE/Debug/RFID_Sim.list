
RFID_Sim.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005414  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08005528  08005528  00015528  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055c0  080055c0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080055c0  080055c0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080055c0  080055c0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055c0  080055c0  000155c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055c4  080055c4  000155c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080055c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  20000070  08005638  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  08005638  00020440  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b605  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002196  00000000  00000000  0002b69e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  0002d838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c40  00000000  00000000  0002e588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018bbc  00000000  00000000  0002f1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f651  00000000  00000000  00047d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000890ff  00000000  00000000  000573d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e04d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e74  00000000  00000000  000e0524  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	0800550c 	.word	0x0800550c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	0800550c 	.word	0x0800550c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <blink>:
#include "software_timer.h"
#include "main.h"

int led_status=0;

void blink(int duration) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
	switch (led_status) {
 8000a70:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <blink+0x90>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b02      	cmp	r3, #2
 8000a76:	d024      	beq.n	8000ac2 <blink+0x5a>
 8000a78:	2b02      	cmp	r3, #2
 8000a7a:	dc33      	bgt.n	8000ae4 <blink+0x7c>
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d002      	beq.n	8000a86 <blink+0x1e>
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d00d      	beq.n	8000aa0 <blink+0x38>
				setTimer8(duration);
				led_status=1;
			}
			break;
		default:
			break;
 8000a84:	e02e      	b.n	8000ae4 <blink+0x7c>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000a86:	2201      	movs	r2, #1
 8000a88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a8c:	481b      	ldr	r0, [pc, #108]	; (8000afc <blink+0x94>)
 8000a8e:	f001 fc5e 	bl	800234e <HAL_GPIO_WritePin>
			setTimer8(duration);
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f000 feb8 	bl	8001808 <setTimer8>
			led_status=1;
 8000a98:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <blink+0x90>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	601a      	str	r2, [r3, #0]
			break;
 8000a9e:	e026      	b.n	8000aee <blink+0x86>
			if (timer8_flag==1) {
 8000aa0:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <blink+0x98>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d11f      	bne.n	8000ae8 <blink+0x80>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aae:	4813      	ldr	r0, [pc, #76]	; (8000afc <blink+0x94>)
 8000ab0:	f001 fc4d 	bl	800234e <HAL_GPIO_WritePin>
				setTimer8(duration);
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f000 fea7 	bl	8001808 <setTimer8>
				led_status=2;
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <blink+0x90>)
 8000abc:	2202      	movs	r2, #2
 8000abe:	601a      	str	r2, [r3, #0]
			break;
 8000ac0:	e012      	b.n	8000ae8 <blink+0x80>
			if (timer8_flag==1) {
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <blink+0x98>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d110      	bne.n	8000aec <blink+0x84>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000aca:	2201      	movs	r2, #1
 8000acc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ad0:	480a      	ldr	r0, [pc, #40]	; (8000afc <blink+0x94>)
 8000ad2:	f001 fc3c 	bl	800234e <HAL_GPIO_WritePin>
				setTimer8(duration);
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f000 fe96 	bl	8001808 <setTimer8>
				led_status=1;
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <blink+0x90>)
 8000ade:	2201      	movs	r2, #1
 8000ae0:	601a      	str	r2, [r3, #0]
			break;
 8000ae2:	e003      	b.n	8000aec <blink+0x84>
			break;
 8000ae4:	bf00      	nop
 8000ae6:	e002      	b.n	8000aee <blink+0x86>
			break;
 8000ae8:	bf00      	nop
 8000aea:	e000      	b.n	8000aee <blink+0x86>
			break;
 8000aec:	bf00      	nop
	}
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	2000008c 	.word	0x2000008c
 8000afc:	40011000 	.word	0x40011000
 8000b00:	20000420 	.word	0x20000420

08000b04 <button_reading>:
		flagForButtonPress3s[i]=0;
		counterForButtonPress3s[i]=DURATION_FOR_AUTO_INCREASING;
	}
}
int flagForPressed=0;
void button_reading ( void ){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
	for ( int i = 0; i < N0_OF_BUTTONS ; i ++){
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	e0ba      	b.n	8000c86 <button_reading+0x182>
		if(timer1_flag==1) {
 8000b10:	4b61      	ldr	r3, [pc, #388]	; (8000c98 <button_reading+0x194>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d105      	bne.n	8000b24 <button_reading+0x20>
			flagForPressed=0;
 8000b18:	4b60      	ldr	r3, [pc, #384]	; (8000c9c <button_reading+0x198>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
			setTimer1(0);
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f000 fdfa 	bl	8001718 <setTimer1>
		}
		debounceButtonBuffer3 [i] = debounceButtonBuffer2 [i];
 8000b24:	4a5e      	ldr	r2, [pc, #376]	; (8000ca0 <button_reading+0x19c>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4413      	add	r3, r2
 8000b2a:	7819      	ldrb	r1, [r3, #0]
 8000b2c:	4a5d      	ldr	r2, [pc, #372]	; (8000ca4 <button_reading+0x1a0>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4413      	add	r3, r2
 8000b32:	460a      	mov	r2, r1
 8000b34:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2 [i] = debounceButtonBuffer1 [i];
 8000b36:	4a5c      	ldr	r2, [pc, #368]	; (8000ca8 <button_reading+0x1a4>)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	7819      	ldrb	r1, [r3, #0]
 8000b3e:	4a58      	ldr	r2, [pc, #352]	; (8000ca0 <button_reading+0x19c>)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4413      	add	r3, r2
 8000b44:	460a      	mov	r2, r1
 8000b46:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1 [i] = HAL_GPIO_ReadPin(GPIOA, RESET_Pin*pow(2,i));
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f7ff fc53 	bl	80003f4 <__aeabi_i2d>
 8000b4e:	4602      	mov	r2, r0
 8000b50:	460b      	mov	r3, r1
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000b5a:	f003 fdf3 	bl	8004744 <pow>
 8000b5e:	f04f 0200 	mov.w	r2, #0
 8000b62:	4b52      	ldr	r3, [pc, #328]	; (8000cac <button_reading+0x1a8>)
 8000b64:	f7ff fcb0 	bl	80004c8 <__aeabi_dmul>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	460b      	mov	r3, r1
 8000b6c:	4610      	mov	r0, r2
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f7ff ff5a 	bl	8000a28 <__aeabi_d2uiz>
 8000b74:	4603      	mov	r3, r0
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	4619      	mov	r1, r3
 8000b7a:	484d      	ldr	r0, [pc, #308]	; (8000cb0 <button_reading+0x1ac>)
 8000b7c:	f001 fbd0 	bl	8002320 <HAL_GPIO_ReadPin>
 8000b80:	4603      	mov	r3, r0
 8000b82:	4619      	mov	r1, r3
 8000b84:	4a48      	ldr	r2, [pc, #288]	; (8000ca8 <button_reading+0x1a4>)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4413      	add	r3, r2
 8000b8a:	460a      	mov	r2, r1
 8000b8c:	701a      	strb	r2, [r3, #0]
		if (buttonBuffer[i]==BUTTON_IS_RELEASED) {
 8000b8e:	4a49      	ldr	r2, [pc, #292]	; (8000cb4 <button_reading+0x1b0>)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4413      	add	r3, r2
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d109      	bne.n	8000bae <button_reading+0xaa>
			flagForButtonPress3s[i]=0;
 8000b9a:	4a47      	ldr	r2, [pc, #284]	; (8000cb8 <button_reading+0x1b4>)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			counterForButtonPress3s[i]=0;
 8000ba4:	4a45      	ldr	r2, [pc, #276]	; (8000cbc <button_reading+0x1b8>)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2100      	movs	r1, #0
 8000baa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
		if( debounceButtonBuffer1 [i] == debounceButtonBuffer2 [i] && debounceButtonBuffer2[i]==debounceButtonBuffer3[i]) {
 8000bae:	4a3e      	ldr	r2, [pc, #248]	; (8000ca8 <button_reading+0x1a4>)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	781a      	ldrb	r2, [r3, #0]
 8000bb6:	493a      	ldr	r1, [pc, #232]	; (8000ca0 <button_reading+0x19c>)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	440b      	add	r3, r1
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d15e      	bne.n	8000c80 <button_reading+0x17c>
 8000bc2:	4a37      	ldr	r2, [pc, #220]	; (8000ca0 <button_reading+0x19c>)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	781a      	ldrb	r2, [r3, #0]
 8000bca:	4936      	ldr	r1, [pc, #216]	; (8000ca4 <button_reading+0x1a0>)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	440b      	add	r3, r1
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d154      	bne.n	8000c80 <button_reading+0x17c>
			if (buttonBuffer[i] != debounceButtonBuffer3 [i]) {
 8000bd6:	4a37      	ldr	r2, [pc, #220]	; (8000cb4 <button_reading+0x1b0>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4413      	add	r3, r2
 8000bdc:	781a      	ldrb	r2, [r3, #0]
 8000bde:	4931      	ldr	r1, [pc, #196]	; (8000ca4 <button_reading+0x1a0>)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	440b      	add	r3, r1
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d030      	beq.n	8000c4c <button_reading+0x148>
				buttonBuffer [i] = debounceButtonBuffer3 [i];
 8000bea:	4a2e      	ldr	r2, [pc, #184]	; (8000ca4 <button_reading+0x1a0>)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4413      	add	r3, r2
 8000bf0:	7819      	ldrb	r1, [r3, #0]
 8000bf2:	4a30      	ldr	r2, [pc, #192]	; (8000cb4 <button_reading+0x1b0>)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	460a      	mov	r2, r1
 8000bfa:	701a      	strb	r2, [r3, #0]
				if( buttonBuffer [i] == BUTTON_IS_PRESSED ){
 8000bfc:	4a2d      	ldr	r2, [pc, #180]	; (8000cb4 <button_reading+0x1b0>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4413      	add	r3, r2
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d13b      	bne.n	8000c80 <button_reading+0x17c>
					flagForButtonPress [i]=1;
 8000c08:	4a2d      	ldr	r2, [pc, #180]	; (8000cc0 <button_reading+0x1bc>)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					counterForButtonPress3s [i]=DURATION_FOR_AUTO_INCREASING;
 8000c12:	4a2a      	ldr	r2, [pc, #168]	; (8000cbc <button_reading+0x1b8>)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000c1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					if (flagForPressed==0) {
 8000c1e:	4b1f      	ldr	r3, [pc, #124]	; (8000c9c <button_reading+0x198>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d106      	bne.n	8000c34 <button_reading+0x130>
						setTimer1(50);
 8000c26:	2032      	movs	r0, #50	; 0x32
 8000c28:	f000 fd76 	bl	8001718 <setTimer1>
						flagForPressed=0;
 8000c2c:	4b1b      	ldr	r3, [pc, #108]	; (8000c9c <button_reading+0x198>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	e025      	b.n	8000c80 <button_reading+0x17c>
					}
					else {
						flagForButtonDoublePress[i]=1;
 8000c34:	4a23      	ldr	r2, [pc, #140]	; (8000cc4 <button_reading+0x1c0>)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2101      	movs	r1, #1
 8000c3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						flagForPressed=0;
 8000c3e:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <button_reading+0x198>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
						setTimer1(0);
 8000c44:	2000      	movs	r0, #0
 8000c46:	f000 fd67 	bl	8001718 <setTimer1>
 8000c4a:	e019      	b.n	8000c80 <button_reading+0x17c>
					}
				}
			}
			else {
				if (buttonBuffer[i]==BUTTON_IS_PRESSED) {
 8000c4c:	4a19      	ldr	r2, [pc, #100]	; (8000cb4 <button_reading+0x1b0>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d113      	bne.n	8000c80 <button_reading+0x17c>
					counterForButtonPress3s [i]--;
 8000c58:	4a18      	ldr	r2, [pc, #96]	; (8000cbc <button_reading+0x1b8>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c60:	1e5a      	subs	r2, r3, #1
 8000c62:	4916      	ldr	r1, [pc, #88]	; (8000cbc <button_reading+0x1b8>)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if (counterForButtonPress3s[i]<=0) {
 8000c6a:	4a14      	ldr	r2, [pc, #80]	; (8000cbc <button_reading+0x1b8>)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	dc04      	bgt.n	8000c80 <button_reading+0x17c>
						flagForButtonPress3s[i]=1;
 8000c76:	4a10      	ldr	r2, [pc, #64]	; (8000cb8 <button_reading+0x1b4>)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for ( int i = 0; i < N0_OF_BUTTONS ; i ++){
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3301      	adds	r3, #1
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2b03      	cmp	r3, #3
 8000c8a:	f77f af41 	ble.w	8000b10 <button_reading+0xc>
					}
				}
			}
		}
	}
}
 8000c8e:	bf00      	nop
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	200003e8 	.word	0x200003e8
 8000c9c:	200000e0 	.word	0x200000e0
 8000ca0:	20000098 	.word	0x20000098
 8000ca4:	2000009c 	.word	0x2000009c
 8000ca8:	20000094 	.word	0x20000094
 8000cac:	40700000 	.word	0x40700000
 8000cb0:	40010800 	.word	0x40010800
 8000cb4:	20000090 	.word	0x20000090
 8000cb8:	200000b0 	.word	0x200000b0
 8000cbc:	200000d0 	.word	0x200000d0
 8000cc0:	200000a0 	.word	0x200000a0
 8000cc4:	200000c0 	.word	0x200000c0

08000cc8 <reset_buffer>:


int state=INIT;
int admin_id;

void reset_buffer() {
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
	for (int i=0;i<5;i++) {
 8000cce:	2300      	movs	r3, #0
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	e007      	b.n	8000ce4 <reset_buffer+0x1c>
		CARD_BUF[i]=0;
 8000cd4:	4a08      	ldr	r2, [pc, #32]	; (8000cf8 <reset_buffer+0x30>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<5;i++) {
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2b04      	cmp	r3, #4
 8000ce8:	ddf4      	ble.n	8000cd4 <reset_buffer+0xc>
	}
}
 8000cea:	bf00      	nop
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	200000e8 	.word	0x200000e8

08000cfc <fsm_run>:

void fsm_run() {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
	switch (state) {
 8000d00:	4bac      	ldr	r3, [pc, #688]	; (8000fb4 <fsm_run+0x2b8>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b08      	cmp	r3, #8
 8000d06:	f200 8234 	bhi.w	8001172 <fsm_run+0x476>
 8000d0a:	a201      	add	r2, pc, #4	; (adr r2, 8000d10 <fsm_run+0x14>)
 8000d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d10:	08000d35 	.word	0x08000d35
 8000d14:	08000e41 	.word	0x08000e41
 8000d18:	08000d7d 	.word	0x08000d7d
 8000d1c:	08000efb 	.word	0x08000efb
 8000d20:	08000f53 	.word	0x08000f53
 8000d24:	08000fcd 	.word	0x08000fcd
 8000d28:	080010cd 	.word	0x080010cd
 8000d2c:	08001069 	.word	0x08001069
 8000d30:	0800112f 	.word	0x0800112f
	case INIT:
		//quet the admin va bam nut de luu vao bo nho
		//sau khi co the duoc quet , thay doi state
		if (equalZero(CARD_BUF)==0) { //kiem tra da quet the chua
 8000d34:	48a0      	ldr	r0, [pc, #640]	; (8000fb8 <fsm_run+0x2bc>)
 8000d36:	f000 fbb8 	bl	80014aa <equalZero>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d119      	bne.n	8000d74 <fsm_run+0x78>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000d40:	2201      	movs	r2, #1
 8000d42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d46:	489d      	ldr	r0, [pc, #628]	; (8000fbc <fsm_run+0x2c0>)
 8000d48:	f001 fb01 	bl	800234e <HAL_GPIO_WritePin>
			if (flagForButtonPress[REG_IDX]==1) {//nhan nut regist
 8000d4c:	4b9c      	ldr	r3, [pc, #624]	; (8000fc0 <fsm_run+0x2c4>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	f040 8210 	bne.w	8001176 <fsm_run+0x47a>
				flagForButtonPress[REG_IDX]=0;//reset flag
 8000d56:	4b9a      	ldr	r3, [pc, #616]	; (8000fc0 <fsm_run+0x2c4>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	605a      	str	r2, [r3, #4]
				set_admin(CARD_BUF);//set admin
 8000d5c:	4896      	ldr	r0, [pc, #600]	; (8000fb8 <fsm_run+0x2bc>)
 8000d5e:	f000 fcbb 	bl	80016d8 <set_admin>
				reset_buffer();//reset buffer
 8000d62:	f7ff ffb1 	bl	8000cc8 <reset_buffer>
				state=UNLOCK;//chuyen trang thai
 8000d66:	4b93      	ldr	r3, [pc, #588]	; (8000fb4 <fsm_run+0x2b8>)
 8000d68:	2202      	movs	r2, #2
 8000d6a:	601a      	str	r2, [r3, #0]
				setTimer6(10);
 8000d6c:	200a      	movs	r0, #10
 8000d6e:	f000 fd23 	bl	80017b8 <setTimer6>
			}
		}
		else {
			blink(10);
		}
		break;
 8000d72:	e200      	b.n	8001176 <fsm_run+0x47a>
			blink(10);
 8000d74:	200a      	movs	r0, #10
 8000d76:	f7ff fe77 	bl	8000a68 <blink>
		break;
 8000d7a:	e1fc      	b.n	8001176 <fsm_run+0x47a>
	case UNLOCK:
		if (timer6_flag==1) {
 8000d7c:	4b91      	ldr	r3, [pc, #580]	; (8000fc4 <fsm_run+0x2c8>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d105      	bne.n	8000d90 <fsm_run+0x94>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d8a:	488c      	ldr	r0, [pc, #560]	; (8000fbc <fsm_run+0x2c0>)
 8000d8c:	f001 fadf 	bl	800234e <HAL_GPIO_WritePin>
		}

		//dua ra tin hieu mo cua
		HAL_GPIO_WritePin(LOCK_SIGNAL_GPIO_Port, LOCK_SIGNAL_Pin, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2120      	movs	r1, #32
 8000d94:	488c      	ldr	r0, [pc, #560]	; (8000fc8 <fsm_run+0x2cc>)
 8000d96:	f001 fada 	bl	800234e <HAL_GPIO_WritePin>

		//neu bam nut dong cua, qua trang thai dong cua
		if (flagForButtonPress[LOCK_IDX]==1) {
 8000d9a:	4b89      	ldr	r3, [pc, #548]	; (8000fc0 <fsm_run+0x2c4>)
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d108      	bne.n	8000db4 <fsm_run+0xb8>
			reset_buffer();
 8000da2:	f7ff ff91 	bl	8000cc8 <reset_buffer>
			flagForButtonPress[LOCK_IDX]=0;
 8000da6:	4b86      	ldr	r3, [pc, #536]	; (8000fc0 <fsm_run+0x2c4>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
			state=LOCK;
 8000dac:	4b81      	ldr	r3, [pc, #516]	; (8000fb4 <fsm_run+0x2b8>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	601a      	str	r2, [r3, #0]
				state=LOCK;
			}
			reset_buffer();
		}

		break;
 8000db2:	e1e2      	b.n	800117a <fsm_run+0x47e>
		else if (flagForButtonPress[UNLOCK_IDX]==1) {
 8000db4:	4b82      	ldr	r3, [pc, #520]	; (8000fc0 <fsm_run+0x2c4>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d103      	bne.n	8000dc4 <fsm_run+0xc8>
			flagForButtonPress[UNLOCK_IDX]=0;
 8000dbc:	4b80      	ldr	r3, [pc, #512]	; (8000fc0 <fsm_run+0x2c4>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
		break;
 8000dc2:	e1da      	b.n	800117a <fsm_run+0x47e>
		else if (flagForButtonPress[REG_IDX]==1)  {
 8000dc4:	4b7e      	ldr	r3, [pc, #504]	; (8000fc0 <fsm_run+0x2c4>)
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d10c      	bne.n	8000de6 <fsm_run+0xea>
			flagForButtonPress[REG_IDX]=0;
 8000dcc:	4b7c      	ldr	r3, [pc, #496]	; (8000fc0 <fsm_run+0x2c4>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	605a      	str	r2, [r3, #4]
			reset_buffer();
 8000dd2:	f7ff ff79 	bl	8000cc8 <reset_buffer>
			setTimer2(500);
 8000dd6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dda:	f000 fcb1 	bl	8001740 <setTimer2>
			state=REG_PROCESS;
 8000dde:	4b75      	ldr	r3, [pc, #468]	; (8000fb4 <fsm_run+0x2b8>)
 8000de0:	2206      	movs	r2, #6
 8000de2:	601a      	str	r2, [r3, #0]
		break;
 8000de4:	e1c9      	b.n	800117a <fsm_run+0x47e>
		else if (flagForButtonPress[RESET_IDX]==1) {
 8000de6:	4b76      	ldr	r3, [pc, #472]	; (8000fc0 <fsm_run+0x2c4>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d10c      	bne.n	8000e08 <fsm_run+0x10c>
			flagForButtonPress[RESET_IDX]=0;
 8000dee:	4b74      	ldr	r3, [pc, #464]	; (8000fc0 <fsm_run+0x2c4>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
			reset_buffer();
 8000df4:	f7ff ff68 	bl	8000cc8 <reset_buffer>
			setTimer3(500);
 8000df8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dfc:	f000 fcb4 	bl	8001768 <setTimer3>
			state=MEM_DELETE;
 8000e00:	4b6c      	ldr	r3, [pc, #432]	; (8000fb4 <fsm_run+0x2b8>)
 8000e02:	2207      	movs	r2, #7
 8000e04:	601a      	str	r2, [r3, #0]
		break;
 8000e06:	e1b8      	b.n	800117a <fsm_run+0x47e>
		else if (equalZero(CARD_BUF)==0) {
 8000e08:	486b      	ldr	r0, [pc, #428]	; (8000fb8 <fsm_run+0x2bc>)
 8000e0a:	f000 fb4e 	bl	80014aa <equalZero>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	f040 81b2 	bne.w	800117a <fsm_run+0x47e>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000e16:	2201      	movs	r2, #1
 8000e18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e1c:	4867      	ldr	r0, [pc, #412]	; (8000fbc <fsm_run+0x2c0>)
 8000e1e:	f001 fa96 	bl	800234e <HAL_GPIO_WritePin>
			setTimer6(10);
 8000e22:	200a      	movs	r0, #10
 8000e24:	f000 fcc8 	bl	80017b8 <setTimer6>
			if (search(CARD_BUF)==1) {
 8000e28:	4863      	ldr	r0, [pc, #396]	; (8000fb8 <fsm_run+0x2bc>)
 8000e2a:	f000 fc07 	bl	800163c <search>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d102      	bne.n	8000e3a <fsm_run+0x13e>
				state=LOCK;
 8000e34:	4b5f      	ldr	r3, [pc, #380]	; (8000fb4 <fsm_run+0x2b8>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	601a      	str	r2, [r3, #0]
			reset_buffer();
 8000e3a:	f7ff ff45 	bl	8000cc8 <reset_buffer>
		break;
 8000e3e:	e19c      	b.n	800117a <fsm_run+0x47e>
	case LOCK:
		if (timer6_flag==1) {
 8000e40:	4b60      	ldr	r3, [pc, #384]	; (8000fc4 <fsm_run+0x2c8>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d105      	bne.n	8000e54 <fsm_run+0x158>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e4e:	485b      	ldr	r0, [pc, #364]	; (8000fbc <fsm_run+0x2c0>)
 8000e50:	f001 fa7d 	bl	800234e <HAL_GPIO_WritePin>
		}
		//dua ra tin hieu dong cua
		HAL_GPIO_WritePin(LOCK_SIGNAL_GPIO_Port, LOCK_SIGNAL_Pin, GPIO_PIN_SET);
 8000e54:	2201      	movs	r2, #1
 8000e56:	2120      	movs	r1, #32
 8000e58:	485b      	ldr	r0, [pc, #364]	; (8000fc8 <fsm_run+0x2cc>)
 8000e5a:	f001 fa78 	bl	800234e <HAL_GPIO_WritePin>

		//neu bam nut mo cua, qua trang thai mo cua
		if (flagForButtonPress[UNLOCK_IDX]==1) {
 8000e5e:	4b58      	ldr	r3, [pc, #352]	; (8000fc0 <fsm_run+0x2c4>)
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d106      	bne.n	8000e74 <fsm_run+0x178>
			flagForButtonPress[UNLOCK_IDX]=0;
 8000e66:	4b56      	ldr	r3, [pc, #344]	; (8000fc0 <fsm_run+0x2c4>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]
			state=UNLOCK;
 8000e6c:	4b51      	ldr	r3, [pc, #324]	; (8000fb4 <fsm_run+0x2b8>)
 8000e6e:	2202      	movs	r2, #2
 8000e70:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
				setTimer6(10);
			}
		}

		break;
 8000e72:	e184      	b.n	800117e <fsm_run+0x482>
		else if (flagForButtonPress[LOCK_IDX]==1) {
 8000e74:	4b52      	ldr	r3, [pc, #328]	; (8000fc0 <fsm_run+0x2c4>)
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d103      	bne.n	8000e84 <fsm_run+0x188>
			flagForButtonPress[LOCK_IDX]=0;
 8000e7c:	4b50      	ldr	r3, [pc, #320]	; (8000fc0 <fsm_run+0x2c4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
		break;
 8000e82:	e17c      	b.n	800117e <fsm_run+0x482>
		else if (flagForButtonPress[REG_IDX]==1) {
 8000e84:	4b4e      	ldr	r3, [pc, #312]	; (8000fc0 <fsm_run+0x2c4>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d103      	bne.n	8000e94 <fsm_run+0x198>
			flagForButtonPress[REG_IDX]=0;
 8000e8c:	4b4c      	ldr	r3, [pc, #304]	; (8000fc0 <fsm_run+0x2c4>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	605a      	str	r2, [r3, #4]
		break;
 8000e92:	e174      	b.n	800117e <fsm_run+0x482>
		else if (flagForButtonPress[RESET_IDX]==1) {
 8000e94:	4b4a      	ldr	r3, [pc, #296]	; (8000fc0 <fsm_run+0x2c4>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d103      	bne.n	8000ea4 <fsm_run+0x1a8>
			flagForButtonPress[RESET_IDX]=0;
 8000e9c:	4b48      	ldr	r3, [pc, #288]	; (8000fc0 <fsm_run+0x2c4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
		break;
 8000ea2:	e16c      	b.n	800117e <fsm_run+0x482>
		else if (equalZero(CARD_BUF)==0) {
 8000ea4:	4844      	ldr	r0, [pc, #272]	; (8000fb8 <fsm_run+0x2bc>)
 8000ea6:	f000 fb00 	bl	80014aa <equalZero>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	f040 8166 	bne.w	800117e <fsm_run+0x482>
			if (search(CARD_BUF)==1) {
 8000eb2:	4841      	ldr	r0, [pc, #260]	; (8000fb8 <fsm_run+0x2bc>)
 8000eb4:	f000 fbc2 	bl	800163c <search>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d10e      	bne.n	8000edc <fsm_run+0x1e0>
				reset_buffer();
 8000ebe:	f7ff ff03 	bl	8000cc8 <reset_buffer>
				state=UNLOCK;
 8000ec2:	4b3c      	ldr	r3, [pc, #240]	; (8000fb4 <fsm_run+0x2b8>)
 8000ec4:	2202      	movs	r2, #2
 8000ec6:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ece:	483b      	ldr	r0, [pc, #236]	; (8000fbc <fsm_run+0x2c0>)
 8000ed0:	f001 fa3d 	bl	800234e <HAL_GPIO_WritePin>
				setTimer6(10);
 8000ed4:	200a      	movs	r0, #10
 8000ed6:	f000 fc6f 	bl	80017b8 <setTimer6>
		break;
 8000eda:	e150      	b.n	800117e <fsm_run+0x482>
				state=WRONG1;
 8000edc:	4b35      	ldr	r3, [pc, #212]	; (8000fb4 <fsm_run+0x2b8>)
 8000ede:	2203      	movs	r2, #3
 8000ee0:	601a      	str	r2, [r3, #0]
				reset_buffer();
 8000ee2:	f7ff fef1 	bl	8000cc8 <reset_buffer>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eec:	4833      	ldr	r0, [pc, #204]	; (8000fbc <fsm_run+0x2c0>)
 8000eee:	f001 fa2e 	bl	800234e <HAL_GPIO_WritePin>
				setTimer6(10);
 8000ef2:	200a      	movs	r0, #10
 8000ef4:	f000 fc60 	bl	80017b8 <setTimer6>
		break;
 8000ef8:	e141      	b.n	800117e <fsm_run+0x482>
			state=UNLOCK;
		}
		else {
			state=WRONG2;
		}*/
		if (timer6_flag==1) {
 8000efa:	4b32      	ldr	r3, [pc, #200]	; (8000fc4 <fsm_run+0x2c8>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d105      	bne.n	8000f0e <fsm_run+0x212>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f08:	482c      	ldr	r0, [pc, #176]	; (8000fbc <fsm_run+0x2c0>)
 8000f0a:	f001 fa20 	bl	800234e <HAL_GPIO_WritePin>
		}
		if (equalZero(CARD_BUF)==0) {
 8000f0e:	482a      	ldr	r0, [pc, #168]	; (8000fb8 <fsm_run+0x2bc>)
 8000f10:	f000 facb 	bl	80014aa <equalZero>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	f040 8133 	bne.w	8001182 <fsm_run+0x486>
			if (search(CARD_BUF)==1) {
 8000f1c:	4826      	ldr	r0, [pc, #152]	; (8000fb8 <fsm_run+0x2bc>)
 8000f1e:	f000 fb8d 	bl	800163c <search>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d105      	bne.n	8000f34 <fsm_run+0x238>
				reset_buffer();
 8000f28:	f7ff fece 	bl	8000cc8 <reset_buffer>
				state=UNLOCK;
 8000f2c:	4b21      	ldr	r3, [pc, #132]	; (8000fb4 <fsm_run+0x2b8>)
 8000f2e:	2202      	movs	r2, #2
 8000f30:	601a      	str	r2, [r3, #0]
				state=WRONG2;
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
				setTimer6(10);
			}
		}
		break;
 8000f32:	e126      	b.n	8001182 <fsm_run+0x486>
				reset_buffer();
 8000f34:	f7ff fec8 	bl	8000cc8 <reset_buffer>
				state=WRONG2;
 8000f38:	4b1e      	ldr	r3, [pc, #120]	; (8000fb4 <fsm_run+0x2b8>)
 8000f3a:	2204      	movs	r2, #4
 8000f3c:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f44:	481d      	ldr	r0, [pc, #116]	; (8000fbc <fsm_run+0x2c0>)
 8000f46:	f001 fa02 	bl	800234e <HAL_GPIO_WritePin>
				setTimer6(10);
 8000f4a:	200a      	movs	r0, #10
 8000f4c:	f000 fc34 	bl	80017b8 <setTimer6>
		break;
 8000f50:	e117      	b.n	8001182 <fsm_run+0x486>
	case WRONG2:
		if (timer6_flag==1) {
 8000f52:	4b1c      	ldr	r3, [pc, #112]	; (8000fc4 <fsm_run+0x2c8>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d105      	bne.n	8000f66 <fsm_run+0x26a>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f60:	4816      	ldr	r0, [pc, #88]	; (8000fbc <fsm_run+0x2c0>)
 8000f62:	f001 f9f4 	bl	800234e <HAL_GPIO_WritePin>
		}
		else {
			state=ALARM;
			setTimer1(500);
		}*/
		if (equalZero(CARD_BUF)==0) {
 8000f66:	4814      	ldr	r0, [pc, #80]	; (8000fb8 <fsm_run+0x2bc>)
 8000f68:	f000 fa9f 	bl	80014aa <equalZero>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	f040 8109 	bne.w	8001186 <fsm_run+0x48a>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000f74:	2201      	movs	r2, #1
 8000f76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f7a:	4810      	ldr	r0, [pc, #64]	; (8000fbc <fsm_run+0x2c0>)
 8000f7c:	f001 f9e7 	bl	800234e <HAL_GPIO_WritePin>
			setTimer6(10);
 8000f80:	200a      	movs	r0, #10
 8000f82:	f000 fc19 	bl	80017b8 <setTimer6>
			if (search(CARD_BUF)==1) {
 8000f86:	480c      	ldr	r0, [pc, #48]	; (8000fb8 <fsm_run+0x2bc>)
 8000f88:	f000 fb58 	bl	800163c <search>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d105      	bne.n	8000f9e <fsm_run+0x2a2>
				reset_buffer();
 8000f92:	f7ff fe99 	bl	8000cc8 <reset_buffer>
				state=UNLOCK;
 8000f96:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <fsm_run+0x2b8>)
 8000f98:	2202      	movs	r2, #2
 8000f9a:	601a      	str	r2, [r3, #0]
				reset_buffer();
				state=ALARM;
				setTimer7(500);
			}
		}
		break;
 8000f9c:	e0f3      	b.n	8001186 <fsm_run+0x48a>
				reset_buffer();
 8000f9e:	f7ff fe93 	bl	8000cc8 <reset_buffer>
				state=ALARM;
 8000fa2:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <fsm_run+0x2b8>)
 8000fa4:	2205      	movs	r2, #5
 8000fa6:	601a      	str	r2, [r3, #0]
				setTimer7(500);
 8000fa8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fac:	f000 fc18 	bl	80017e0 <setTimer7>
		break;
 8000fb0:	e0e9      	b.n	8001186 <fsm_run+0x48a>
 8000fb2:	bf00      	nop
 8000fb4:	200000e4 	.word	0x200000e4
 8000fb8:	200000e8 	.word	0x200000e8
 8000fbc:	40011000 	.word	0x40011000
 8000fc0:	200000a0 	.word	0x200000a0
 8000fc4:	20000410 	.word	0x20000410
 8000fc8:	40010800 	.word	0x40010800
	case ALARM:
		if (timer6_flag==1) {
 8000fcc:	4b70      	ldr	r3, [pc, #448]	; (8001190 <fsm_run+0x494>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d105      	bne.n	8000fe0 <fsm_run+0x2e4>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fda:	486e      	ldr	r0, [pc, #440]	; (8001194 <fsm_run+0x498>)
 8000fdc:	f001 f9b7 	bl	800234e <HAL_GPIO_WritePin>
		}
		HAL_GPIO_WritePin(GPIOA, BUZZER_Pin, GPIO_PIN_SET);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	2140      	movs	r1, #64	; 0x40
 8000fe4:	486c      	ldr	r0, [pc, #432]	; (8001198 <fsm_run+0x49c>)
 8000fe6:	f001 f9b2 	bl	800234e <HAL_GPIO_WritePin>
			state=UNLOCK;
		}
		else {
			state=ALARM;
		}*/
		if (equalZero(CARD_BUF)==0) {
 8000fea:	486c      	ldr	r0, [pc, #432]	; (800119c <fsm_run+0x4a0>)
 8000fec:	f000 fa5d 	bl	80014aa <equalZero>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d125      	bne.n	8001042 <fsm_run+0x346>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ffc:	4865      	ldr	r0, [pc, #404]	; (8001194 <fsm_run+0x498>)
 8000ffe:	f001 f9a6 	bl	800234e <HAL_GPIO_WritePin>
			setTimer6(10);
 8001002:	200a      	movs	r0, #10
 8001004:	f000 fbd8 	bl	80017b8 <setTimer6>
			if (search(CARD_BUF)==1) {
 8001008:	4864      	ldr	r0, [pc, #400]	; (800119c <fsm_run+0x4a0>)
 800100a:	f000 fb17 	bl	800163c <search>
 800100e:	4603      	mov	r3, r0
 8001010:	2b01      	cmp	r3, #1
 8001012:	d10d      	bne.n	8001030 <fsm_run+0x334>
				reset_buffer();
 8001014:	f7ff fe58 	bl	8000cc8 <reset_buffer>
				state=UNLOCK;
 8001018:	4b61      	ldr	r3, [pc, #388]	; (80011a0 <fsm_run+0x4a4>)
 800101a:	2202      	movs	r2, #2
 800101c:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, BUZZER_Pin, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	2140      	movs	r1, #64	; 0x40
 8001022:	485d      	ldr	r0, [pc, #372]	; (8001198 <fsm_run+0x49c>)
 8001024:	f001 f993 	bl	800234e <HAL_GPIO_WritePin>
				setTimer7(0);
 8001028:	2000      	movs	r0, #0
 800102a:	f000 fbd9 	bl	80017e0 <setTimer7>
 800102e:	e008      	b.n	8001042 <fsm_run+0x346>
			}
			else {
				state=ALARM;
 8001030:	4b5b      	ldr	r3, [pc, #364]	; (80011a0 <fsm_run+0x4a4>)
 8001032:	2205      	movs	r2, #5
 8001034:	601a      	str	r2, [r3, #0]
				reset_buffer();
 8001036:	f7ff fe47 	bl	8000cc8 <reset_buffer>
				setTimer7(500);
 800103a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800103e:	f000 fbcf 	bl	80017e0 <setTimer7>
			}
		}
		if (timer7_flag==1) {
 8001042:	4b58      	ldr	r3, [pc, #352]	; (80011a4 <fsm_run+0x4a8>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b01      	cmp	r3, #1
 8001048:	f040 809f 	bne.w	800118a <fsm_run+0x48e>
			timer7_flag=0;
 800104c:	4b55      	ldr	r3, [pc, #340]	; (80011a4 <fsm_run+0x4a8>)
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
			state=WRONG2;
 8001052:	4b53      	ldr	r3, [pc, #332]	; (80011a0 <fsm_run+0x4a4>)
 8001054:	2204      	movs	r2, #4
 8001056:	601a      	str	r2, [r3, #0]
			reset_buffer();
 8001058:	f7ff fe36 	bl	8000cc8 <reset_buffer>
			HAL_GPIO_WritePin(GPIOA, BUZZER_Pin, GPIO_PIN_RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	2140      	movs	r1, #64	; 0x40
 8001060:	484d      	ldr	r0, [pc, #308]	; (8001198 <fsm_run+0x49c>)
 8001062:	f001 f974 	bl	800234e <HAL_GPIO_WritePin>
		}
		break;
 8001066:	e090      	b.n	800118a <fsm_run+0x48e>
	case MEM_DELETE:
		//Trong 5s k lam gi se tro ve trang thai UNLOCK
		//Neu the duoc quet vao la the admin se xoa bo nho
		//Neu the duoc quet khong phai the admin, tro ve trang thai UNLOCK
		if (timer3_flag==1) {
 8001068:	4b4f      	ldr	r3, [pc, #316]	; (80011a8 <fsm_run+0x4ac>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d106      	bne.n	800107e <fsm_run+0x382>
			state=UNLOCK;
 8001070:	4b4b      	ldr	r3, [pc, #300]	; (80011a0 <fsm_run+0x4a4>)
 8001072:	2202      	movs	r2, #2
 8001074:	601a      	str	r2, [r3, #0]
			setTimer3(0);
 8001076:	2000      	movs	r0, #0
 8001078:	f000 fb76 	bl	8001768 <setTimer3>
			}
			else {
				blink(10);
			}
		}
		break;
 800107c:	e086      	b.n	800118c <fsm_run+0x490>
			if (equalZero(CARD_BUF)==0) {
 800107e:	4847      	ldr	r0, [pc, #284]	; (800119c <fsm_run+0x4a0>)
 8001080:	f000 fa13 	bl	80014aa <equalZero>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d11c      	bne.n	80010c4 <fsm_run+0x3c8>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800108a:	2200      	movs	r2, #0
 800108c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001090:	4840      	ldr	r0, [pc, #256]	; (8001194 <fsm_run+0x498>)
 8001092:	f001 f95c 	bl	800234e <HAL_GPIO_WritePin>
				if (check_admin(CARD_BUF)==1) {
 8001096:	4841      	ldr	r0, [pc, #260]	; (800119c <fsm_run+0x4a0>)
 8001098:	f000 fb2e 	bl	80016f8 <check_admin>
 800109c:	4603      	mov	r3, r0
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d107      	bne.n	80010b2 <fsm_run+0x3b6>
					delete_card();
 80010a2:	f000 fb11 	bl	80016c8 <delete_card>
					state=UNLOCK;
 80010a6:	4b3e      	ldr	r3, [pc, #248]	; (80011a0 <fsm_run+0x4a4>)
 80010a8:	2202      	movs	r2, #2
 80010aa:	601a      	str	r2, [r3, #0]
					reset_buffer();
 80010ac:	f7ff fe0c 	bl	8000cc8 <reset_buffer>
		break;
 80010b0:	e06c      	b.n	800118c <fsm_run+0x490>
					setTimer3(0);
 80010b2:	2000      	movs	r0, #0
 80010b4:	f000 fb58 	bl	8001768 <setTimer3>
					reset_buffer();
 80010b8:	f7ff fe06 	bl	8000cc8 <reset_buffer>
					state=UNLOCK;
 80010bc:	4b38      	ldr	r3, [pc, #224]	; (80011a0 <fsm_run+0x4a4>)
 80010be:	2202      	movs	r2, #2
 80010c0:	601a      	str	r2, [r3, #0]
		break;
 80010c2:	e063      	b.n	800118c <fsm_run+0x490>
				blink(10);
 80010c4:	200a      	movs	r0, #10
 80010c6:	f7ff fccf 	bl	8000a68 <blink>
		break;
 80010ca:	e05f      	b.n	800118c <fsm_run+0x490>
	case REG_PROCESS:
		//Trong 5s k lam gi se tro ve trang thai UNLOCK
		//Neu the duoc quet khong phai the admin, tro ve trang thai UNLOCK
		//Neu the duoc quet vao la the admin, sau do quet the can dang ki vao se luu the vua quet vao bo nho
		if (timer2_flag==1) {
 80010cc:	4b37      	ldr	r3, [pc, #220]	; (80011ac <fsm_run+0x4b0>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d103      	bne.n	80010dc <fsm_run+0x3e0>
			state=UNLOCK;
 80010d4:	4b32      	ldr	r3, [pc, #200]	; (80011a0 <fsm_run+0x4a4>)
 80010d6:	2202      	movs	r2, #2
 80010d8:	601a      	str	r2, [r3, #0]
			}
			else {
				blink(10);
			}
		}
		break;
 80010da:	e057      	b.n	800118c <fsm_run+0x490>
			if (equalZero(CARD_BUF)==0) {
 80010dc:	482f      	ldr	r0, [pc, #188]	; (800119c <fsm_run+0x4a0>)
 80010de:	f000 f9e4 	bl	80014aa <equalZero>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d11e      	bne.n	8001126 <fsm_run+0x42a>
				if (check_admin(CARD_BUF)==1) {
 80010e8:	482c      	ldr	r0, [pc, #176]	; (800119c <fsm_run+0x4a0>)
 80010ea:	f000 fb05 	bl	80016f8 <check_admin>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d10f      	bne.n	8001114 <fsm_run+0x418>
					state=REGIST;
 80010f4:	4b2a      	ldr	r3, [pc, #168]	; (80011a0 <fsm_run+0x4a4>)
 80010f6:	2208      	movs	r2, #8
 80010f8:	601a      	str	r2, [r3, #0]
					setTimer4(5000);
 80010fa:	f241 3088 	movw	r0, #5000	; 0x1388
 80010fe:	f000 fb47 	bl	8001790 <setTimer4>
					reset_buffer();
 8001102:	f7ff fde1 	bl	8000cc8 <reset_buffer>
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001106:	2201      	movs	r2, #1
 8001108:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800110c:	4821      	ldr	r0, [pc, #132]	; (8001194 <fsm_run+0x498>)
 800110e:	f001 f91e 	bl	800234e <HAL_GPIO_WritePin>
		break;
 8001112:	e03b      	b.n	800118c <fsm_run+0x490>
					setTimer2(0);
 8001114:	2000      	movs	r0, #0
 8001116:	f000 fb13 	bl	8001740 <setTimer2>
					reset_buffer();
 800111a:	f7ff fdd5 	bl	8000cc8 <reset_buffer>
					state=UNLOCK;
 800111e:	4b20      	ldr	r3, [pc, #128]	; (80011a0 <fsm_run+0x4a4>)
 8001120:	2202      	movs	r2, #2
 8001122:	601a      	str	r2, [r3, #0]
		break;
 8001124:	e032      	b.n	800118c <fsm_run+0x490>
				blink(10);
 8001126:	200a      	movs	r0, #10
 8001128:	f7ff fc9e 	bl	8000a68 <blink>
		break;
 800112c:	e02e      	b.n	800118c <fsm_run+0x490>
	case REGIST:
		if (timer4_flag==1) {
 800112e:	4b20      	ldr	r3, [pc, #128]	; (80011b0 <fsm_run+0x4b4>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d109      	bne.n	800114a <fsm_run+0x44e>
			state=UNLOCK;
 8001136:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <fsm_run+0x4a4>)
 8001138:	2202      	movs	r2, #2
 800113a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800113c:	2200      	movs	r2, #0
 800113e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001142:	4814      	ldr	r0, [pc, #80]	; (8001194 <fsm_run+0x498>)
 8001144:	f001 f903 	bl	800234e <HAL_GPIO_WritePin>
					reset_buffer();
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
			}
		}
	default:
		break;
 8001148:	e013      	b.n	8001172 <fsm_run+0x476>
			if (equalZero(CARD_BUF)==0) {
 800114a:	4814      	ldr	r0, [pc, #80]	; (800119c <fsm_run+0x4a0>)
 800114c:	f000 f9ad 	bl	80014aa <equalZero>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10d      	bne.n	8001172 <fsm_run+0x476>
					add_new_card(CARD_BUF);
 8001156:	4811      	ldr	r0, [pc, #68]	; (800119c <fsm_run+0x4a0>)
 8001158:	f000 faaa 	bl	80016b0 <add_new_card>
					state=UNLOCK;
 800115c:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <fsm_run+0x4a4>)
 800115e:	2202      	movs	r2, #2
 8001160:	601a      	str	r2, [r3, #0]
					reset_buffer();
 8001162:	f7ff fdb1 	bl	8000cc8 <reset_buffer>
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800116c:	4809      	ldr	r0, [pc, #36]	; (8001194 <fsm_run+0x498>)
 800116e:	f001 f8ee 	bl	800234e <HAL_GPIO_WritePin>
		break;
 8001172:	bf00      	nop
 8001174:	e00a      	b.n	800118c <fsm_run+0x490>
		break;
 8001176:	bf00      	nop
 8001178:	e008      	b.n	800118c <fsm_run+0x490>
		break;
 800117a:	bf00      	nop
 800117c:	e006      	b.n	800118c <fsm_run+0x490>
		break;
 800117e:	bf00      	nop
 8001180:	e004      	b.n	800118c <fsm_run+0x490>
		break;
 8001182:	bf00      	nop
 8001184:	e002      	b.n	800118c <fsm_run+0x490>
		break;
 8001186:	bf00      	nop
 8001188:	e000      	b.n	800118c <fsm_run+0x490>
		break;
 800118a:	bf00      	nop
	}
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000410 	.word	0x20000410
 8001194:	40011000 	.word	0x40011000
 8001198:	40010800 	.word	0x40010800
 800119c:	200000e8 	.word	0x200000e8
 80011a0:	200000e4 	.word	0x200000e4
 80011a4:	20000418 	.word	0x20000418
 80011a8:	200003f8 	.word	0x200003f8
 80011ac:	200003f0 	.word	0x200003f0
 80011b0:	20000400 	.word	0x20000400

080011b4 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback ( UART_HandleTypeDef * huart ){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b090      	sub	sp, #64	; 0x40
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == USART2 ){
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a11      	ldr	r2, [pc, #68]	; (8001208 <HAL_UART_RxCpltCallback+0x54>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d11b      	bne.n	80011fe <HAL_UART_RxCpltCallback+0x4a>
		duplicateID(CARD_BUF, str);
 80011c6:	4911      	ldr	r1, [pc, #68]	; (800120c <HAL_UART_RxCpltCallback+0x58>)
 80011c8:	4811      	ldr	r0, [pc, #68]	; (8001210 <HAL_UART_RxCpltCallback+0x5c>)
 80011ca:	f000 f9a9 	bl	8001520 <duplicateID>
		uint8_t print[50];
		HAL_UART_Transmit(&huart2, (void*)print, sprintf(print, "%s\r\n", str), 1000);
 80011ce:	f107 030c 	add.w	r3, r7, #12
 80011d2:	4a0e      	ldr	r2, [pc, #56]	; (800120c <HAL_UART_RxCpltCallback+0x58>)
 80011d4:	490f      	ldr	r1, [pc, #60]	; (8001214 <HAL_UART_RxCpltCallback+0x60>)
 80011d6:	4618      	mov	r0, r3
 80011d8:	f002 fe3a 	bl	8003e50 <siprintf>
 80011dc:	4603      	mov	r3, r0
 80011de:	b29a      	uxth	r2, r3
 80011e0:	f107 010c 	add.w	r1, r7, #12
 80011e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e8:	480b      	ldr	r0, [pc, #44]	; (8001218 <HAL_UART_RxCpltCallback+0x64>)
 80011ea:	f002 f914 	bl	8003416 <HAL_UART_Transmit>
		flagForReceive=1;
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <HAL_UART_RxCpltCallback+0x68>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, str, 5);
 80011f4:	2205      	movs	r2, #5
 80011f6:	4905      	ldr	r1, [pc, #20]	; (800120c <HAL_UART_RxCpltCallback+0x58>)
 80011f8:	4807      	ldr	r0, [pc, #28]	; (8001218 <HAL_UART_RxCpltCallback+0x64>)
 80011fa:	f002 f99e 	bl	800353a <HAL_UART_Receive_IT>
	}
}
 80011fe:	bf00      	nop
 8001200:	3740      	adds	r7, #64	; 0x40
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40004400 	.word	0x40004400
 800120c:	2000017c 	.word	0x2000017c
 8001210:	200000e8 	.word	0x200000e8
 8001214:	08005528 	.word	0x08005528
 8001218:	20000138 	.word	0x20000138
 800121c:	20000181 	.word	0x20000181

08001220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08e      	sub	sp, #56	; 0x38
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001226:	f000 fcdf 	bl	8001be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800122a:	f000 f819 	bl	8001260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800122e:	f000 f8c9 	bl	80013c4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001232:	f000 f851 	bl	80012d8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001236:	f000 f89b 	bl	8001370 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800123a:	4807      	ldr	r0, [pc, #28]	; (8001258 <main+0x38>)
 800123c:	f001 fd0a 	bl	8002c54 <HAL_TIM_Base_Start_IT>
  reset_buffer();
 8001240:	f7ff fd42 	bl	8000cc8 <reset_buffer>
  HAL_UART_Receive_IT(&huart2, &str, 5);
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	2205      	movs	r2, #5
 8001248:	4619      	mov	r1, r3
 800124a:	4804      	ldr	r0, [pc, #16]	; (800125c <main+0x3c>)
 800124c:	f002 f975 	bl	800353a <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fsm_run();
 8001250:	f7ff fd54 	bl	8000cfc <fsm_run>
 8001254:	e7fc      	b.n	8001250 <main+0x30>
 8001256:	bf00      	nop
 8001258:	200000f0 	.word	0x200000f0
 800125c:	20000138 	.word	0x20000138

08001260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b090      	sub	sp, #64	; 0x40
 8001264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001266:	f107 0318 	add.w	r3, r7, #24
 800126a:	2228      	movs	r2, #40	; 0x28
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f002 fde6 	bl	8003e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
 8001280:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001282:	2302      	movs	r3, #2
 8001284:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001286:	2301      	movs	r3, #1
 8001288:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800128a:	2310      	movs	r3, #16
 800128c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800128e:	2300      	movs	r3, #0
 8001290:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001292:	f107 0318 	add.w	r3, r7, #24
 8001296:	4618      	mov	r0, r3
 8001298:	f001 f872 	bl	8002380 <HAL_RCC_OscConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80012a2:	f000 f8fd 	bl	80014a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a6:	230f      	movs	r3, #15
 80012a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	2100      	movs	r1, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f001 fae0 	bl	8002884 <HAL_RCC_ClockConfig>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80012ca:	f000 f8e9 	bl	80014a0 <Error_Handler>
  }
}
 80012ce:	bf00      	nop
 80012d0:	3740      	adds	r7, #64	; 0x40
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012de:	f107 0308 	add.w	r3, r7, #8
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ec:	463b      	mov	r3, r7
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012f4:	4b1d      	ldr	r3, [pc, #116]	; (800136c <MX_TIM2_Init+0x94>)
 80012f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80012fc:	4b1b      	ldr	r3, [pc, #108]	; (800136c <MX_TIM2_Init+0x94>)
 80012fe:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001302:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001304:	4b19      	ldr	r3, [pc, #100]	; (800136c <MX_TIM2_Init+0x94>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800130a:	4b18      	ldr	r3, [pc, #96]	; (800136c <MX_TIM2_Init+0x94>)
 800130c:	2209      	movs	r2, #9
 800130e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001310:	4b16      	ldr	r3, [pc, #88]	; (800136c <MX_TIM2_Init+0x94>)
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <MX_TIM2_Init+0x94>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800131c:	4813      	ldr	r0, [pc, #76]	; (800136c <MX_TIM2_Init+0x94>)
 800131e:	f001 fc49 	bl	8002bb4 <HAL_TIM_Base_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001328:	f000 f8ba 	bl	80014a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001330:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001332:	f107 0308 	add.w	r3, r7, #8
 8001336:	4619      	mov	r1, r3
 8001338:	480c      	ldr	r0, [pc, #48]	; (800136c <MX_TIM2_Init+0x94>)
 800133a:	f001 fddf 	bl	8002efc <HAL_TIM_ConfigClockSource>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001344:	f000 f8ac 	bl	80014a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001348:	2300      	movs	r3, #0
 800134a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001350:	463b      	mov	r3, r7
 8001352:	4619      	mov	r1, r3
 8001354:	4805      	ldr	r0, [pc, #20]	; (800136c <MX_TIM2_Init+0x94>)
 8001356:	f001 ffa7 	bl	80032a8 <HAL_TIMEx_MasterConfigSynchronization>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001360:	f000 f89e 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001364:	bf00      	nop
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	200000f0 	.word	0x200000f0

08001370 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 8001376:	4a12      	ldr	r2, [pc, #72]	; (80013c0 <MX_USART2_UART_Init+0x50>)
 8001378:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800137a:	4b10      	ldr	r3, [pc, #64]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 800137c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001380:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001382:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001388:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 800138a:	2200      	movs	r2, #0
 800138c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800138e:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001394:	4b09      	ldr	r3, [pc, #36]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 8001396:	220c      	movs	r2, #12
 8001398:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139a:	4b08      	ldr	r3, [pc, #32]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013a6:	4805      	ldr	r0, [pc, #20]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 80013a8:	f001 ffe8 	bl	800337c <HAL_UART_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013b2:	f000 f875 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000138 	.word	0x20000138
 80013c0:	40004400 	.word	0x40004400

080013c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ca:	f107 0308 	add.w	r3, r7, #8
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d8:	4b28      	ldr	r3, [pc, #160]	; (800147c <MX_GPIO_Init+0xb8>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	4a27      	ldr	r2, [pc, #156]	; (800147c <MX_GPIO_Init+0xb8>)
 80013de:	f043 0310 	orr.w	r3, r3, #16
 80013e2:	6193      	str	r3, [r2, #24]
 80013e4:	4b25      	ldr	r3, [pc, #148]	; (800147c <MX_GPIO_Init+0xb8>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	f003 0310 	and.w	r3, r3, #16
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f0:	4b22      	ldr	r3, [pc, #136]	; (800147c <MX_GPIO_Init+0xb8>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	4a21      	ldr	r2, [pc, #132]	; (800147c <MX_GPIO_Init+0xb8>)
 80013f6:	f043 0304 	orr.w	r3, r3, #4
 80013fa:	6193      	str	r3, [r2, #24]
 80013fc:	4b1f      	ldr	r3, [pc, #124]	; (800147c <MX_GPIO_Init+0xb8>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	603b      	str	r3, [r7, #0]
 8001406:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001408:	2200      	movs	r2, #0
 800140a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800140e:	481c      	ldr	r0, [pc, #112]	; (8001480 <MX_GPIO_Init+0xbc>)
 8001410:	f000 ff9d 	bl	800234e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LOCK_SIGNAL_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8001414:	2200      	movs	r2, #0
 8001416:	2160      	movs	r1, #96	; 0x60
 8001418:	481a      	ldr	r0, [pc, #104]	; (8001484 <MX_GPIO_Init+0xc0>)
 800141a:	f000 ff98 	bl	800234e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800141e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001422:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001424:	2301      	movs	r3, #1
 8001426:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	2302      	movs	r3, #2
 800142e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001430:	f107 0308 	add.w	r3, r7, #8
 8001434:	4619      	mov	r1, r3
 8001436:	4812      	ldr	r0, [pc, #72]	; (8001480 <MX_GPIO_Init+0xbc>)
 8001438:	f000 fdf6 	bl	8002028 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOCK_SIGNAL_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = LOCK_SIGNAL_Pin|BUZZER_Pin;
 800143c:	2360      	movs	r3, #96	; 0x60
 800143e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001440:	2301      	movs	r3, #1
 8001442:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001444:	2302      	movs	r3, #2
 8001446:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001448:	2302      	movs	r3, #2
 800144a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144c:	f107 0308 	add.w	r3, r7, #8
 8001450:	4619      	mov	r1, r3
 8001452:	480c      	ldr	r0, [pc, #48]	; (8001484 <MX_GPIO_Init+0xc0>)
 8001454:	f000 fde8 	bl	8002028 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_Pin REG_Pin LOCK_Pin UNLOCK_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|REG_Pin|LOCK_Pin|UNLOCK_Pin;
 8001458:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800145c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001462:	2301      	movs	r3, #1
 8001464:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001466:	f107 0308 	add.w	r3, r7, #8
 800146a:	4619      	mov	r1, r3
 800146c:	4805      	ldr	r0, [pc, #20]	; (8001484 <MX_GPIO_Init+0xc0>)
 800146e:	f000 fddb 	bl	8002028 <HAL_GPIO_Init>

}
 8001472:	bf00      	nop
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40021000 	.word	0x40021000
 8001480:	40011000 	.word	0x40011000
 8001484:	40010800 	.word	0x40010800

08001488 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
	timeRun();
 8001490:	f000 f9ce 	bl	8001830 <timeRun>
	button_reading();
 8001494:	f7ff fb36 	bl	8000b04 <button_reading>
}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a4:	b672      	cpsid	i
}
 80014a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <Error_Handler+0x8>

080014aa <equalZero>:
struct node admin;
struct node array[100];
int counter=0;


uint8_t equalZero(uint8_t* CardID1) {
 80014aa:	b480      	push	{r7}
 80014ac:	b085      	sub	sp, #20
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for (i = 0; i < 5; i++) {
 80014b2:	2300      	movs	r3, #0
 80014b4:	73fb      	strb	r3, [r7, #15]
 80014b6:	e00a      	b.n	80014ce <equalZero+0x24>
		if (CardID1[i] != 0) return 0;
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <equalZero+0x1e>
 80014c4:	2300      	movs	r3, #0
 80014c6:	e006      	b.n	80014d6 <equalZero+0x2c>
	for (i = 0; i < 5; i++) {
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	3301      	adds	r3, #1
 80014cc:	73fb      	strb	r3, [r7, #15]
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	2b04      	cmp	r3, #4
 80014d2:	d9f1      	bls.n	80014b8 <equalZero+0xe>
	}
	return 1;
 80014d4:	2301      	movs	r3, #1
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr

080014e0 <equalID>:
		if (CardID1[i] > CardID2[i]) return 1;
	}
	return 0;
}

uint8_t equalID(uint8_t* CardID1, uint8_t* CardID2) {
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 5; i++) {
 80014ea:	2300      	movs	r3, #0
 80014ec:	73fb      	strb	r3, [r7, #15]
 80014ee:	e00e      	b.n	800150e <equalID+0x2e>
		if (CardID1[i] != CardID2[i]) return 0;
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	781a      	ldrb	r2, [r3, #0]
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	6839      	ldr	r1, [r7, #0]
 80014fc:	440b      	add	r3, r1
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	429a      	cmp	r2, r3
 8001502:	d001      	beq.n	8001508 <equalID+0x28>
 8001504:	2300      	movs	r3, #0
 8001506:	e006      	b.n	8001516 <equalID+0x36>
	for (i = 0; i < 5; i++) {
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	3301      	adds	r3, #1
 800150c:	73fb      	strb	r3, [r7, #15]
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	2b04      	cmp	r3, #4
 8001512:	d9ed      	bls.n	80014f0 <equalID+0x10>
	}
	return 1;
 8001514:	2301      	movs	r3, #1
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr

08001520 <duplicateID>:

void duplicateID(uint8_t* CardID1, uint8_t* CardID2){
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
    	uint8_t i;
	for (i = 0; i < 5; i++) {
 800152a:	2300      	movs	r3, #0
 800152c:	73fb      	strb	r3, [r7, #15]
 800152e:	e00a      	b.n	8001546 <duplicateID+0x26>
		CardID1[i] = CardID2[i];
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	441a      	add	r2, r3
 8001536:	7bfb      	ldrb	r3, [r7, #15]
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	440b      	add	r3, r1
 800153c:	7812      	ldrb	r2, [r2, #0]
 800153e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 5; i++) {
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	3301      	adds	r3, #1
 8001544:	73fb      	strb	r3, [r7, #15]
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	2b04      	cmp	r3, #4
 800154a:	d9f1      	bls.n	8001530 <duplicateID+0x10>
	}
}
 800154c:	bf00      	nop
 800154e:	bf00      	nop
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <insert>:


void insert(uint8_t* key){
 8001558:	b490      	push	{r4, r7}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
    if(counter>=100) return;
 8001560:	4b22      	ldr	r3, [pc, #136]	; (80015ec <insert+0x94>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b63      	cmp	r3, #99	; 0x63
 8001566:	dc3c      	bgt.n	80015e2 <insert+0x8a>
    counter++;
 8001568:	4b20      	ldr	r3, [pc, #128]	; (80015ec <insert+0x94>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	3301      	adds	r3, #1
 800156e:	4a1f      	ldr	r2, [pc, #124]	; (80015ec <insert+0x94>)
 8001570:	6013      	str	r3, [r2, #0]
    for(int i=0;i<100;i++){
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	e030      	b.n	80015da <insert+0x82>
        if(array[i].used_mem==0){
 8001578:	491d      	ldr	r1, [pc, #116]	; (80015f0 <insert+0x98>)
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	4613      	mov	r3, r2
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	4413      	add	r3, r2
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	440b      	add	r3, r1
 8001586:	3305      	adds	r3, #5
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d122      	bne.n	80015d4 <insert+0x7c>
            array[i].used_mem=1;
 800158e:	4918      	ldr	r1, [pc, #96]	; (80015f0 <insert+0x98>)
 8001590:	68fa      	ldr	r2, [r7, #12]
 8001592:	4613      	mov	r3, r2
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	4413      	add	r3, r2
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	440b      	add	r3, r1
 800159c:	3305      	adds	r3, #5
 800159e:	2201      	movs	r2, #1
 80015a0:	701a      	strb	r2, [r3, #0]
            for(uint8_t j=0;j<5;j++) array[i].ID[j] = key[j];
 80015a2:	2300      	movs	r3, #0
 80015a4:	72fb      	strb	r3, [r7, #11]
 80015a6:	e011      	b.n	80015cc <insert+0x74>
 80015a8:	7afb      	ldrb	r3, [r7, #11]
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	7af9      	ldrb	r1, [r7, #11]
 80015b0:	781c      	ldrb	r4, [r3, #0]
 80015b2:	480f      	ldr	r0, [pc, #60]	; (80015f0 <insert+0x98>)
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	4613      	mov	r3, r2
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	4413      	add	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4403      	add	r3, r0
 80015c0:	440b      	add	r3, r1
 80015c2:	4622      	mov	r2, r4
 80015c4:	701a      	strb	r2, [r3, #0]
 80015c6:	7afb      	ldrb	r3, [r7, #11]
 80015c8:	3301      	adds	r3, #1
 80015ca:	72fb      	strb	r3, [r7, #11]
 80015cc:	7afb      	ldrb	r3, [r7, #11]
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	d9ea      	bls.n	80015a8 <insert+0x50>
            return;
 80015d2:	e007      	b.n	80015e4 <insert+0x8c>
    for(int i=0;i<100;i++){
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	3301      	adds	r3, #1
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2b63      	cmp	r3, #99	; 0x63
 80015de:	ddcb      	ble.n	8001578 <insert+0x20>
 80015e0:	e000      	b.n	80015e4 <insert+0x8c>
    if(counter>=100) return;
 80015e2:	bf00      	nop
        }
    }

}
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc90      	pop	{r4, r7}
 80015ea:	4770      	bx	lr
 80015ec:	200003e4 	.word	0x200003e4
 80015f0:	2000018c 	.word	0x2000018c

080015f4 <delete_all>:


void delete_all(){
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
    counter=0;
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <delete_all+0x40>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
    for(int i=0;i<100;i++)
 8001600:	2300      	movs	r3, #0
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	e00c      	b.n	8001620 <delete_all+0x2c>
        array[i].used_mem=0;
 8001606:	490c      	ldr	r1, [pc, #48]	; (8001638 <delete_all+0x44>)
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	4613      	mov	r3, r2
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	4413      	add	r3, r2
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	440b      	add	r3, r1
 8001614:	3305      	adds	r3, #5
 8001616:	2200      	movs	r2, #0
 8001618:	701a      	strb	r2, [r3, #0]
    for(int i=0;i<100;i++)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	3301      	adds	r3, #1
 800161e:	607b      	str	r3, [r7, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b63      	cmp	r3, #99	; 0x63
 8001624:	ddef      	ble.n	8001606 <delete_all+0x12>
}
 8001626:	bf00      	nop
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	200003e4 	.word	0x200003e4
 8001638:	2000018c 	.word	0x2000018c

0800163c <search>:

uint8_t search(uint8_t* key){
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
    if(equalID(admin.ID,key)) return 1;//admin card
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	4818      	ldr	r0, [pc, #96]	; (80016a8 <search+0x6c>)
 8001648:	f7ff ff4a 	bl	80014e0 <equalID>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <search+0x1a>
 8001652:	2301      	movs	r3, #1
 8001654:	e024      	b.n	80016a0 <search+0x64>
    for(int i=0;i<100;i++){
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	e01d      	b.n	8001698 <search+0x5c>
        if((equalID(array[i].ID,key)) &&
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	4613      	mov	r3, r2
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	4413      	add	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	4a11      	ldr	r2, [pc, #68]	; (80016ac <search+0x70>)
 8001668:	4413      	add	r3, r2
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ff37 	bl	80014e0 <equalID>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d00c      	beq.n	8001692 <search+0x56>
          (array[i].used_mem==1)) return 1; //registered card
 8001678:	490c      	ldr	r1, [pc, #48]	; (80016ac <search+0x70>)
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	4613      	mov	r3, r2
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	4413      	add	r3, r2
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	440b      	add	r3, r1
 8001686:	3305      	adds	r3, #5
 8001688:	781b      	ldrb	r3, [r3, #0]
        if((equalID(array[i].ID,key)) &&
 800168a:	2b01      	cmp	r3, #1
 800168c:	d101      	bne.n	8001692 <search+0x56>
          (array[i].used_mem==1)) return 1; //registered card
 800168e:	2301      	movs	r3, #1
 8001690:	e006      	b.n	80016a0 <search+0x64>
    for(int i=0;i<100;i++){
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	3301      	adds	r3, #1
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2b63      	cmp	r3, #99	; 0x63
 800169c:	ddde      	ble.n	800165c <search+0x20>
    }
    return 0; //not found card
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000184 	.word	0x20000184
 80016ac:	2000018c 	.word	0x2000018c

080016b0 <add_new_card>:

uint8_t add_new_card(uint8_t* key)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
       insert(key);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff ff4d 	bl	8001558 <insert>
       return 1;
 80016be:	2301      	movs	r3, #1
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <delete_card>:



uint8_t delete_card(){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
        delete_all();
 80016cc:	f7ff ff92 	bl	80015f4 <delete_all>
        return 1;
 80016d0:	2301      	movs	r3, #1
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <set_admin>:


uint8_t set_admin(uint8_t *ID){
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
        duplicateID(admin.ID, ID);
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	4804      	ldr	r0, [pc, #16]	; (80016f4 <set_admin+0x1c>)
 80016e4:	f7ff ff1c 	bl	8001520 <duplicateID>
        return 1;
 80016e8:	2301      	movs	r3, #1
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000184 	.word	0x20000184

080016f8 <check_admin>:

uint8_t check_admin(uint8_t *ID){
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
	return equalID(ID, admin.ID);
 8001700:	4904      	ldr	r1, [pc, #16]	; (8001714 <check_admin+0x1c>)
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff feec 	bl	80014e0 <equalID>
 8001708:	4603      	mov	r3, r0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000184 	.word	0x20000184

08001718 <setTimer1>:
int timer6_counter=0;
int timer7_flag=0;
int timer7_counter=0;
int timer8_flag=0;
int timer8_counter=0;
void setTimer1(int duration) {
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
	timer1_counter=duration;
 8001720:	4a05      	ldr	r2, [pc, #20]	; (8001738 <setTimer1+0x20>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 8001726:	4b05      	ldr	r3, [pc, #20]	; (800173c <setTimer1+0x24>)
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	200003ec 	.word	0x200003ec
 800173c:	200003e8 	.word	0x200003e8

08001740 <setTimer2>:
void setTimer2(int duration) {
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
	timer2_counter=duration;
 8001748:	4a05      	ldr	r2, [pc, #20]	; (8001760 <setTimer2+0x20>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6013      	str	r3, [r2, #0]
	timer2_flag=0;
 800174e:	4b05      	ldr	r3, [pc, #20]	; (8001764 <setTimer2+0x24>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	200003f4 	.word	0x200003f4
 8001764:	200003f0 	.word	0x200003f0

08001768 <setTimer3>:
void setTimer3(int duration) {
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
	timer3_counter=duration;
 8001770:	4a05      	ldr	r2, [pc, #20]	; (8001788 <setTimer3+0x20>)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6013      	str	r3, [r2, #0]
	timer3_flag=0;
 8001776:	4b05      	ldr	r3, [pc, #20]	; (800178c <setTimer3+0x24>)
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	200003fc 	.word	0x200003fc
 800178c:	200003f8 	.word	0x200003f8

08001790 <setTimer4>:
void setTimer4(int duration) {
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
	timer4_counter=duration;
 8001798:	4a05      	ldr	r2, [pc, #20]	; (80017b0 <setTimer4+0x20>)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6013      	str	r3, [r2, #0]
	timer4_flag=0;
 800179e:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <setTimer4+0x24>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	20000404 	.word	0x20000404
 80017b4:	20000400 	.word	0x20000400

080017b8 <setTimer6>:
void setTimer5(int duration) {
	timer5_counter=duration;
	timer5_flag=0;
}
void setTimer6(int duration) {
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
	timer6_counter=duration;
 80017c0:	4a05      	ldr	r2, [pc, #20]	; (80017d8 <setTimer6+0x20>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6013      	str	r3, [r2, #0]
	timer6_flag=0;
 80017c6:	4b05      	ldr	r3, [pc, #20]	; (80017dc <setTimer6+0x24>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	20000414 	.word	0x20000414
 80017dc:	20000410 	.word	0x20000410

080017e0 <setTimer7>:
void setTimer7(int duration) {
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
	timer7_counter=duration;
 80017e8:	4a05      	ldr	r2, [pc, #20]	; (8001800 <setTimer7+0x20>)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6013      	str	r3, [r2, #0]
	timer7_flag=0;
 80017ee:	4b05      	ldr	r3, [pc, #20]	; (8001804 <setTimer7+0x24>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bc80      	pop	{r7}
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	2000041c 	.word	0x2000041c
 8001804:	20000418 	.word	0x20000418

08001808 <setTimer8>:
void setTimer8(int duration) {
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	timer8_counter=duration;
 8001810:	4a05      	ldr	r2, [pc, #20]	; (8001828 <setTimer8+0x20>)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6013      	str	r3, [r2, #0]
	timer8_flag=0;
 8001816:	4b05      	ldr	r3, [pc, #20]	; (800182c <setTimer8+0x24>)
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	20000424 	.word	0x20000424
 800182c:	20000420 	.word	0x20000420

08001830 <timeRun>:
void timeRun() {
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
	if (timer1_counter>0) {
 8001834:	4b41      	ldr	r3, [pc, #260]	; (800193c <timeRun+0x10c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	dd0b      	ble.n	8001854 <timeRun+0x24>
		timer1_counter--;
 800183c:	4b3f      	ldr	r3, [pc, #252]	; (800193c <timeRun+0x10c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	3b01      	subs	r3, #1
 8001842:	4a3e      	ldr	r2, [pc, #248]	; (800193c <timeRun+0x10c>)
 8001844:	6013      	str	r3, [r2, #0]
		if (timer1_counter<=0) {
 8001846:	4b3d      	ldr	r3, [pc, #244]	; (800193c <timeRun+0x10c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	dc02      	bgt.n	8001854 <timeRun+0x24>
			timer1_flag=1;
 800184e:	4b3c      	ldr	r3, [pc, #240]	; (8001940 <timeRun+0x110>)
 8001850:	2201      	movs	r2, #1
 8001852:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter>0) {
 8001854:	4b3b      	ldr	r3, [pc, #236]	; (8001944 <timeRun+0x114>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	dd0b      	ble.n	8001874 <timeRun+0x44>
		timer2_counter--;
 800185c:	4b39      	ldr	r3, [pc, #228]	; (8001944 <timeRun+0x114>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	3b01      	subs	r3, #1
 8001862:	4a38      	ldr	r2, [pc, #224]	; (8001944 <timeRun+0x114>)
 8001864:	6013      	str	r3, [r2, #0]
		if (timer2_counter<=0) {
 8001866:	4b37      	ldr	r3, [pc, #220]	; (8001944 <timeRun+0x114>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	dc02      	bgt.n	8001874 <timeRun+0x44>
			timer2_flag=1;
 800186e:	4b36      	ldr	r3, [pc, #216]	; (8001948 <timeRun+0x118>)
 8001870:	2201      	movs	r2, #1
 8001872:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter>0) {
 8001874:	4b35      	ldr	r3, [pc, #212]	; (800194c <timeRun+0x11c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	dd0b      	ble.n	8001894 <timeRun+0x64>
		timer3_counter--;
 800187c:	4b33      	ldr	r3, [pc, #204]	; (800194c <timeRun+0x11c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	3b01      	subs	r3, #1
 8001882:	4a32      	ldr	r2, [pc, #200]	; (800194c <timeRun+0x11c>)
 8001884:	6013      	str	r3, [r2, #0]
		if (timer3_counter<=0) {
 8001886:	4b31      	ldr	r3, [pc, #196]	; (800194c <timeRun+0x11c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	dc02      	bgt.n	8001894 <timeRun+0x64>
			timer3_flag=1;
 800188e:	4b30      	ldr	r3, [pc, #192]	; (8001950 <timeRun+0x120>)
 8001890:	2201      	movs	r2, #1
 8001892:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer4_counter>0) {
 8001894:	4b2f      	ldr	r3, [pc, #188]	; (8001954 <timeRun+0x124>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	dd0b      	ble.n	80018b4 <timeRun+0x84>
		timer4_counter--;
 800189c:	4b2d      	ldr	r3, [pc, #180]	; (8001954 <timeRun+0x124>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	3b01      	subs	r3, #1
 80018a2:	4a2c      	ldr	r2, [pc, #176]	; (8001954 <timeRun+0x124>)
 80018a4:	6013      	str	r3, [r2, #0]
		if (timer4_counter<=0) {
 80018a6:	4b2b      	ldr	r3, [pc, #172]	; (8001954 <timeRun+0x124>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	dc02      	bgt.n	80018b4 <timeRun+0x84>
			timer4_flag=1;
 80018ae:	4b2a      	ldr	r3, [pc, #168]	; (8001958 <timeRun+0x128>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer5_counter>0) {
 80018b4:	4b29      	ldr	r3, [pc, #164]	; (800195c <timeRun+0x12c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	dd0b      	ble.n	80018d4 <timeRun+0xa4>
		timer5_counter--;
 80018bc:	4b27      	ldr	r3, [pc, #156]	; (800195c <timeRun+0x12c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	3b01      	subs	r3, #1
 80018c2:	4a26      	ldr	r2, [pc, #152]	; (800195c <timeRun+0x12c>)
 80018c4:	6013      	str	r3, [r2, #0]
		if (timer5_counter<=0) {
 80018c6:	4b25      	ldr	r3, [pc, #148]	; (800195c <timeRun+0x12c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	dc02      	bgt.n	80018d4 <timeRun+0xa4>
			timer5_flag=1;
 80018ce:	4b24      	ldr	r3, [pc, #144]	; (8001960 <timeRun+0x130>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer6_counter>0) {
 80018d4:	4b23      	ldr	r3, [pc, #140]	; (8001964 <timeRun+0x134>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	dd0b      	ble.n	80018f4 <timeRun+0xc4>
		timer6_counter--;
 80018dc:	4b21      	ldr	r3, [pc, #132]	; (8001964 <timeRun+0x134>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	3b01      	subs	r3, #1
 80018e2:	4a20      	ldr	r2, [pc, #128]	; (8001964 <timeRun+0x134>)
 80018e4:	6013      	str	r3, [r2, #0]
		if (timer6_counter<=0) {
 80018e6:	4b1f      	ldr	r3, [pc, #124]	; (8001964 <timeRun+0x134>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	dc02      	bgt.n	80018f4 <timeRun+0xc4>
			timer6_flag=1;
 80018ee:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <timeRun+0x138>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer7_counter>0) {
 80018f4:	4b1d      	ldr	r3, [pc, #116]	; (800196c <timeRun+0x13c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	dd0b      	ble.n	8001914 <timeRun+0xe4>
		timer7_counter--;
 80018fc:	4b1b      	ldr	r3, [pc, #108]	; (800196c <timeRun+0x13c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	3b01      	subs	r3, #1
 8001902:	4a1a      	ldr	r2, [pc, #104]	; (800196c <timeRun+0x13c>)
 8001904:	6013      	str	r3, [r2, #0]
		if (timer7_counter<=0) {
 8001906:	4b19      	ldr	r3, [pc, #100]	; (800196c <timeRun+0x13c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	dc02      	bgt.n	8001914 <timeRun+0xe4>
			timer7_flag=1;
 800190e:	4b18      	ldr	r3, [pc, #96]	; (8001970 <timeRun+0x140>)
 8001910:	2201      	movs	r2, #1
 8001912:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer8_counter>0) {
 8001914:	4b17      	ldr	r3, [pc, #92]	; (8001974 <timeRun+0x144>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	dd0b      	ble.n	8001934 <timeRun+0x104>
		timer8_counter--;
 800191c:	4b15      	ldr	r3, [pc, #84]	; (8001974 <timeRun+0x144>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	3b01      	subs	r3, #1
 8001922:	4a14      	ldr	r2, [pc, #80]	; (8001974 <timeRun+0x144>)
 8001924:	6013      	str	r3, [r2, #0]
		if (timer8_counter<=0) {
 8001926:	4b13      	ldr	r3, [pc, #76]	; (8001974 <timeRun+0x144>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	dc02      	bgt.n	8001934 <timeRun+0x104>
			timer8_flag=1;
 800192e:	4b12      	ldr	r3, [pc, #72]	; (8001978 <timeRun+0x148>)
 8001930:	2201      	movs	r2, #1
 8001932:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr
 800193c:	200003ec 	.word	0x200003ec
 8001940:	200003e8 	.word	0x200003e8
 8001944:	200003f4 	.word	0x200003f4
 8001948:	200003f0 	.word	0x200003f0
 800194c:	200003fc 	.word	0x200003fc
 8001950:	200003f8 	.word	0x200003f8
 8001954:	20000404 	.word	0x20000404
 8001958:	20000400 	.word	0x20000400
 800195c:	2000040c 	.word	0x2000040c
 8001960:	20000408 	.word	0x20000408
 8001964:	20000414 	.word	0x20000414
 8001968:	20000410 	.word	0x20000410
 800196c:	2000041c 	.word	0x2000041c
 8001970:	20000418 	.word	0x20000418
 8001974:	20000424 	.word	0x20000424
 8001978:	20000420 	.word	0x20000420

0800197c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001982:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <HAL_MspInit+0x40>)
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	4a0d      	ldr	r2, [pc, #52]	; (80019bc <HAL_MspInit+0x40>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6193      	str	r3, [r2, #24]
 800198e:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_MspInit+0x40>)
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	4b08      	ldr	r3, [pc, #32]	; (80019bc <HAL_MspInit+0x40>)
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	4a07      	ldr	r2, [pc, #28]	; (80019bc <HAL_MspInit+0x40>)
 80019a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a4:	61d3      	str	r3, [r2, #28]
 80019a6:	4b05      	ldr	r3, [pc, #20]	; (80019bc <HAL_MspInit+0x40>)
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ae:	603b      	str	r3, [r7, #0]
 80019b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr
 80019bc:	40021000 	.word	0x40021000

080019c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019d0:	d113      	bne.n	80019fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019d2:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <HAL_TIM_Base_MspInit+0x44>)
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	4a0b      	ldr	r2, [pc, #44]	; (8001a04 <HAL_TIM_Base_MspInit+0x44>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	61d3      	str	r3, [r2, #28]
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <HAL_TIM_Base_MspInit+0x44>)
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2100      	movs	r1, #0
 80019ee:	201c      	movs	r0, #28
 80019f0:	f000 fa33 	bl	8001e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019f4:	201c      	movs	r0, #28
 80019f6:	f000 fa4c 	bl	8001e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019fa:	bf00      	nop
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40021000 	.word	0x40021000

08001a08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b088      	sub	sp, #32
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 0310 	add.w	r3, r7, #16
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a1f      	ldr	r2, [pc, #124]	; (8001aa0 <HAL_UART_MspInit+0x98>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d137      	bne.n	8001a98 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a28:	4b1e      	ldr	r3, [pc, #120]	; (8001aa4 <HAL_UART_MspInit+0x9c>)
 8001a2a:	69db      	ldr	r3, [r3, #28]
 8001a2c:	4a1d      	ldr	r2, [pc, #116]	; (8001aa4 <HAL_UART_MspInit+0x9c>)
 8001a2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a32:	61d3      	str	r3, [r2, #28]
 8001a34:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <HAL_UART_MspInit+0x9c>)
 8001a36:	69db      	ldr	r3, [r3, #28]
 8001a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a40:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <HAL_UART_MspInit+0x9c>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	4a17      	ldr	r2, [pc, #92]	; (8001aa4 <HAL_UART_MspInit+0x9c>)
 8001a46:	f043 0304 	orr.w	r3, r3, #4
 8001a4a:	6193      	str	r3, [r2, #24]
 8001a4c:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <HAL_UART_MspInit+0x9c>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a58:	2304      	movs	r3, #4
 8001a5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a60:	2303      	movs	r3, #3
 8001a62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a64:	f107 0310 	add.w	r3, r7, #16
 8001a68:	4619      	mov	r1, r3
 8001a6a:	480f      	ldr	r0, [pc, #60]	; (8001aa8 <HAL_UART_MspInit+0xa0>)
 8001a6c:	f000 fadc 	bl	8002028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a70:	2308      	movs	r3, #8
 8001a72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7c:	f107 0310 	add.w	r3, r7, #16
 8001a80:	4619      	mov	r1, r3
 8001a82:	4809      	ldr	r0, [pc, #36]	; (8001aa8 <HAL_UART_MspInit+0xa0>)
 8001a84:	f000 fad0 	bl	8002028 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	2026      	movs	r0, #38	; 0x26
 8001a8e:	f000 f9e4 	bl	8001e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a92:	2026      	movs	r0, #38	; 0x26
 8001a94:	f000 f9fd 	bl	8001e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a98:	bf00      	nop
 8001a9a:	3720      	adds	r7, #32
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40004400 	.word	0x40004400
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40010800 	.word	0x40010800

08001aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <NMI_Handler+0x4>

08001ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab6:	e7fe      	b.n	8001ab6 <HardFault_Handler+0x4>

08001ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001abc:	e7fe      	b.n	8001abc <MemManage_Handler+0x4>

08001abe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac2:	e7fe      	b.n	8001ac2 <BusFault_Handler+0x4>

08001ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac8:	e7fe      	b.n	8001ac8 <UsageFault_Handler+0x4>

08001aca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr

08001ad6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr

08001ae2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr

08001aee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001af2:	f000 f8bf 	bl	8001c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b00:	4802      	ldr	r0, [pc, #8]	; (8001b0c <TIM2_IRQHandler+0x10>)
 8001b02:	f001 f8f3 	bl	8002cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	200000f0 	.word	0x200000f0

08001b10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b14:	4802      	ldr	r0, [pc, #8]	; (8001b20 <USART2_IRQHandler+0x10>)
 8001b16:	f001 fd41 	bl	800359c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000138 	.word	0x20000138

08001b24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b2c:	4a14      	ldr	r2, [pc, #80]	; (8001b80 <_sbrk+0x5c>)
 8001b2e:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <_sbrk+0x60>)
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b38:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <_sbrk+0x64>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d102      	bne.n	8001b46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b40:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <_sbrk+0x64>)
 8001b42:	4a12      	ldr	r2, [pc, #72]	; (8001b8c <_sbrk+0x68>)
 8001b44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b46:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <_sbrk+0x64>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d207      	bcs.n	8001b64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b54:	f002 f94a 	bl	8003dec <__errno>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	220c      	movs	r2, #12
 8001b5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b62:	e009      	b.n	8001b78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b64:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <_sbrk+0x64>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b6a:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <_sbrk+0x64>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4413      	add	r3, r2
 8001b72:	4a05      	ldr	r2, [pc, #20]	; (8001b88 <_sbrk+0x64>)
 8001b74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b76:	68fb      	ldr	r3, [r7, #12]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20002800 	.word	0x20002800
 8001b84:	00000400 	.word	0x00000400
 8001b88:	20000428 	.word	0x20000428
 8001b8c:	20000440 	.word	0x20000440

08001b90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr

08001b9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b9c:	480c      	ldr	r0, [pc, #48]	; (8001bd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b9e:	490d      	ldr	r1, [pc, #52]	; (8001bd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ba0:	4a0d      	ldr	r2, [pc, #52]	; (8001bd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba4:	e002      	b.n	8001bac <LoopCopyDataInit>

08001ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001baa:	3304      	adds	r3, #4

08001bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb0:	d3f9      	bcc.n	8001ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bb2:	4a0a      	ldr	r2, [pc, #40]	; (8001bdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bb4:	4c0a      	ldr	r4, [pc, #40]	; (8001be0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb8:	e001      	b.n	8001bbe <LoopFillZerobss>

08001bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bbc:	3204      	adds	r2, #4

08001bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc0:	d3fb      	bcc.n	8001bba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bc2:	f7ff ffe5 	bl	8001b90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bc6:	f002 f917 	bl	8003df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bca:	f7ff fb29 	bl	8001220 <main>
  bx lr
 8001bce:	4770      	bx	lr
  ldr r0, =_sdata
 8001bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001bd8:	080055c8 	.word	0x080055c8
  ldr r2, =_sbss
 8001bdc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001be0:	20000440 	.word	0x20000440

08001be4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001be4:	e7fe      	b.n	8001be4 <ADC1_2_IRQHandler>
	...

08001be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bec:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <HAL_Init+0x28>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a07      	ldr	r2, [pc, #28]	; (8001c10 <HAL_Init+0x28>)
 8001bf2:	f043 0310 	orr.w	r3, r3, #16
 8001bf6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf8:	2003      	movs	r0, #3
 8001bfa:	f000 f923 	bl	8001e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bfe:	200f      	movs	r0, #15
 8001c00:	f000 f808 	bl	8001c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c04:	f7ff feba 	bl	800197c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40022000 	.word	0x40022000

08001c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c1c:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <HAL_InitTick+0x54>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <HAL_InitTick+0x58>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	4619      	mov	r1, r3
 8001c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c32:	4618      	mov	r0, r3
 8001c34:	f000 f93b 	bl	8001eae <HAL_SYSTICK_Config>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e00e      	b.n	8001c60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b0f      	cmp	r3, #15
 8001c46:	d80a      	bhi.n	8001c5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c50:	f000 f903 	bl	8001e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c54:	4a06      	ldr	r2, [pc, #24]	; (8001c70 <HAL_InitTick+0x5c>)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	e000      	b.n	8001c60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	20000008 	.word	0x20000008
 8001c70:	20000004 	.word	0x20000004

08001c74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <HAL_IncTick+0x1c>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <HAL_IncTick+0x20>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4413      	add	r3, r2
 8001c84:	4a03      	ldr	r2, [pc, #12]	; (8001c94 <HAL_IncTick+0x20>)
 8001c86:	6013      	str	r3, [r2, #0]
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr
 8001c90:	20000008 	.word	0x20000008
 8001c94:	2000042c 	.word	0x2000042c

08001c98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c9c:	4b02      	ldr	r3, [pc, #8]	; (8001ca8 <HAL_GetTick+0x10>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr
 8001ca8:	2000042c 	.word	0x2000042c

08001cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cde:	4a04      	ldr	r2, [pc, #16]	; (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	60d3      	str	r3, [r2, #12]
}
 8001ce4:	bf00      	nop
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf8:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <__NVIC_GetPriorityGrouping+0x18>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	0a1b      	lsrs	r3, r3, #8
 8001cfe:	f003 0307 	and.w	r3, r3, #7
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	db0b      	blt.n	8001d3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	f003 021f 	and.w	r2, r3, #31
 8001d28:	4906      	ldr	r1, [pc, #24]	; (8001d44 <__NVIC_EnableIRQ+0x34>)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	095b      	lsrs	r3, r3, #5
 8001d30:	2001      	movs	r0, #1
 8001d32:	fa00 f202 	lsl.w	r2, r0, r2
 8001d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr
 8001d44:	e000e100 	.word	0xe000e100

08001d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	6039      	str	r1, [r7, #0]
 8001d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	db0a      	blt.n	8001d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	490c      	ldr	r1, [pc, #48]	; (8001d94 <__NVIC_SetPriority+0x4c>)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	0112      	lsls	r2, r2, #4
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d70:	e00a      	b.n	8001d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	4908      	ldr	r1, [pc, #32]	; (8001d98 <__NVIC_SetPriority+0x50>)
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	3b04      	subs	r3, #4
 8001d80:	0112      	lsls	r2, r2, #4
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	440b      	add	r3, r1
 8001d86:	761a      	strb	r2, [r3, #24]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	e000e100 	.word	0xe000e100
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b089      	sub	sp, #36	; 0x24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f1c3 0307 	rsb	r3, r3, #7
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	bf28      	it	cs
 8001dba:	2304      	movcs	r3, #4
 8001dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	2b06      	cmp	r3, #6
 8001dc4:	d902      	bls.n	8001dcc <NVIC_EncodePriority+0x30>
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3b03      	subs	r3, #3
 8001dca:	e000      	b.n	8001dce <NVIC_EncodePriority+0x32>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	401a      	ands	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de4:	f04f 31ff 	mov.w	r1, #4294967295
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	43d9      	mvns	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df4:	4313      	orrs	r3, r2
         );
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3724      	adds	r7, #36	; 0x24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr

08001e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e10:	d301      	bcc.n	8001e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e12:	2301      	movs	r3, #1
 8001e14:	e00f      	b.n	8001e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e16:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <SysTick_Config+0x40>)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e1e:	210f      	movs	r1, #15
 8001e20:	f04f 30ff 	mov.w	r0, #4294967295
 8001e24:	f7ff ff90 	bl	8001d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e28:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <SysTick_Config+0x40>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e2e:	4b04      	ldr	r3, [pc, #16]	; (8001e40 <SysTick_Config+0x40>)
 8001e30:	2207      	movs	r2, #7
 8001e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	e000e010 	.word	0xe000e010

08001e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff ff2d 	bl	8001cac <__NVIC_SetPriorityGrouping>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	4603      	mov	r3, r0
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e6c:	f7ff ff42 	bl	8001cf4 <__NVIC_GetPriorityGrouping>
 8001e70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	68b9      	ldr	r1, [r7, #8]
 8001e76:	6978      	ldr	r0, [r7, #20]
 8001e78:	f7ff ff90 	bl	8001d9c <NVIC_EncodePriority>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff5f 	bl	8001d48 <__NVIC_SetPriority>
}
 8001e8a:	bf00      	nop
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	4603      	mov	r3, r0
 8001e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff35 	bl	8001d10 <__NVIC_EnableIRQ>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff ffa2 	bl	8001e00 <SysTick_Config>
 8001ebc:	4603      	mov	r3, r0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b085      	sub	sp, #20
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d008      	beq.n	8001eee <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2204      	movs	r2, #4
 8001ee0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e020      	b.n	8001f30 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 020e 	bic.w	r2, r2, #14
 8001efc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 0201 	bic.w	r2, r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f16:	2101      	movs	r1, #1
 8001f18:	fa01 f202 	lsl.w	r2, r1, r2
 8001f1c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr
	...

08001f3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d005      	beq.n	8001f5e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2204      	movs	r2, #4
 8001f56:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	73fb      	strb	r3, [r7, #15]
 8001f5c:	e051      	b.n	8002002 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 020e 	bic.w	r2, r2, #14
 8001f6c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0201 	bic.w	r2, r2, #1
 8001f7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a22      	ldr	r2, [pc, #136]	; (800200c <HAL_DMA_Abort_IT+0xd0>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d029      	beq.n	8001fdc <HAL_DMA_Abort_IT+0xa0>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a20      	ldr	r2, [pc, #128]	; (8002010 <HAL_DMA_Abort_IT+0xd4>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d022      	beq.n	8001fd8 <HAL_DMA_Abort_IT+0x9c>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a1f      	ldr	r2, [pc, #124]	; (8002014 <HAL_DMA_Abort_IT+0xd8>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d01a      	beq.n	8001fd2 <HAL_DMA_Abort_IT+0x96>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a1d      	ldr	r2, [pc, #116]	; (8002018 <HAL_DMA_Abort_IT+0xdc>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d012      	beq.n	8001fcc <HAL_DMA_Abort_IT+0x90>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a1c      	ldr	r2, [pc, #112]	; (800201c <HAL_DMA_Abort_IT+0xe0>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d00a      	beq.n	8001fc6 <HAL_DMA_Abort_IT+0x8a>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a1a      	ldr	r2, [pc, #104]	; (8002020 <HAL_DMA_Abort_IT+0xe4>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d102      	bne.n	8001fc0 <HAL_DMA_Abort_IT+0x84>
 8001fba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001fbe:	e00e      	b.n	8001fde <HAL_DMA_Abort_IT+0xa2>
 8001fc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fc4:	e00b      	b.n	8001fde <HAL_DMA_Abort_IT+0xa2>
 8001fc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fca:	e008      	b.n	8001fde <HAL_DMA_Abort_IT+0xa2>
 8001fcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fd0:	e005      	b.n	8001fde <HAL_DMA_Abort_IT+0xa2>
 8001fd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fd6:	e002      	b.n	8001fde <HAL_DMA_Abort_IT+0xa2>
 8001fd8:	2310      	movs	r3, #16
 8001fda:	e000      	b.n	8001fde <HAL_DMA_Abort_IT+0xa2>
 8001fdc:	2301      	movs	r3, #1
 8001fde:	4a11      	ldr	r2, [pc, #68]	; (8002024 <HAL_DMA_Abort_IT+0xe8>)
 8001fe0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	4798      	blx	r3
    } 
  }
  return status;
 8002002:	7bfb      	ldrb	r3, [r7, #15]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40020008 	.word	0x40020008
 8002010:	4002001c 	.word	0x4002001c
 8002014:	40020030 	.word	0x40020030
 8002018:	40020044 	.word	0x40020044
 800201c:	40020058 	.word	0x40020058
 8002020:	4002006c 	.word	0x4002006c
 8002024:	40020000 	.word	0x40020000

08002028 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002028:	b480      	push	{r7}
 800202a:	b08b      	sub	sp, #44	; 0x2c
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002032:	2300      	movs	r3, #0
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002036:	2300      	movs	r3, #0
 8002038:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800203a:	e161      	b.n	8002300 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800203c:	2201      	movs	r2, #1
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	69fa      	ldr	r2, [r7, #28]
 800204c:	4013      	ands	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	429a      	cmp	r2, r3
 8002056:	f040 8150 	bne.w	80022fa <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	4a97      	ldr	r2, [pc, #604]	; (80022bc <HAL_GPIO_Init+0x294>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d05e      	beq.n	8002122 <HAL_GPIO_Init+0xfa>
 8002064:	4a95      	ldr	r2, [pc, #596]	; (80022bc <HAL_GPIO_Init+0x294>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d875      	bhi.n	8002156 <HAL_GPIO_Init+0x12e>
 800206a:	4a95      	ldr	r2, [pc, #596]	; (80022c0 <HAL_GPIO_Init+0x298>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d058      	beq.n	8002122 <HAL_GPIO_Init+0xfa>
 8002070:	4a93      	ldr	r2, [pc, #588]	; (80022c0 <HAL_GPIO_Init+0x298>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d86f      	bhi.n	8002156 <HAL_GPIO_Init+0x12e>
 8002076:	4a93      	ldr	r2, [pc, #588]	; (80022c4 <HAL_GPIO_Init+0x29c>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d052      	beq.n	8002122 <HAL_GPIO_Init+0xfa>
 800207c:	4a91      	ldr	r2, [pc, #580]	; (80022c4 <HAL_GPIO_Init+0x29c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d869      	bhi.n	8002156 <HAL_GPIO_Init+0x12e>
 8002082:	4a91      	ldr	r2, [pc, #580]	; (80022c8 <HAL_GPIO_Init+0x2a0>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d04c      	beq.n	8002122 <HAL_GPIO_Init+0xfa>
 8002088:	4a8f      	ldr	r2, [pc, #572]	; (80022c8 <HAL_GPIO_Init+0x2a0>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d863      	bhi.n	8002156 <HAL_GPIO_Init+0x12e>
 800208e:	4a8f      	ldr	r2, [pc, #572]	; (80022cc <HAL_GPIO_Init+0x2a4>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d046      	beq.n	8002122 <HAL_GPIO_Init+0xfa>
 8002094:	4a8d      	ldr	r2, [pc, #564]	; (80022cc <HAL_GPIO_Init+0x2a4>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d85d      	bhi.n	8002156 <HAL_GPIO_Init+0x12e>
 800209a:	2b12      	cmp	r3, #18
 800209c:	d82a      	bhi.n	80020f4 <HAL_GPIO_Init+0xcc>
 800209e:	2b12      	cmp	r3, #18
 80020a0:	d859      	bhi.n	8002156 <HAL_GPIO_Init+0x12e>
 80020a2:	a201      	add	r2, pc, #4	; (adr r2, 80020a8 <HAL_GPIO_Init+0x80>)
 80020a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a8:	08002123 	.word	0x08002123
 80020ac:	080020fd 	.word	0x080020fd
 80020b0:	0800210f 	.word	0x0800210f
 80020b4:	08002151 	.word	0x08002151
 80020b8:	08002157 	.word	0x08002157
 80020bc:	08002157 	.word	0x08002157
 80020c0:	08002157 	.word	0x08002157
 80020c4:	08002157 	.word	0x08002157
 80020c8:	08002157 	.word	0x08002157
 80020cc:	08002157 	.word	0x08002157
 80020d0:	08002157 	.word	0x08002157
 80020d4:	08002157 	.word	0x08002157
 80020d8:	08002157 	.word	0x08002157
 80020dc:	08002157 	.word	0x08002157
 80020e0:	08002157 	.word	0x08002157
 80020e4:	08002157 	.word	0x08002157
 80020e8:	08002157 	.word	0x08002157
 80020ec:	08002105 	.word	0x08002105
 80020f0:	08002119 	.word	0x08002119
 80020f4:	4a76      	ldr	r2, [pc, #472]	; (80022d0 <HAL_GPIO_Init+0x2a8>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d013      	beq.n	8002122 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020fa:	e02c      	b.n	8002156 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	623b      	str	r3, [r7, #32]
          break;
 8002102:	e029      	b.n	8002158 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	3304      	adds	r3, #4
 800210a:	623b      	str	r3, [r7, #32]
          break;
 800210c:	e024      	b.n	8002158 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	3308      	adds	r3, #8
 8002114:	623b      	str	r3, [r7, #32]
          break;
 8002116:	e01f      	b.n	8002158 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	330c      	adds	r3, #12
 800211e:	623b      	str	r3, [r7, #32]
          break;
 8002120:	e01a      	b.n	8002158 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d102      	bne.n	8002130 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800212a:	2304      	movs	r3, #4
 800212c:	623b      	str	r3, [r7, #32]
          break;
 800212e:	e013      	b.n	8002158 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d105      	bne.n	8002144 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002138:	2308      	movs	r3, #8
 800213a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69fa      	ldr	r2, [r7, #28]
 8002140:	611a      	str	r2, [r3, #16]
          break;
 8002142:	e009      	b.n	8002158 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002144:	2308      	movs	r3, #8
 8002146:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	69fa      	ldr	r2, [r7, #28]
 800214c:	615a      	str	r2, [r3, #20]
          break;
 800214e:	e003      	b.n	8002158 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002150:	2300      	movs	r3, #0
 8002152:	623b      	str	r3, [r7, #32]
          break;
 8002154:	e000      	b.n	8002158 <HAL_GPIO_Init+0x130>
          break;
 8002156:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	2bff      	cmp	r3, #255	; 0xff
 800215c:	d801      	bhi.n	8002162 <HAL_GPIO_Init+0x13a>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	e001      	b.n	8002166 <HAL_GPIO_Init+0x13e>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3304      	adds	r3, #4
 8002166:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	2bff      	cmp	r3, #255	; 0xff
 800216c:	d802      	bhi.n	8002174 <HAL_GPIO_Init+0x14c>
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	e002      	b.n	800217a <HAL_GPIO_Init+0x152>
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	3b08      	subs	r3, #8
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	210f      	movs	r1, #15
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	fa01 f303 	lsl.w	r3, r1, r3
 8002188:	43db      	mvns	r3, r3
 800218a:	401a      	ands	r2, r3
 800218c:	6a39      	ldr	r1, [r7, #32]
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	fa01 f303 	lsl.w	r3, r1, r3
 8002194:	431a      	orrs	r2, r3
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f000 80a9 	beq.w	80022fa <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021a8:	4b4a      	ldr	r3, [pc, #296]	; (80022d4 <HAL_GPIO_Init+0x2ac>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	4a49      	ldr	r2, [pc, #292]	; (80022d4 <HAL_GPIO_Init+0x2ac>)
 80021ae:	f043 0301 	orr.w	r3, r3, #1
 80021b2:	6193      	str	r3, [r2, #24]
 80021b4:	4b47      	ldr	r3, [pc, #284]	; (80022d4 <HAL_GPIO_Init+0x2ac>)
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	60bb      	str	r3, [r7, #8]
 80021be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021c0:	4a45      	ldr	r2, [pc, #276]	; (80022d8 <HAL_GPIO_Init+0x2b0>)
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	089b      	lsrs	r3, r3, #2
 80021c6:	3302      	adds	r3, #2
 80021c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	f003 0303 	and.w	r3, r3, #3
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	220f      	movs	r2, #15
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4013      	ands	r3, r2
 80021e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a3d      	ldr	r2, [pc, #244]	; (80022dc <HAL_GPIO_Init+0x2b4>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d00d      	beq.n	8002208 <HAL_GPIO_Init+0x1e0>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a3c      	ldr	r2, [pc, #240]	; (80022e0 <HAL_GPIO_Init+0x2b8>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d007      	beq.n	8002204 <HAL_GPIO_Init+0x1dc>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a3b      	ldr	r2, [pc, #236]	; (80022e4 <HAL_GPIO_Init+0x2bc>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d101      	bne.n	8002200 <HAL_GPIO_Init+0x1d8>
 80021fc:	2302      	movs	r3, #2
 80021fe:	e004      	b.n	800220a <HAL_GPIO_Init+0x1e2>
 8002200:	2303      	movs	r3, #3
 8002202:	e002      	b.n	800220a <HAL_GPIO_Init+0x1e2>
 8002204:	2301      	movs	r3, #1
 8002206:	e000      	b.n	800220a <HAL_GPIO_Init+0x1e2>
 8002208:	2300      	movs	r3, #0
 800220a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800220c:	f002 0203 	and.w	r2, r2, #3
 8002210:	0092      	lsls	r2, r2, #2
 8002212:	4093      	lsls	r3, r2
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	4313      	orrs	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800221a:	492f      	ldr	r1, [pc, #188]	; (80022d8 <HAL_GPIO_Init+0x2b0>)
 800221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221e:	089b      	lsrs	r3, r3, #2
 8002220:	3302      	adds	r3, #2
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d006      	beq.n	8002242 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002234:	4b2c      	ldr	r3, [pc, #176]	; (80022e8 <HAL_GPIO_Init+0x2c0>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	492b      	ldr	r1, [pc, #172]	; (80022e8 <HAL_GPIO_Init+0x2c0>)
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	4313      	orrs	r3, r2
 800223e:	600b      	str	r3, [r1, #0]
 8002240:	e006      	b.n	8002250 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002242:	4b29      	ldr	r3, [pc, #164]	; (80022e8 <HAL_GPIO_Init+0x2c0>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	43db      	mvns	r3, r3
 800224a:	4927      	ldr	r1, [pc, #156]	; (80022e8 <HAL_GPIO_Init+0x2c0>)
 800224c:	4013      	ands	r3, r2
 800224e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d006      	beq.n	800226a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800225c:	4b22      	ldr	r3, [pc, #136]	; (80022e8 <HAL_GPIO_Init+0x2c0>)
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	4921      	ldr	r1, [pc, #132]	; (80022e8 <HAL_GPIO_Init+0x2c0>)
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	4313      	orrs	r3, r2
 8002266:	604b      	str	r3, [r1, #4]
 8002268:	e006      	b.n	8002278 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800226a:	4b1f      	ldr	r3, [pc, #124]	; (80022e8 <HAL_GPIO_Init+0x2c0>)
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	43db      	mvns	r3, r3
 8002272:	491d      	ldr	r1, [pc, #116]	; (80022e8 <HAL_GPIO_Init+0x2c0>)
 8002274:	4013      	ands	r3, r2
 8002276:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d006      	beq.n	8002292 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002284:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <HAL_GPIO_Init+0x2c0>)
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	4917      	ldr	r1, [pc, #92]	; (80022e8 <HAL_GPIO_Init+0x2c0>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	4313      	orrs	r3, r2
 800228e:	608b      	str	r3, [r1, #8]
 8002290:	e006      	b.n	80022a0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002292:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <HAL_GPIO_Init+0x2c0>)
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	43db      	mvns	r3, r3
 800229a:	4913      	ldr	r1, [pc, #76]	; (80022e8 <HAL_GPIO_Init+0x2c0>)
 800229c:	4013      	ands	r3, r2
 800229e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d01f      	beq.n	80022ec <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022ac:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <HAL_GPIO_Init+0x2c0>)
 80022ae:	68da      	ldr	r2, [r3, #12]
 80022b0:	490d      	ldr	r1, [pc, #52]	; (80022e8 <HAL_GPIO_Init+0x2c0>)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	60cb      	str	r3, [r1, #12]
 80022b8:	e01f      	b.n	80022fa <HAL_GPIO_Init+0x2d2>
 80022ba:	bf00      	nop
 80022bc:	10320000 	.word	0x10320000
 80022c0:	10310000 	.word	0x10310000
 80022c4:	10220000 	.word	0x10220000
 80022c8:	10210000 	.word	0x10210000
 80022cc:	10120000 	.word	0x10120000
 80022d0:	10110000 	.word	0x10110000
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40010000 	.word	0x40010000
 80022dc:	40010800 	.word	0x40010800
 80022e0:	40010c00 	.word	0x40010c00
 80022e4:	40011000 	.word	0x40011000
 80022e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022ec:	4b0b      	ldr	r3, [pc, #44]	; (800231c <HAL_GPIO_Init+0x2f4>)
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	43db      	mvns	r3, r3
 80022f4:	4909      	ldr	r1, [pc, #36]	; (800231c <HAL_GPIO_Init+0x2f4>)
 80022f6:	4013      	ands	r3, r2
 80022f8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	3301      	adds	r3, #1
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	fa22 f303 	lsr.w	r3, r2, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	f47f ae96 	bne.w	800203c <HAL_GPIO_Init+0x14>
  }
}
 8002310:	bf00      	nop
 8002312:	bf00      	nop
 8002314:	372c      	adds	r7, #44	; 0x2c
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr
 800231c:	40010400 	.word	0x40010400

08002320 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	460b      	mov	r3, r1
 800232a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	887b      	ldrh	r3, [r7, #2]
 8002332:	4013      	ands	r3, r2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d002      	beq.n	800233e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002338:	2301      	movs	r3, #1
 800233a:	73fb      	strb	r3, [r7, #15]
 800233c:	e001      	b.n	8002342 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800233e:	2300      	movs	r3, #0
 8002340:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002342:	7bfb      	ldrb	r3, [r7, #15]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	bc80      	pop	{r7}
 800234c:	4770      	bx	lr

0800234e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	460b      	mov	r3, r1
 8002358:	807b      	strh	r3, [r7, #2]
 800235a:	4613      	mov	r3, r2
 800235c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800235e:	787b      	ldrb	r3, [r7, #1]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002364:	887a      	ldrh	r2, [r7, #2]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800236a:	e003      	b.n	8002374 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800236c:	887b      	ldrh	r3, [r7, #2]
 800236e:	041a      	lsls	r2, r3, #16
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	611a      	str	r2, [r3, #16]
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr
	...

08002380 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e272      	b.n	8002878 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	f000 8087 	beq.w	80024ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023a0:	4b92      	ldr	r3, [pc, #584]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 030c 	and.w	r3, r3, #12
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d00c      	beq.n	80023c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023ac:	4b8f      	ldr	r3, [pc, #572]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 030c 	and.w	r3, r3, #12
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	d112      	bne.n	80023de <HAL_RCC_OscConfig+0x5e>
 80023b8:	4b8c      	ldr	r3, [pc, #560]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c4:	d10b      	bne.n	80023de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c6:	4b89      	ldr	r3, [pc, #548]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d06c      	beq.n	80024ac <HAL_RCC_OscConfig+0x12c>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d168      	bne.n	80024ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e24c      	b.n	8002878 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023e6:	d106      	bne.n	80023f6 <HAL_RCC_OscConfig+0x76>
 80023e8:	4b80      	ldr	r3, [pc, #512]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a7f      	ldr	r2, [pc, #508]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 80023ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f2:	6013      	str	r3, [r2, #0]
 80023f4:	e02e      	b.n	8002454 <HAL_RCC_OscConfig+0xd4>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10c      	bne.n	8002418 <HAL_RCC_OscConfig+0x98>
 80023fe:	4b7b      	ldr	r3, [pc, #492]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a7a      	ldr	r2, [pc, #488]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002404:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	4b78      	ldr	r3, [pc, #480]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a77      	ldr	r2, [pc, #476]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002410:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	e01d      	b.n	8002454 <HAL_RCC_OscConfig+0xd4>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002420:	d10c      	bne.n	800243c <HAL_RCC_OscConfig+0xbc>
 8002422:	4b72      	ldr	r3, [pc, #456]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a71      	ldr	r2, [pc, #452]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	4b6f      	ldr	r3, [pc, #444]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a6e      	ldr	r2, [pc, #440]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	e00b      	b.n	8002454 <HAL_RCC_OscConfig+0xd4>
 800243c:	4b6b      	ldr	r3, [pc, #428]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a6a      	ldr	r2, [pc, #424]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002446:	6013      	str	r3, [r2, #0]
 8002448:	4b68      	ldr	r3, [pc, #416]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a67      	ldr	r2, [pc, #412]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 800244e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002452:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d013      	beq.n	8002484 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245c:	f7ff fc1c 	bl	8001c98 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002464:	f7ff fc18 	bl	8001c98 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b64      	cmp	r3, #100	; 0x64
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e200      	b.n	8002878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002476:	4b5d      	ldr	r3, [pc, #372]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0f0      	beq.n	8002464 <HAL_RCC_OscConfig+0xe4>
 8002482:	e014      	b.n	80024ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002484:	f7ff fc08 	bl	8001c98 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800248c:	f7ff fc04 	bl	8001c98 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b64      	cmp	r3, #100	; 0x64
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e1ec      	b.n	8002878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800249e:	4b53      	ldr	r3, [pc, #332]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f0      	bne.n	800248c <HAL_RCC_OscConfig+0x10c>
 80024aa:	e000      	b.n	80024ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d063      	beq.n	8002582 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024ba:	4b4c      	ldr	r3, [pc, #304]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f003 030c 	and.w	r3, r3, #12
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00b      	beq.n	80024de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024c6:	4b49      	ldr	r3, [pc, #292]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f003 030c 	and.w	r3, r3, #12
 80024ce:	2b08      	cmp	r3, #8
 80024d0:	d11c      	bne.n	800250c <HAL_RCC_OscConfig+0x18c>
 80024d2:	4b46      	ldr	r3, [pc, #280]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d116      	bne.n	800250c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024de:	4b43      	ldr	r3, [pc, #268]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d005      	beq.n	80024f6 <HAL_RCC_OscConfig+0x176>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d001      	beq.n	80024f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e1c0      	b.n	8002878 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f6:	4b3d      	ldr	r3, [pc, #244]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4939      	ldr	r1, [pc, #228]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002506:	4313      	orrs	r3, r2
 8002508:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800250a:	e03a      	b.n	8002582 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d020      	beq.n	8002556 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002514:	4b36      	ldr	r3, [pc, #216]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 8002516:	2201      	movs	r2, #1
 8002518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251a:	f7ff fbbd 	bl	8001c98 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002522:	f7ff fbb9 	bl	8001c98 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e1a1      	b.n	8002878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002534:	4b2d      	ldr	r3, [pc, #180]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0f0      	beq.n	8002522 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002540:	4b2a      	ldr	r3, [pc, #168]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	4927      	ldr	r1, [pc, #156]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002550:	4313      	orrs	r3, r2
 8002552:	600b      	str	r3, [r1, #0]
 8002554:	e015      	b.n	8002582 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002556:	4b26      	ldr	r3, [pc, #152]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255c:	f7ff fb9c 	bl	8001c98 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002564:	f7ff fb98 	bl	8001c98 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e180      	b.n	8002878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002576:	4b1d      	ldr	r3, [pc, #116]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f0      	bne.n	8002564 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d03a      	beq.n	8002604 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d019      	beq.n	80025ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002596:	4b17      	ldr	r3, [pc, #92]	; (80025f4 <HAL_RCC_OscConfig+0x274>)
 8002598:	2201      	movs	r2, #1
 800259a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259c:	f7ff fb7c 	bl	8001c98 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025a4:	f7ff fb78 	bl	8001c98 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e160      	b.n	8002878 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025b6:	4b0d      	ldr	r3, [pc, #52]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 80025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025c2:	2001      	movs	r0, #1
 80025c4:	f000 fad8 	bl	8002b78 <RCC_Delay>
 80025c8:	e01c      	b.n	8002604 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ca:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <HAL_RCC_OscConfig+0x274>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d0:	f7ff fb62 	bl	8001c98 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d6:	e00f      	b.n	80025f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025d8:	f7ff fb5e 	bl	8001c98 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d908      	bls.n	80025f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e146      	b.n	8002878 <HAL_RCC_OscConfig+0x4f8>
 80025ea:	bf00      	nop
 80025ec:	40021000 	.word	0x40021000
 80025f0:	42420000 	.word	0x42420000
 80025f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025f8:	4b92      	ldr	r3, [pc, #584]	; (8002844 <HAL_RCC_OscConfig+0x4c4>)
 80025fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1e9      	bne.n	80025d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	f000 80a6 	beq.w	800275e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002612:	2300      	movs	r3, #0
 8002614:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002616:	4b8b      	ldr	r3, [pc, #556]	; (8002844 <HAL_RCC_OscConfig+0x4c4>)
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10d      	bne.n	800263e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002622:	4b88      	ldr	r3, [pc, #544]	; (8002844 <HAL_RCC_OscConfig+0x4c4>)
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	4a87      	ldr	r2, [pc, #540]	; (8002844 <HAL_RCC_OscConfig+0x4c4>)
 8002628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800262c:	61d3      	str	r3, [r2, #28]
 800262e:	4b85      	ldr	r3, [pc, #532]	; (8002844 <HAL_RCC_OscConfig+0x4c4>)
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002636:	60bb      	str	r3, [r7, #8]
 8002638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800263a:	2301      	movs	r3, #1
 800263c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800263e:	4b82      	ldr	r3, [pc, #520]	; (8002848 <HAL_RCC_OscConfig+0x4c8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002646:	2b00      	cmp	r3, #0
 8002648:	d118      	bne.n	800267c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800264a:	4b7f      	ldr	r3, [pc, #508]	; (8002848 <HAL_RCC_OscConfig+0x4c8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a7e      	ldr	r2, [pc, #504]	; (8002848 <HAL_RCC_OscConfig+0x4c8>)
 8002650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002656:	f7ff fb1f 	bl	8001c98 <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800265e:	f7ff fb1b 	bl	8001c98 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b64      	cmp	r3, #100	; 0x64
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e103      	b.n	8002878 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002670:	4b75      	ldr	r3, [pc, #468]	; (8002848 <HAL_RCC_OscConfig+0x4c8>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0f0      	beq.n	800265e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d106      	bne.n	8002692 <HAL_RCC_OscConfig+0x312>
 8002684:	4b6f      	ldr	r3, [pc, #444]	; (8002844 <HAL_RCC_OscConfig+0x4c4>)
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	4a6e      	ldr	r2, [pc, #440]	; (8002844 <HAL_RCC_OscConfig+0x4c4>)
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	6213      	str	r3, [r2, #32]
 8002690:	e02d      	b.n	80026ee <HAL_RCC_OscConfig+0x36e>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10c      	bne.n	80026b4 <HAL_RCC_OscConfig+0x334>
 800269a:	4b6a      	ldr	r3, [pc, #424]	; (8002844 <HAL_RCC_OscConfig+0x4c4>)
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	4a69      	ldr	r2, [pc, #420]	; (8002844 <HAL_RCC_OscConfig+0x4c4>)
 80026a0:	f023 0301 	bic.w	r3, r3, #1
 80026a4:	6213      	str	r3, [r2, #32]
 80026a6:	4b67      	ldr	r3, [pc, #412]	; (8002844 <HAL_RCC_OscConfig+0x4c4>)
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	4a66      	ldr	r2, [pc, #408]	; (8002844 <HAL_RCC_OscConfig+0x4c4>)
 80026ac:	f023 0304 	bic.w	r3, r3, #4
 80026b0:	6213      	str	r3, [r2, #32]
 80026b2:	e01c      	b.n	80026ee <HAL_RCC_OscConfig+0x36e>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	2b05      	cmp	r3, #5
 80026ba:	d10c      	bne.n	80026d6 <HAL_RCC_OscConfig+0x356>
 80026bc:	4b61      	ldr	r3, [pc, #388]	; (8002844 <HAL_RCC_OscConfig+0x4c4>)
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	4a60      	ldr	r2, [pc, #384]	; (8002844 <HAL_RCC_OscConfig+0x4c4>)
 80026c2:	f043 0304 	orr.w	r3, r3, #4
 80026c6:	6213      	str	r3, [r2, #32]
 80026c8:	4b5e      	ldr	r3, [pc, #376]	; (8002844 <HAL_RCC_OscConfig+0x4c4>)
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	4a5d      	ldr	r2, [pc, #372]	; (8002844 <HAL_RCC_OscConfig+0x4c4>)
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	6213      	str	r3, [r2, #32]
 80026d4:	e00b      	b.n	80026ee <HAL_RCC_OscConfig+0x36e>
 80026d6:	4b5b      	ldr	r3, [pc, #364]	; (8002844 <HAL_RCC_OscConfig+0x4c4>)
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	4a5a      	ldr	r2, [pc, #360]	; (8002844 <HAL_RCC_OscConfig+0x4c4>)
 80026dc:	f023 0301 	bic.w	r3, r3, #1
 80026e0:	6213      	str	r3, [r2, #32]
 80026e2:	4b58      	ldr	r3, [pc, #352]	; (8002844 <HAL_RCC_OscConfig+0x4c4>)
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	4a57      	ldr	r2, [pc, #348]	; (8002844 <HAL_RCC_OscConfig+0x4c4>)
 80026e8:	f023 0304 	bic.w	r3, r3, #4
 80026ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d015      	beq.n	8002722 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f6:	f7ff facf 	bl	8001c98 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026fc:	e00a      	b.n	8002714 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026fe:	f7ff facb 	bl	8001c98 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	f241 3288 	movw	r2, #5000	; 0x1388
 800270c:	4293      	cmp	r3, r2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e0b1      	b.n	8002878 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002714:	4b4b      	ldr	r3, [pc, #300]	; (8002844 <HAL_RCC_OscConfig+0x4c4>)
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0ee      	beq.n	80026fe <HAL_RCC_OscConfig+0x37e>
 8002720:	e014      	b.n	800274c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002722:	f7ff fab9 	bl	8001c98 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002728:	e00a      	b.n	8002740 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800272a:	f7ff fab5 	bl	8001c98 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	f241 3288 	movw	r2, #5000	; 0x1388
 8002738:	4293      	cmp	r3, r2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e09b      	b.n	8002878 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002740:	4b40      	ldr	r3, [pc, #256]	; (8002844 <HAL_RCC_OscConfig+0x4c4>)
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1ee      	bne.n	800272a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800274c:	7dfb      	ldrb	r3, [r7, #23]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d105      	bne.n	800275e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002752:	4b3c      	ldr	r3, [pc, #240]	; (8002844 <HAL_RCC_OscConfig+0x4c4>)
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	4a3b      	ldr	r2, [pc, #236]	; (8002844 <HAL_RCC_OscConfig+0x4c4>)
 8002758:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800275c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 8087 	beq.w	8002876 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002768:	4b36      	ldr	r3, [pc, #216]	; (8002844 <HAL_RCC_OscConfig+0x4c4>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 030c 	and.w	r3, r3, #12
 8002770:	2b08      	cmp	r3, #8
 8002772:	d061      	beq.n	8002838 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69db      	ldr	r3, [r3, #28]
 8002778:	2b02      	cmp	r3, #2
 800277a:	d146      	bne.n	800280a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800277c:	4b33      	ldr	r3, [pc, #204]	; (800284c <HAL_RCC_OscConfig+0x4cc>)
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002782:	f7ff fa89 	bl	8001c98 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800278a:	f7ff fa85 	bl	8001c98 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e06d      	b.n	8002878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800279c:	4b29      	ldr	r3, [pc, #164]	; (8002844 <HAL_RCC_OscConfig+0x4c4>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1f0      	bne.n	800278a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b0:	d108      	bne.n	80027c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027b2:	4b24      	ldr	r3, [pc, #144]	; (8002844 <HAL_RCC_OscConfig+0x4c4>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	4921      	ldr	r1, [pc, #132]	; (8002844 <HAL_RCC_OscConfig+0x4c4>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027c4:	4b1f      	ldr	r3, [pc, #124]	; (8002844 <HAL_RCC_OscConfig+0x4c4>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a19      	ldr	r1, [r3, #32]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	430b      	orrs	r3, r1
 80027d6:	491b      	ldr	r1, [pc, #108]	; (8002844 <HAL_RCC_OscConfig+0x4c4>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027dc:	4b1b      	ldr	r3, [pc, #108]	; (800284c <HAL_RCC_OscConfig+0x4cc>)
 80027de:	2201      	movs	r2, #1
 80027e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e2:	f7ff fa59 	bl	8001c98 <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ea:	f7ff fa55 	bl	8001c98 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e03d      	b.n	8002878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027fc:	4b11      	ldr	r3, [pc, #68]	; (8002844 <HAL_RCC_OscConfig+0x4c4>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0f0      	beq.n	80027ea <HAL_RCC_OscConfig+0x46a>
 8002808:	e035      	b.n	8002876 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800280a:	4b10      	ldr	r3, [pc, #64]	; (800284c <HAL_RCC_OscConfig+0x4cc>)
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002810:	f7ff fa42 	bl	8001c98 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002818:	f7ff fa3e 	bl	8001c98 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e026      	b.n	8002878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800282a:	4b06      	ldr	r3, [pc, #24]	; (8002844 <HAL_RCC_OscConfig+0x4c4>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1f0      	bne.n	8002818 <HAL_RCC_OscConfig+0x498>
 8002836:	e01e      	b.n	8002876 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	69db      	ldr	r3, [r3, #28]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d107      	bne.n	8002850 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e019      	b.n	8002878 <HAL_RCC_OscConfig+0x4f8>
 8002844:	40021000 	.word	0x40021000
 8002848:	40007000 	.word	0x40007000
 800284c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <HAL_RCC_OscConfig+0x500>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	429a      	cmp	r2, r3
 8002862:	d106      	bne.n	8002872 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800286e:	429a      	cmp	r2, r3
 8002870:	d001      	beq.n	8002876 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40021000 	.word	0x40021000

08002884 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e0d0      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002898:	4b6a      	ldr	r3, [pc, #424]	; (8002a44 <HAL_RCC_ClockConfig+0x1c0>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d910      	bls.n	80028c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a6:	4b67      	ldr	r3, [pc, #412]	; (8002a44 <HAL_RCC_ClockConfig+0x1c0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f023 0207 	bic.w	r2, r3, #7
 80028ae:	4965      	ldr	r1, [pc, #404]	; (8002a44 <HAL_RCC_ClockConfig+0x1c0>)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b6:	4b63      	ldr	r3, [pc, #396]	; (8002a44 <HAL_RCC_ClockConfig+0x1c0>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d001      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e0b8      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d020      	beq.n	8002916 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d005      	beq.n	80028ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028e0:	4b59      	ldr	r3, [pc, #356]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	4a58      	ldr	r2, [pc, #352]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 80028e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0308 	and.w	r3, r3, #8
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d005      	beq.n	8002904 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028f8:	4b53      	ldr	r3, [pc, #332]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	4a52      	ldr	r2, [pc, #328]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 80028fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002902:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002904:	4b50      	ldr	r3, [pc, #320]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	494d      	ldr	r1, [pc, #308]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002912:	4313      	orrs	r3, r2
 8002914:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d040      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d107      	bne.n	800293a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800292a:	4b47      	ldr	r3, [pc, #284]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d115      	bne.n	8002962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e07f      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d107      	bne.n	8002952 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002942:	4b41      	ldr	r3, [pc, #260]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d109      	bne.n	8002962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e073      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002952:	4b3d      	ldr	r3, [pc, #244]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e06b      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002962:	4b39      	ldr	r3, [pc, #228]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f023 0203 	bic.w	r2, r3, #3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	4936      	ldr	r1, [pc, #216]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002970:	4313      	orrs	r3, r2
 8002972:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002974:	f7ff f990 	bl	8001c98 <HAL_GetTick>
 8002978:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297a:	e00a      	b.n	8002992 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800297c:	f7ff f98c 	bl	8001c98 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f241 3288 	movw	r2, #5000	; 0x1388
 800298a:	4293      	cmp	r3, r2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e053      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002992:	4b2d      	ldr	r3, [pc, #180]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f003 020c 	and.w	r2, r3, #12
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d1eb      	bne.n	800297c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029a4:	4b27      	ldr	r3, [pc, #156]	; (8002a44 <HAL_RCC_ClockConfig+0x1c0>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d210      	bcs.n	80029d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b2:	4b24      	ldr	r3, [pc, #144]	; (8002a44 <HAL_RCC_ClockConfig+0x1c0>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 0207 	bic.w	r2, r3, #7
 80029ba:	4922      	ldr	r1, [pc, #136]	; (8002a44 <HAL_RCC_ClockConfig+0x1c0>)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	4313      	orrs	r3, r2
 80029c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c2:	4b20      	ldr	r3, [pc, #128]	; (8002a44 <HAL_RCC_ClockConfig+0x1c0>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d001      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e032      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d008      	beq.n	80029f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029e0:	4b19      	ldr	r3, [pc, #100]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	4916      	ldr	r1, [pc, #88]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d009      	beq.n	8002a12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029fe:	4b12      	ldr	r3, [pc, #72]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	490e      	ldr	r1, [pc, #56]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a12:	f000 f821 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 8002a16:	4602      	mov	r2, r0
 8002a18:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	091b      	lsrs	r3, r3, #4
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	490a      	ldr	r1, [pc, #40]	; (8002a4c <HAL_RCC_ClockConfig+0x1c8>)
 8002a24:	5ccb      	ldrb	r3, [r1, r3]
 8002a26:	fa22 f303 	lsr.w	r3, r2, r3
 8002a2a:	4a09      	ldr	r2, [pc, #36]	; (8002a50 <HAL_RCC_ClockConfig+0x1cc>)
 8002a2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a2e:	4b09      	ldr	r3, [pc, #36]	; (8002a54 <HAL_RCC_ClockConfig+0x1d0>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff f8ee 	bl	8001c14 <HAL_InitTick>

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40022000 	.word	0x40022000
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	08005540 	.word	0x08005540
 8002a50:	20000000 	.word	0x20000000
 8002a54:	20000004 	.word	0x20000004

08002a58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a58:	b490      	push	{r4, r7}
 8002a5a:	b08a      	sub	sp, #40	; 0x28
 8002a5c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a5e:	4b29      	ldr	r3, [pc, #164]	; (8002b04 <HAL_RCC_GetSysClockFreq+0xac>)
 8002a60:	1d3c      	adds	r4, r7, #4
 8002a62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a68:	f240 2301 	movw	r3, #513	; 0x201
 8002a6c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61fb      	str	r3, [r7, #28]
 8002a72:	2300      	movs	r3, #0
 8002a74:	61bb      	str	r3, [r7, #24]
 8002a76:	2300      	movs	r3, #0
 8002a78:	627b      	str	r3, [r7, #36]	; 0x24
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a82:	4b21      	ldr	r3, [pc, #132]	; (8002b08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f003 030c 	and.w	r3, r3, #12
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d002      	beq.n	8002a98 <HAL_RCC_GetSysClockFreq+0x40>
 8002a92:	2b08      	cmp	r3, #8
 8002a94:	d003      	beq.n	8002a9e <HAL_RCC_GetSysClockFreq+0x46>
 8002a96:	e02b      	b.n	8002af0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a98:	4b1c      	ldr	r3, [pc, #112]	; (8002b0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a9a:	623b      	str	r3, [r7, #32]
      break;
 8002a9c:	e02b      	b.n	8002af6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	0c9b      	lsrs	r3, r3, #18
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	3328      	adds	r3, #40	; 0x28
 8002aa8:	443b      	add	r3, r7
 8002aaa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002aae:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d012      	beq.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002aba:	4b13      	ldr	r3, [pc, #76]	; (8002b08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	0c5b      	lsrs	r3, r3, #17
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	3328      	adds	r3, #40	; 0x28
 8002ac6:	443b      	add	r3, r7
 8002ac8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002acc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	4a0e      	ldr	r2, [pc, #56]	; (8002b0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ad2:	fb03 f202 	mul.w	r2, r3, r2
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002adc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ade:	e004      	b.n	8002aea <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	4a0b      	ldr	r2, [pc, #44]	; (8002b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ae4:	fb02 f303 	mul.w	r3, r2, r3
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	623b      	str	r3, [r7, #32]
      break;
 8002aee:	e002      	b.n	8002af6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002af0:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002af2:	623b      	str	r3, [r7, #32]
      break;
 8002af4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002af6:	6a3b      	ldr	r3, [r7, #32]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3728      	adds	r7, #40	; 0x28
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc90      	pop	{r4, r7}
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	08005530 	.word	0x08005530
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	007a1200 	.word	0x007a1200
 8002b10:	003d0900 	.word	0x003d0900

08002b14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b18:	4b02      	ldr	r3, [pc, #8]	; (8002b24 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr
 8002b24:	20000000 	.word	0x20000000

08002b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b2c:	f7ff fff2 	bl	8002b14 <HAL_RCC_GetHCLKFreq>
 8002b30:	4602      	mov	r2, r0
 8002b32:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	0a1b      	lsrs	r3, r3, #8
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	4903      	ldr	r1, [pc, #12]	; (8002b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b3e:	5ccb      	ldrb	r3, [r1, r3]
 8002b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	08005550 	.word	0x08005550

08002b50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b54:	f7ff ffde 	bl	8002b14 <HAL_RCC_GetHCLKFreq>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	4b05      	ldr	r3, [pc, #20]	; (8002b70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	0adb      	lsrs	r3, r3, #11
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	4903      	ldr	r1, [pc, #12]	; (8002b74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b66:	5ccb      	ldrb	r3, [r1, r3]
 8002b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40021000 	.word	0x40021000
 8002b74:	08005550 	.word	0x08005550

08002b78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b80:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <RCC_Delay+0x34>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a0a      	ldr	r2, [pc, #40]	; (8002bb0 <RCC_Delay+0x38>)
 8002b86:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8a:	0a5b      	lsrs	r3, r3, #9
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	fb02 f303 	mul.w	r3, r2, r3
 8002b92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b94:	bf00      	nop
  }
  while (Delay --);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	1e5a      	subs	r2, r3, #1
 8002b9a:	60fa      	str	r2, [r7, #12]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1f9      	bne.n	8002b94 <RCC_Delay+0x1c>
}
 8002ba0:	bf00      	nop
 8002ba2:	bf00      	nop
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr
 8002bac:	20000000 	.word	0x20000000
 8002bb0:	10624dd3 	.word	0x10624dd3

08002bb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e041      	b.n	8002c4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d106      	bne.n	8002be0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7fe fef0 	bl	80019c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2202      	movs	r2, #2
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3304      	adds	r3, #4
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4610      	mov	r0, r2
 8002bf4:	f000 fa6a 	bl	80030cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d001      	beq.n	8002c6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e035      	b.n	8002cd8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2202      	movs	r2, #2
 8002c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f042 0201 	orr.w	r2, r2, #1
 8002c82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a16      	ldr	r2, [pc, #88]	; (8002ce4 <HAL_TIM_Base_Start_IT+0x90>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d009      	beq.n	8002ca2 <HAL_TIM_Base_Start_IT+0x4e>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c96:	d004      	beq.n	8002ca2 <HAL_TIM_Base_Start_IT+0x4e>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a12      	ldr	r2, [pc, #72]	; (8002ce8 <HAL_TIM_Base_Start_IT+0x94>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d111      	bne.n	8002cc6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2b06      	cmp	r3, #6
 8002cb2:	d010      	beq.n	8002cd6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f042 0201 	orr.w	r2, r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cc4:	e007      	b.n	8002cd6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f042 0201 	orr.w	r2, r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bc80      	pop	{r7}
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	40012c00 	.word	0x40012c00
 8002ce8:	40000400 	.word	0x40000400

08002cec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d122      	bne.n	8002d48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d11b      	bne.n	8002d48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f06f 0202 	mvn.w	r2, #2
 8002d18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f9b1 	bl	8003096 <HAL_TIM_IC_CaptureCallback>
 8002d34:	e005      	b.n	8002d42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f9a4 	bl	8003084 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 f9b3 	bl	80030a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d122      	bne.n	8002d9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	d11b      	bne.n	8002d9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f06f 0204 	mvn.w	r2, #4
 8002d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2202      	movs	r2, #2
 8002d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f987 	bl	8003096 <HAL_TIM_IC_CaptureCallback>
 8002d88:	e005      	b.n	8002d96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f97a 	bl	8003084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 f989 	bl	80030a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	f003 0308 	and.w	r3, r3, #8
 8002da6:	2b08      	cmp	r3, #8
 8002da8:	d122      	bne.n	8002df0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	d11b      	bne.n	8002df0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f06f 0208 	mvn.w	r2, #8
 8002dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2204      	movs	r2, #4
 8002dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f95d 	bl	8003096 <HAL_TIM_IC_CaptureCallback>
 8002ddc:	e005      	b.n	8002dea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f950 	bl	8003084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 f95f 	bl	80030a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	f003 0310 	and.w	r3, r3, #16
 8002dfa:	2b10      	cmp	r3, #16
 8002dfc:	d122      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f003 0310 	and.w	r3, r3, #16
 8002e08:	2b10      	cmp	r3, #16
 8002e0a:	d11b      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f06f 0210 	mvn.w	r2, #16
 8002e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2208      	movs	r2, #8
 8002e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f933 	bl	8003096 <HAL_TIM_IC_CaptureCallback>
 8002e30:	e005      	b.n	8002e3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f926 	bl	8003084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 f935 	bl	80030a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d10e      	bne.n	8002e70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d107      	bne.n	8002e70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f06f 0201 	mvn.w	r2, #1
 8002e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7fe fb0c 	bl	8001488 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e7a:	2b80      	cmp	r3, #128	; 0x80
 8002e7c:	d10e      	bne.n	8002e9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e88:	2b80      	cmp	r3, #128	; 0x80
 8002e8a:	d107      	bne.n	8002e9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 fa67 	bl	800336a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea6:	2b40      	cmp	r3, #64	; 0x40
 8002ea8:	d10e      	bne.n	8002ec8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb4:	2b40      	cmp	r3, #64	; 0x40
 8002eb6:	d107      	bne.n	8002ec8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f8f9 	bl	80030ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	f003 0320 	and.w	r3, r3, #32
 8002ed2:	2b20      	cmp	r3, #32
 8002ed4:	d10e      	bne.n	8002ef4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f003 0320 	and.w	r3, r3, #32
 8002ee0:	2b20      	cmp	r3, #32
 8002ee2:	d107      	bne.n	8002ef4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f06f 0220 	mvn.w	r2, #32
 8002eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 fa32 	bl	8003358 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ef4:	bf00      	nop
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d101      	bne.n	8002f14 <HAL_TIM_ConfigClockSource+0x18>
 8002f10:	2302      	movs	r3, #2
 8002f12:	e0b3      	b.n	800307c <HAL_TIM_ConfigClockSource+0x180>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2202      	movs	r2, #2
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f3a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f4c:	d03e      	beq.n	8002fcc <HAL_TIM_ConfigClockSource+0xd0>
 8002f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f52:	f200 8087 	bhi.w	8003064 <HAL_TIM_ConfigClockSource+0x168>
 8002f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f5a:	f000 8085 	beq.w	8003068 <HAL_TIM_ConfigClockSource+0x16c>
 8002f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f62:	d87f      	bhi.n	8003064 <HAL_TIM_ConfigClockSource+0x168>
 8002f64:	2b70      	cmp	r3, #112	; 0x70
 8002f66:	d01a      	beq.n	8002f9e <HAL_TIM_ConfigClockSource+0xa2>
 8002f68:	2b70      	cmp	r3, #112	; 0x70
 8002f6a:	d87b      	bhi.n	8003064 <HAL_TIM_ConfigClockSource+0x168>
 8002f6c:	2b60      	cmp	r3, #96	; 0x60
 8002f6e:	d050      	beq.n	8003012 <HAL_TIM_ConfigClockSource+0x116>
 8002f70:	2b60      	cmp	r3, #96	; 0x60
 8002f72:	d877      	bhi.n	8003064 <HAL_TIM_ConfigClockSource+0x168>
 8002f74:	2b50      	cmp	r3, #80	; 0x50
 8002f76:	d03c      	beq.n	8002ff2 <HAL_TIM_ConfigClockSource+0xf6>
 8002f78:	2b50      	cmp	r3, #80	; 0x50
 8002f7a:	d873      	bhi.n	8003064 <HAL_TIM_ConfigClockSource+0x168>
 8002f7c:	2b40      	cmp	r3, #64	; 0x40
 8002f7e:	d058      	beq.n	8003032 <HAL_TIM_ConfigClockSource+0x136>
 8002f80:	2b40      	cmp	r3, #64	; 0x40
 8002f82:	d86f      	bhi.n	8003064 <HAL_TIM_ConfigClockSource+0x168>
 8002f84:	2b30      	cmp	r3, #48	; 0x30
 8002f86:	d064      	beq.n	8003052 <HAL_TIM_ConfigClockSource+0x156>
 8002f88:	2b30      	cmp	r3, #48	; 0x30
 8002f8a:	d86b      	bhi.n	8003064 <HAL_TIM_ConfigClockSource+0x168>
 8002f8c:	2b20      	cmp	r3, #32
 8002f8e:	d060      	beq.n	8003052 <HAL_TIM_ConfigClockSource+0x156>
 8002f90:	2b20      	cmp	r3, #32
 8002f92:	d867      	bhi.n	8003064 <HAL_TIM_ConfigClockSource+0x168>
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d05c      	beq.n	8003052 <HAL_TIM_ConfigClockSource+0x156>
 8002f98:	2b10      	cmp	r3, #16
 8002f9a:	d05a      	beq.n	8003052 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002f9c:	e062      	b.n	8003064 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	6899      	ldr	r1, [r3, #8]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	f000 f95c 	bl	800326a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002fc0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	609a      	str	r2, [r3, #8]
      break;
 8002fca:	e04e      	b.n	800306a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6818      	ldr	r0, [r3, #0]
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	6899      	ldr	r1, [r3, #8]
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f000 f945 	bl	800326a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fee:	609a      	str	r2, [r3, #8]
      break;
 8002ff0:	e03b      	b.n	800306a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6818      	ldr	r0, [r3, #0]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	6859      	ldr	r1, [r3, #4]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	461a      	mov	r2, r3
 8003000:	f000 f8bc 	bl	800317c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2150      	movs	r1, #80	; 0x50
 800300a:	4618      	mov	r0, r3
 800300c:	f000 f913 	bl	8003236 <TIM_ITRx_SetConfig>
      break;
 8003010:	e02b      	b.n	800306a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6818      	ldr	r0, [r3, #0]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	6859      	ldr	r1, [r3, #4]
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	461a      	mov	r2, r3
 8003020:	f000 f8da 	bl	80031d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2160      	movs	r1, #96	; 0x60
 800302a:	4618      	mov	r0, r3
 800302c:	f000 f903 	bl	8003236 <TIM_ITRx_SetConfig>
      break;
 8003030:	e01b      	b.n	800306a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6818      	ldr	r0, [r3, #0]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	6859      	ldr	r1, [r3, #4]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	461a      	mov	r2, r3
 8003040:	f000 f89c 	bl	800317c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2140      	movs	r1, #64	; 0x40
 800304a:	4618      	mov	r0, r3
 800304c:	f000 f8f3 	bl	8003236 <TIM_ITRx_SetConfig>
      break;
 8003050:	e00b      	b.n	800306a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4619      	mov	r1, r3
 800305c:	4610      	mov	r0, r2
 800305e:	f000 f8ea 	bl	8003236 <TIM_ITRx_SetConfig>
        break;
 8003062:	e002      	b.n	800306a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003064:	bf00      	nop
 8003066:	e000      	b.n	800306a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003068:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	bc80      	pop	{r7}
 8003094:	4770      	bx	lr

08003096 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bc80      	pop	{r7}
 80030a6:	4770      	bx	lr

080030a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bc80      	pop	{r7}
 80030b8:	4770      	bx	lr

080030ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr

080030cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a25      	ldr	r2, [pc, #148]	; (8003174 <TIM_Base_SetConfig+0xa8>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d007      	beq.n	80030f4 <TIM_Base_SetConfig+0x28>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ea:	d003      	beq.n	80030f4 <TIM_Base_SetConfig+0x28>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a22      	ldr	r2, [pc, #136]	; (8003178 <TIM_Base_SetConfig+0xac>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d108      	bne.n	8003106 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	4313      	orrs	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a1a      	ldr	r2, [pc, #104]	; (8003174 <TIM_Base_SetConfig+0xa8>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d007      	beq.n	800311e <TIM_Base_SetConfig+0x52>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003114:	d003      	beq.n	800311e <TIM_Base_SetConfig+0x52>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a17      	ldr	r2, [pc, #92]	; (8003178 <TIM_Base_SetConfig+0xac>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d108      	bne.n	8003130 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003124:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	4313      	orrs	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	4313      	orrs	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a07      	ldr	r2, [pc, #28]	; (8003174 <TIM_Base_SetConfig+0xa8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d103      	bne.n	8003164 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	691a      	ldr	r2, [r3, #16]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	615a      	str	r2, [r3, #20]
}
 800316a:	bf00      	nop
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr
 8003174:	40012c00 	.word	0x40012c00
 8003178:	40000400 	.word	0x40000400

0800317c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800317c:	b480      	push	{r7}
 800317e:	b087      	sub	sp, #28
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	f023 0201 	bic.w	r2, r3, #1
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	011b      	lsls	r3, r3, #4
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	f023 030a 	bic.w	r3, r3, #10
 80031b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	4313      	orrs	r3, r2
 80031c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	621a      	str	r2, [r3, #32]
}
 80031ce:	bf00      	nop
 80031d0:	371c      	adds	r7, #28
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc80      	pop	{r7}
 80031d6:	4770      	bx	lr

080031d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031d8:	b480      	push	{r7}
 80031da:	b087      	sub	sp, #28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	f023 0210 	bic.w	r2, r3, #16
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003202:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	031b      	lsls	r3, r3, #12
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	4313      	orrs	r3, r2
 800320c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003214:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	011b      	lsls	r3, r3, #4
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	4313      	orrs	r3, r2
 800321e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	621a      	str	r2, [r3, #32]
}
 800322c:	bf00      	nop
 800322e:	371c      	adds	r7, #28
 8003230:	46bd      	mov	sp, r7
 8003232:	bc80      	pop	{r7}
 8003234:	4770      	bx	lr

08003236 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003236:	b480      	push	{r7}
 8003238:	b085      	sub	sp, #20
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
 800323e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800324c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	4313      	orrs	r3, r2
 8003254:	f043 0307 	orr.w	r3, r3, #7
 8003258:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	609a      	str	r2, [r3, #8]
}
 8003260:	bf00      	nop
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	bc80      	pop	{r7}
 8003268:	4770      	bx	lr

0800326a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800326a:	b480      	push	{r7}
 800326c:	b087      	sub	sp, #28
 800326e:	af00      	add	r7, sp, #0
 8003270:	60f8      	str	r0, [r7, #12]
 8003272:	60b9      	str	r1, [r7, #8]
 8003274:	607a      	str	r2, [r7, #4]
 8003276:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003284:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	021a      	lsls	r2, r3, #8
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	431a      	orrs	r2, r3
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	4313      	orrs	r3, r2
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	4313      	orrs	r3, r2
 8003296:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	609a      	str	r2, [r3, #8]
}
 800329e:	bf00      	nop
 80032a0:	371c      	adds	r7, #28
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bc80      	pop	{r7}
 80032a6:	4770      	bx	lr

080032a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d101      	bne.n	80032c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032bc:	2302      	movs	r3, #2
 80032be:	e041      	b.n	8003344 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2202      	movs	r2, #2
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a14      	ldr	r2, [pc, #80]	; (8003350 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d009      	beq.n	8003318 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800330c:	d004      	beq.n	8003318 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a10      	ldr	r2, [pc, #64]	; (8003354 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d10c      	bne.n	8003332 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800331e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	68ba      	ldr	r2, [r7, #8]
 8003326:	4313      	orrs	r3, r2
 8003328:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68ba      	ldr	r2, [r7, #8]
 8003330:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	bc80      	pop	{r7}
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	40012c00 	.word	0x40012c00
 8003354:	40000400 	.word	0x40000400

08003358 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr

0800336a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr

0800337c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e03f      	b.n	800340e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d106      	bne.n	80033a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7fe fb30 	bl	8001a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2224      	movs	r2, #36	; 0x24
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 fc85 	bl	8003cd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	691a      	ldr	r2, [r3, #16]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	695a      	ldr	r2, [r3, #20]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68da      	ldr	r2, [r3, #12]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b08a      	sub	sp, #40	; 0x28
 800341a:	af02      	add	r7, sp, #8
 800341c:	60f8      	str	r0, [r7, #12]
 800341e:	60b9      	str	r1, [r7, #8]
 8003420:	603b      	str	r3, [r7, #0]
 8003422:	4613      	mov	r3, r2
 8003424:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003426:	2300      	movs	r3, #0
 8003428:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b20      	cmp	r3, #32
 8003434:	d17c      	bne.n	8003530 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d002      	beq.n	8003442 <HAL_UART_Transmit+0x2c>
 800343c:	88fb      	ldrh	r3, [r7, #6]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e075      	b.n	8003532 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800344c:	2b01      	cmp	r3, #1
 800344e:	d101      	bne.n	8003454 <HAL_UART_Transmit+0x3e>
 8003450:	2302      	movs	r3, #2
 8003452:	e06e      	b.n	8003532 <HAL_UART_Transmit+0x11c>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2221      	movs	r2, #33	; 0x21
 8003466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800346a:	f7fe fc15 	bl	8001c98 <HAL_GetTick>
 800346e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	88fa      	ldrh	r2, [r7, #6]
 8003474:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	88fa      	ldrh	r2, [r7, #6]
 800347a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003484:	d108      	bne.n	8003498 <HAL_UART_Transmit+0x82>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d104      	bne.n	8003498 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800348e:	2300      	movs	r3, #0
 8003490:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	61bb      	str	r3, [r7, #24]
 8003496:	e003      	b.n	80034a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800349c:	2300      	movs	r3, #0
 800349e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80034a8:	e02a      	b.n	8003500 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	2200      	movs	r2, #0
 80034b2:	2180      	movs	r1, #128	; 0x80
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f000 fa38 	bl	800392a <UART_WaitOnFlagUntilTimeout>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e036      	b.n	8003532 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10b      	bne.n	80034e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	881b      	ldrh	r3, [r3, #0]
 80034ce:	461a      	mov	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	3302      	adds	r3, #2
 80034de:	61bb      	str	r3, [r7, #24]
 80034e0:	e007      	b.n	80034f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	781a      	ldrb	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	3301      	adds	r3, #1
 80034f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	3b01      	subs	r3, #1
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003504:	b29b      	uxth	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1cf      	bne.n	80034aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2200      	movs	r2, #0
 8003512:	2140      	movs	r1, #64	; 0x40
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 fa08 	bl	800392a <UART_WaitOnFlagUntilTimeout>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e006      	b.n	8003532 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2220      	movs	r2, #32
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800352c:	2300      	movs	r3, #0
 800352e:	e000      	b.n	8003532 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003530:	2302      	movs	r3, #2
  }
}
 8003532:	4618      	mov	r0, r3
 8003534:	3720      	adds	r7, #32
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b084      	sub	sp, #16
 800353e:	af00      	add	r7, sp, #0
 8003540:	60f8      	str	r0, [r7, #12]
 8003542:	60b9      	str	r1, [r7, #8]
 8003544:	4613      	mov	r3, r2
 8003546:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b20      	cmp	r3, #32
 8003552:	d11d      	bne.n	8003590 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d002      	beq.n	8003560 <HAL_UART_Receive_IT+0x26>
 800355a:	88fb      	ldrh	r3, [r7, #6]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e016      	b.n	8003592 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800356a:	2b01      	cmp	r3, #1
 800356c:	d101      	bne.n	8003572 <HAL_UART_Receive_IT+0x38>
 800356e:	2302      	movs	r3, #2
 8003570:	e00f      	b.n	8003592 <HAL_UART_Receive_IT+0x58>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003580:	88fb      	ldrh	r3, [r7, #6]
 8003582:	461a      	mov	r2, r3
 8003584:	68b9      	ldr	r1, [r7, #8]
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 fa19 	bl	80039be <UART_Start_Receive_IT>
 800358c:	4603      	mov	r3, r0
 800358e:	e000      	b.n	8003592 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003590:	2302      	movs	r3, #2
  }
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b08a      	sub	sp, #40	; 0x28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80035bc:	2300      	movs	r3, #0
 80035be:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10d      	bne.n	80035ee <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d4:	f003 0320 	and.w	r3, r3, #32
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d008      	beq.n	80035ee <HAL_UART_IRQHandler+0x52>
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	f003 0320 	and.w	r3, r3, #32
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 fac9 	bl	8003b7e <UART_Receive_IT>
      return;
 80035ec:	e17b      	b.n	80038e6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 80b1 	beq.w	8003758 <HAL_UART_IRQHandler+0x1bc>
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d105      	bne.n	800360c <HAL_UART_IRQHandler+0x70>
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 80a6 	beq.w	8003758 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00a      	beq.n	800362c <HAL_UART_IRQHandler+0x90>
 8003616:	6a3b      	ldr	r3, [r7, #32]
 8003618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003624:	f043 0201 	orr.w	r2, r3, #1
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	f003 0304 	and.w	r3, r3, #4
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00a      	beq.n	800364c <HAL_UART_IRQHandler+0xb0>
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	d005      	beq.n	800364c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003644:	f043 0202 	orr.w	r2, r3, #2
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00a      	beq.n	800366c <HAL_UART_IRQHandler+0xd0>
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003664:	f043 0204 	orr.w	r2, r3, #4
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800366c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366e:	f003 0308 	and.w	r3, r3, #8
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00f      	beq.n	8003696 <HAL_UART_IRQHandler+0xfa>
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	f003 0320 	and.w	r3, r3, #32
 800367c:	2b00      	cmp	r3, #0
 800367e:	d104      	bne.n	800368a <HAL_UART_IRQHandler+0xee>
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d005      	beq.n	8003696 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	f043 0208 	orr.w	r2, r3, #8
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	2b00      	cmp	r3, #0
 800369c:	f000 811e 	beq.w	80038dc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	f003 0320 	and.w	r3, r3, #32
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d007      	beq.n	80036ba <HAL_UART_IRQHandler+0x11e>
 80036aa:	6a3b      	ldr	r3, [r7, #32]
 80036ac:	f003 0320 	and.w	r3, r3, #32
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d002      	beq.n	80036ba <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 fa62 	bl	8003b7e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	bf14      	ite	ne
 80036c8:	2301      	movne	r3, #1
 80036ca:	2300      	moveq	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d4:	f003 0308 	and.w	r3, r3, #8
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d102      	bne.n	80036e2 <HAL_UART_IRQHandler+0x146>
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d031      	beq.n	8003746 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f9a4 	bl	8003a30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d023      	beq.n	800373e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695a      	ldr	r2, [r3, #20]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003704:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370a:	2b00      	cmp	r3, #0
 800370c:	d013      	beq.n	8003736 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003712:	4a76      	ldr	r2, [pc, #472]	; (80038ec <HAL_UART_IRQHandler+0x350>)
 8003714:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371a:	4618      	mov	r0, r3
 800371c:	f7fe fc0e 	bl	8001f3c <HAL_DMA_Abort_IT>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d016      	beq.n	8003754 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003730:	4610      	mov	r0, r2
 8003732:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003734:	e00e      	b.n	8003754 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f8e3 	bl	8003902 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800373c:	e00a      	b.n	8003754 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f8df 	bl	8003902 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003744:	e006      	b.n	8003754 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f8db 	bl	8003902 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003752:	e0c3      	b.n	80038dc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003754:	bf00      	nop
    return;
 8003756:	e0c1      	b.n	80038dc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375c:	2b01      	cmp	r3, #1
 800375e:	f040 80a1 	bne.w	80038a4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	f003 0310 	and.w	r3, r3, #16
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 809b 	beq.w	80038a4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	f003 0310 	and.w	r3, r3, #16
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 8095 	beq.w	80038a4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800377a:	2300      	movs	r3, #0
 800377c:	60fb      	str	r3, [r7, #12]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379a:	2b00      	cmp	r3, #0
 800379c:	d04e      	beq.n	800383c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80037a8:	8a3b      	ldrh	r3, [r7, #16]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f000 8098 	beq.w	80038e0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80037b4:	8a3a      	ldrh	r2, [r7, #16]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	f080 8092 	bcs.w	80038e0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	8a3a      	ldrh	r2, [r7, #16]
 80037c0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	d02b      	beq.n	8003824 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68da      	ldr	r2, [r3, #12]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037da:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	695a      	ldr	r2, [r3, #20]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0201 	bic.w	r2, r2, #1
 80037ea:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	695a      	ldr	r2, [r3, #20]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037fa:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2220      	movs	r2, #32
 8003800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 0210 	bic.w	r2, r2, #16
 8003818:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381e:	4618      	mov	r0, r3
 8003820:	f7fe fb51 	bl	8001ec6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800382c:	b29b      	uxth	r3, r3
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	b29b      	uxth	r3, r3
 8003832:	4619      	mov	r1, r3
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 f86d 	bl	8003914 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800383a:	e051      	b.n	80038e0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003844:	b29b      	uxth	r3, r3
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800384e:	b29b      	uxth	r3, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	d047      	beq.n	80038e4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003854:	8a7b      	ldrh	r3, [r7, #18]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d044      	beq.n	80038e4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68da      	ldr	r2, [r3, #12]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003868:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	695a      	ldr	r2, [r3, #20]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0201 	bic.w	r2, r2, #1
 8003878:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2220      	movs	r2, #32
 800387e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0210 	bic.w	r2, r2, #16
 8003896:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003898:	8a7b      	ldrh	r3, [r7, #18]
 800389a:	4619      	mov	r1, r3
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f839 	bl	8003914 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80038a2:	e01f      	b.n	80038e4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d008      	beq.n	80038c0 <HAL_UART_IRQHandler+0x324>
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 f8f9 	bl	8003ab0 <UART_Transmit_IT>
    return;
 80038be:	e012      	b.n	80038e6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00d      	beq.n	80038e6 <HAL_UART_IRQHandler+0x34a>
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d008      	beq.n	80038e6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 f93a 	bl	8003b4e <UART_EndTransmit_IT>
    return;
 80038da:	e004      	b.n	80038e6 <HAL_UART_IRQHandler+0x34a>
    return;
 80038dc:	bf00      	nop
 80038de:	e002      	b.n	80038e6 <HAL_UART_IRQHandler+0x34a>
      return;
 80038e0:	bf00      	nop
 80038e2:	e000      	b.n	80038e6 <HAL_UART_IRQHandler+0x34a>
      return;
 80038e4:	bf00      	nop
  }
}
 80038e6:	3728      	adds	r7, #40	; 0x28
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	08003a89 	.word	0x08003a89

080038f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bc80      	pop	{r7}
 8003900:	4770      	bx	lr

08003902 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800390a:	bf00      	nop
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr

08003914 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	460b      	mov	r3, r1
 800391e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr

0800392a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b084      	sub	sp, #16
 800392e:	af00      	add	r7, sp, #0
 8003930:	60f8      	str	r0, [r7, #12]
 8003932:	60b9      	str	r1, [r7, #8]
 8003934:	603b      	str	r3, [r7, #0]
 8003936:	4613      	mov	r3, r2
 8003938:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800393a:	e02c      	b.n	8003996 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003942:	d028      	beq.n	8003996 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d007      	beq.n	800395a <UART_WaitOnFlagUntilTimeout+0x30>
 800394a:	f7fe f9a5 	bl	8001c98 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	429a      	cmp	r2, r3
 8003958:	d21d      	bcs.n	8003996 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003968:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	695a      	ldr	r2, [r3, #20]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 0201 	bic.w	r2, r2, #1
 8003978:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2220      	movs	r2, #32
 800397e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2220      	movs	r2, #32
 8003986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e00f      	b.n	80039b6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	4013      	ands	r3, r2
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	bf0c      	ite	eq
 80039a6:	2301      	moveq	r3, #1
 80039a8:	2300      	movne	r3, #0
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	461a      	mov	r2, r3
 80039ae:	79fb      	ldrb	r3, [r7, #7]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d0c3      	beq.n	800393c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039be:	b480      	push	{r7}
 80039c0:	b085      	sub	sp, #20
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	60f8      	str	r0, [r7, #12]
 80039c6:	60b9      	str	r1, [r7, #8]
 80039c8:	4613      	mov	r3, r2
 80039ca:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	88fa      	ldrh	r2, [r7, #6]
 80039d6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	88fa      	ldrh	r2, [r7, #6]
 80039dc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2222      	movs	r2, #34	; 0x22
 80039e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68da      	ldr	r2, [r3, #12]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a02:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695a      	ldr	r2, [r3, #20]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f042 0201 	orr.w	r2, r2, #1
 8003a12:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68da      	ldr	r2, [r3, #12]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f042 0220 	orr.w	r2, r2, #32
 8003a22:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bc80      	pop	{r7}
 8003a2e:	4770      	bx	lr

08003a30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68da      	ldr	r2, [r3, #12]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003a46:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	695a      	ldr	r2, [r3, #20]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0201 	bic.w	r2, r2, #1
 8003a56:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d107      	bne.n	8003a70 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68da      	ldr	r2, [r3, #12]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0210 	bic.w	r2, r2, #16
 8003a6e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr

08003a88 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f7ff ff2d 	bl	8003902 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003aa8:	bf00      	nop
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b21      	cmp	r3, #33	; 0x21
 8003ac2:	d13e      	bne.n	8003b42 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003acc:	d114      	bne.n	8003af8 <UART_Transmit_IT+0x48>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d110      	bne.n	8003af8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003aea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	1c9a      	adds	r2, r3, #2
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	621a      	str	r2, [r3, #32]
 8003af6:	e008      	b.n	8003b0a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	1c59      	adds	r1, r3, #1
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6211      	str	r1, [r2, #32]
 8003b02:	781a      	ldrb	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	3b01      	subs	r3, #1
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	4619      	mov	r1, r3
 8003b18:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10f      	bne.n	8003b3e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68da      	ldr	r2, [r3, #12]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b2c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68da      	ldr	r2, [r3, #12]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b3c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	e000      	b.n	8003b44 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003b42:	2302      	movs	r3, #2
  }
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3714      	adds	r7, #20
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bc80      	pop	{r7}
 8003b4c:	4770      	bx	lr

08003b4e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b082      	sub	sp, #8
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68da      	ldr	r2, [r3, #12]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b64:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7ff febe 	bl	80038f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b086      	sub	sp, #24
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b22      	cmp	r3, #34	; 0x22
 8003b90:	f040 8099 	bne.w	8003cc6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b9c:	d117      	bne.n	8003bce <UART_Receive_IT+0x50>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d113      	bne.n	8003bce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bae:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc6:	1c9a      	adds	r2, r3, #2
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	629a      	str	r2, [r3, #40]	; 0x28
 8003bcc:	e026      	b.n	8003c1c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003be0:	d007      	beq.n	8003bf2 <UART_Receive_IT+0x74>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10a      	bne.n	8003c00 <UART_Receive_IT+0x82>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d106      	bne.n	8003c00 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	b2da      	uxtb	r2, r3
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	701a      	strb	r2, [r3, #0]
 8003bfe:	e008      	b.n	8003c12 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	4619      	mov	r1, r3
 8003c2a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d148      	bne.n	8003cc2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 0220 	bic.w	r2, r2, #32
 8003c3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	695a      	ldr	r2, [r3, #20]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 0201 	bic.w	r2, r2, #1
 8003c5e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2220      	movs	r2, #32
 8003c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d123      	bne.n	8003cb8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68da      	ldr	r2, [r3, #12]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 0210 	bic.w	r2, r2, #16
 8003c84:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0310 	and.w	r3, r3, #16
 8003c90:	2b10      	cmp	r3, #16
 8003c92:	d10a      	bne.n	8003caa <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c94:	2300      	movs	r3, #0
 8003c96:	60fb      	str	r3, [r7, #12]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	60fb      	str	r3, [r7, #12]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cae:	4619      	mov	r1, r3
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7ff fe2f 	bl	8003914 <HAL_UARTEx_RxEventCallback>
 8003cb6:	e002      	b.n	8003cbe <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f7fd fa7b 	bl	80011b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	e002      	b.n	8003cc8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	e000      	b.n	8003cc8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003cc6:	2302      	movs	r3, #2
  }
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3718      	adds	r7, #24
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689a      	ldr	r2, [r3, #8]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003d0a:	f023 030c 	bic.w	r3, r3, #12
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	6812      	ldr	r2, [r2, #0]
 8003d12:	68b9      	ldr	r1, [r7, #8]
 8003d14:	430b      	orrs	r3, r1
 8003d16:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	699a      	ldr	r2, [r3, #24]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a2c      	ldr	r2, [pc, #176]	; (8003de4 <UART_SetConfig+0x114>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d103      	bne.n	8003d40 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d38:	f7fe ff0a 	bl	8002b50 <HAL_RCC_GetPCLK2Freq>
 8003d3c:	60f8      	str	r0, [r7, #12]
 8003d3e:	e002      	b.n	8003d46 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d40:	f7fe fef2 	bl	8002b28 <HAL_RCC_GetPCLK1Freq>
 8003d44:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	009a      	lsls	r2, r3, #2
 8003d50:	441a      	add	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5c:	4a22      	ldr	r2, [pc, #136]	; (8003de8 <UART_SetConfig+0x118>)
 8003d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d62:	095b      	lsrs	r3, r3, #5
 8003d64:	0119      	lsls	r1, r3, #4
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009a      	lsls	r2, r3, #2
 8003d70:	441a      	add	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d7c:	4b1a      	ldr	r3, [pc, #104]	; (8003de8 <UART_SetConfig+0x118>)
 8003d7e:	fba3 0302 	umull	r0, r3, r3, r2
 8003d82:	095b      	lsrs	r3, r3, #5
 8003d84:	2064      	movs	r0, #100	; 0x64
 8003d86:	fb00 f303 	mul.w	r3, r0, r3
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	011b      	lsls	r3, r3, #4
 8003d8e:	3332      	adds	r3, #50	; 0x32
 8003d90:	4a15      	ldr	r2, [pc, #84]	; (8003de8 <UART_SetConfig+0x118>)
 8003d92:	fba2 2303 	umull	r2, r3, r2, r3
 8003d96:	095b      	lsrs	r3, r3, #5
 8003d98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d9c:	4419      	add	r1, r3
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	4613      	mov	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	009a      	lsls	r2, r3, #2
 8003da8:	441a      	add	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003db4:	4b0c      	ldr	r3, [pc, #48]	; (8003de8 <UART_SetConfig+0x118>)
 8003db6:	fba3 0302 	umull	r0, r3, r3, r2
 8003dba:	095b      	lsrs	r3, r3, #5
 8003dbc:	2064      	movs	r0, #100	; 0x64
 8003dbe:	fb00 f303 	mul.w	r3, r0, r3
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	3332      	adds	r3, #50	; 0x32
 8003dc8:	4a07      	ldr	r2, [pc, #28]	; (8003de8 <UART_SetConfig+0x118>)
 8003dca:	fba2 2303 	umull	r2, r3, r2, r3
 8003dce:	095b      	lsrs	r3, r3, #5
 8003dd0:	f003 020f 	and.w	r2, r3, #15
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	440a      	add	r2, r1
 8003dda:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ddc:	bf00      	nop
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40013800 	.word	0x40013800
 8003de8:	51eb851f 	.word	0x51eb851f

08003dec <__errno>:
 8003dec:	4b01      	ldr	r3, [pc, #4]	; (8003df4 <__errno+0x8>)
 8003dee:	6818      	ldr	r0, [r3, #0]
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	2000000c 	.word	0x2000000c

08003df8 <__libc_init_array>:
 8003df8:	b570      	push	{r4, r5, r6, lr}
 8003dfa:	2600      	movs	r6, #0
 8003dfc:	4d0c      	ldr	r5, [pc, #48]	; (8003e30 <__libc_init_array+0x38>)
 8003dfe:	4c0d      	ldr	r4, [pc, #52]	; (8003e34 <__libc_init_array+0x3c>)
 8003e00:	1b64      	subs	r4, r4, r5
 8003e02:	10a4      	asrs	r4, r4, #2
 8003e04:	42a6      	cmp	r6, r4
 8003e06:	d109      	bne.n	8003e1c <__libc_init_array+0x24>
 8003e08:	f001 fb80 	bl	800550c <_init>
 8003e0c:	2600      	movs	r6, #0
 8003e0e:	4d0a      	ldr	r5, [pc, #40]	; (8003e38 <__libc_init_array+0x40>)
 8003e10:	4c0a      	ldr	r4, [pc, #40]	; (8003e3c <__libc_init_array+0x44>)
 8003e12:	1b64      	subs	r4, r4, r5
 8003e14:	10a4      	asrs	r4, r4, #2
 8003e16:	42a6      	cmp	r6, r4
 8003e18:	d105      	bne.n	8003e26 <__libc_init_array+0x2e>
 8003e1a:	bd70      	pop	{r4, r5, r6, pc}
 8003e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e20:	4798      	blx	r3
 8003e22:	3601      	adds	r6, #1
 8003e24:	e7ee      	b.n	8003e04 <__libc_init_array+0xc>
 8003e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e2a:	4798      	blx	r3
 8003e2c:	3601      	adds	r6, #1
 8003e2e:	e7f2      	b.n	8003e16 <__libc_init_array+0x1e>
 8003e30:	080055c0 	.word	0x080055c0
 8003e34:	080055c0 	.word	0x080055c0
 8003e38:	080055c0 	.word	0x080055c0
 8003e3c:	080055c4 	.word	0x080055c4

08003e40 <memset>:
 8003e40:	4603      	mov	r3, r0
 8003e42:	4402      	add	r2, r0
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d100      	bne.n	8003e4a <memset+0xa>
 8003e48:	4770      	bx	lr
 8003e4a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e4e:	e7f9      	b.n	8003e44 <memset+0x4>

08003e50 <siprintf>:
 8003e50:	b40e      	push	{r1, r2, r3}
 8003e52:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e56:	b500      	push	{lr}
 8003e58:	b09c      	sub	sp, #112	; 0x70
 8003e5a:	ab1d      	add	r3, sp, #116	; 0x74
 8003e5c:	9002      	str	r0, [sp, #8]
 8003e5e:	9006      	str	r0, [sp, #24]
 8003e60:	9107      	str	r1, [sp, #28]
 8003e62:	9104      	str	r1, [sp, #16]
 8003e64:	4808      	ldr	r0, [pc, #32]	; (8003e88 <siprintf+0x38>)
 8003e66:	4909      	ldr	r1, [pc, #36]	; (8003e8c <siprintf+0x3c>)
 8003e68:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e6c:	9105      	str	r1, [sp, #20]
 8003e6e:	6800      	ldr	r0, [r0, #0]
 8003e70:	a902      	add	r1, sp, #8
 8003e72:	9301      	str	r3, [sp, #4]
 8003e74:	f000 f868 	bl	8003f48 <_svfiprintf_r>
 8003e78:	2200      	movs	r2, #0
 8003e7a:	9b02      	ldr	r3, [sp, #8]
 8003e7c:	701a      	strb	r2, [r3, #0]
 8003e7e:	b01c      	add	sp, #112	; 0x70
 8003e80:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e84:	b003      	add	sp, #12
 8003e86:	4770      	bx	lr
 8003e88:	2000000c 	.word	0x2000000c
 8003e8c:	ffff0208 	.word	0xffff0208

08003e90 <__ssputs_r>:
 8003e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e94:	688e      	ldr	r6, [r1, #8]
 8003e96:	4682      	mov	sl, r0
 8003e98:	429e      	cmp	r6, r3
 8003e9a:	460c      	mov	r4, r1
 8003e9c:	4690      	mov	r8, r2
 8003e9e:	461f      	mov	r7, r3
 8003ea0:	d838      	bhi.n	8003f14 <__ssputs_r+0x84>
 8003ea2:	898a      	ldrh	r2, [r1, #12]
 8003ea4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ea8:	d032      	beq.n	8003f10 <__ssputs_r+0x80>
 8003eaa:	6825      	ldr	r5, [r4, #0]
 8003eac:	6909      	ldr	r1, [r1, #16]
 8003eae:	3301      	adds	r3, #1
 8003eb0:	eba5 0901 	sub.w	r9, r5, r1
 8003eb4:	6965      	ldr	r5, [r4, #20]
 8003eb6:	444b      	add	r3, r9
 8003eb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ebc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ec0:	106d      	asrs	r5, r5, #1
 8003ec2:	429d      	cmp	r5, r3
 8003ec4:	bf38      	it	cc
 8003ec6:	461d      	movcc	r5, r3
 8003ec8:	0553      	lsls	r3, r2, #21
 8003eca:	d531      	bpl.n	8003f30 <__ssputs_r+0xa0>
 8003ecc:	4629      	mov	r1, r5
 8003ece:	f000 fb6f 	bl	80045b0 <_malloc_r>
 8003ed2:	4606      	mov	r6, r0
 8003ed4:	b950      	cbnz	r0, 8003eec <__ssputs_r+0x5c>
 8003ed6:	230c      	movs	r3, #12
 8003ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8003edc:	f8ca 3000 	str.w	r3, [sl]
 8003ee0:	89a3      	ldrh	r3, [r4, #12]
 8003ee2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ee6:	81a3      	strh	r3, [r4, #12]
 8003ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eec:	464a      	mov	r2, r9
 8003eee:	6921      	ldr	r1, [r4, #16]
 8003ef0:	f000 face 	bl	8004490 <memcpy>
 8003ef4:	89a3      	ldrh	r3, [r4, #12]
 8003ef6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003efe:	81a3      	strh	r3, [r4, #12]
 8003f00:	6126      	str	r6, [r4, #16]
 8003f02:	444e      	add	r6, r9
 8003f04:	6026      	str	r6, [r4, #0]
 8003f06:	463e      	mov	r6, r7
 8003f08:	6165      	str	r5, [r4, #20]
 8003f0a:	eba5 0509 	sub.w	r5, r5, r9
 8003f0e:	60a5      	str	r5, [r4, #8]
 8003f10:	42be      	cmp	r6, r7
 8003f12:	d900      	bls.n	8003f16 <__ssputs_r+0x86>
 8003f14:	463e      	mov	r6, r7
 8003f16:	4632      	mov	r2, r6
 8003f18:	4641      	mov	r1, r8
 8003f1a:	6820      	ldr	r0, [r4, #0]
 8003f1c:	f000 fac6 	bl	80044ac <memmove>
 8003f20:	68a3      	ldr	r3, [r4, #8]
 8003f22:	2000      	movs	r0, #0
 8003f24:	1b9b      	subs	r3, r3, r6
 8003f26:	60a3      	str	r3, [r4, #8]
 8003f28:	6823      	ldr	r3, [r4, #0]
 8003f2a:	4433      	add	r3, r6
 8003f2c:	6023      	str	r3, [r4, #0]
 8003f2e:	e7db      	b.n	8003ee8 <__ssputs_r+0x58>
 8003f30:	462a      	mov	r2, r5
 8003f32:	f000 fbb1 	bl	8004698 <_realloc_r>
 8003f36:	4606      	mov	r6, r0
 8003f38:	2800      	cmp	r0, #0
 8003f3a:	d1e1      	bne.n	8003f00 <__ssputs_r+0x70>
 8003f3c:	4650      	mov	r0, sl
 8003f3e:	6921      	ldr	r1, [r4, #16]
 8003f40:	f000 face 	bl	80044e0 <_free_r>
 8003f44:	e7c7      	b.n	8003ed6 <__ssputs_r+0x46>
	...

08003f48 <_svfiprintf_r>:
 8003f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f4c:	4698      	mov	r8, r3
 8003f4e:	898b      	ldrh	r3, [r1, #12]
 8003f50:	4607      	mov	r7, r0
 8003f52:	061b      	lsls	r3, r3, #24
 8003f54:	460d      	mov	r5, r1
 8003f56:	4614      	mov	r4, r2
 8003f58:	b09d      	sub	sp, #116	; 0x74
 8003f5a:	d50e      	bpl.n	8003f7a <_svfiprintf_r+0x32>
 8003f5c:	690b      	ldr	r3, [r1, #16]
 8003f5e:	b963      	cbnz	r3, 8003f7a <_svfiprintf_r+0x32>
 8003f60:	2140      	movs	r1, #64	; 0x40
 8003f62:	f000 fb25 	bl	80045b0 <_malloc_r>
 8003f66:	6028      	str	r0, [r5, #0]
 8003f68:	6128      	str	r0, [r5, #16]
 8003f6a:	b920      	cbnz	r0, 8003f76 <_svfiprintf_r+0x2e>
 8003f6c:	230c      	movs	r3, #12
 8003f6e:	603b      	str	r3, [r7, #0]
 8003f70:	f04f 30ff 	mov.w	r0, #4294967295
 8003f74:	e0d1      	b.n	800411a <_svfiprintf_r+0x1d2>
 8003f76:	2340      	movs	r3, #64	; 0x40
 8003f78:	616b      	str	r3, [r5, #20]
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	9309      	str	r3, [sp, #36]	; 0x24
 8003f7e:	2320      	movs	r3, #32
 8003f80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f84:	2330      	movs	r3, #48	; 0x30
 8003f86:	f04f 0901 	mov.w	r9, #1
 8003f8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f8e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004134 <_svfiprintf_r+0x1ec>
 8003f92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f96:	4623      	mov	r3, r4
 8003f98:	469a      	mov	sl, r3
 8003f9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f9e:	b10a      	cbz	r2, 8003fa4 <_svfiprintf_r+0x5c>
 8003fa0:	2a25      	cmp	r2, #37	; 0x25
 8003fa2:	d1f9      	bne.n	8003f98 <_svfiprintf_r+0x50>
 8003fa4:	ebba 0b04 	subs.w	fp, sl, r4
 8003fa8:	d00b      	beq.n	8003fc2 <_svfiprintf_r+0x7a>
 8003faa:	465b      	mov	r3, fp
 8003fac:	4622      	mov	r2, r4
 8003fae:	4629      	mov	r1, r5
 8003fb0:	4638      	mov	r0, r7
 8003fb2:	f7ff ff6d 	bl	8003e90 <__ssputs_r>
 8003fb6:	3001      	adds	r0, #1
 8003fb8:	f000 80aa 	beq.w	8004110 <_svfiprintf_r+0x1c8>
 8003fbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003fbe:	445a      	add	r2, fp
 8003fc0:	9209      	str	r2, [sp, #36]	; 0x24
 8003fc2:	f89a 3000 	ldrb.w	r3, [sl]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 80a2 	beq.w	8004110 <_svfiprintf_r+0x1c8>
 8003fcc:	2300      	movs	r3, #0
 8003fce:	f04f 32ff 	mov.w	r2, #4294967295
 8003fd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fd6:	f10a 0a01 	add.w	sl, sl, #1
 8003fda:	9304      	str	r3, [sp, #16]
 8003fdc:	9307      	str	r3, [sp, #28]
 8003fde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003fe2:	931a      	str	r3, [sp, #104]	; 0x68
 8003fe4:	4654      	mov	r4, sl
 8003fe6:	2205      	movs	r2, #5
 8003fe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fec:	4851      	ldr	r0, [pc, #324]	; (8004134 <_svfiprintf_r+0x1ec>)
 8003fee:	f000 fa41 	bl	8004474 <memchr>
 8003ff2:	9a04      	ldr	r2, [sp, #16]
 8003ff4:	b9d8      	cbnz	r0, 800402e <_svfiprintf_r+0xe6>
 8003ff6:	06d0      	lsls	r0, r2, #27
 8003ff8:	bf44      	itt	mi
 8003ffa:	2320      	movmi	r3, #32
 8003ffc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004000:	0711      	lsls	r1, r2, #28
 8004002:	bf44      	itt	mi
 8004004:	232b      	movmi	r3, #43	; 0x2b
 8004006:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800400a:	f89a 3000 	ldrb.w	r3, [sl]
 800400e:	2b2a      	cmp	r3, #42	; 0x2a
 8004010:	d015      	beq.n	800403e <_svfiprintf_r+0xf6>
 8004012:	4654      	mov	r4, sl
 8004014:	2000      	movs	r0, #0
 8004016:	f04f 0c0a 	mov.w	ip, #10
 800401a:	9a07      	ldr	r2, [sp, #28]
 800401c:	4621      	mov	r1, r4
 800401e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004022:	3b30      	subs	r3, #48	; 0x30
 8004024:	2b09      	cmp	r3, #9
 8004026:	d94e      	bls.n	80040c6 <_svfiprintf_r+0x17e>
 8004028:	b1b0      	cbz	r0, 8004058 <_svfiprintf_r+0x110>
 800402a:	9207      	str	r2, [sp, #28]
 800402c:	e014      	b.n	8004058 <_svfiprintf_r+0x110>
 800402e:	eba0 0308 	sub.w	r3, r0, r8
 8004032:	fa09 f303 	lsl.w	r3, r9, r3
 8004036:	4313      	orrs	r3, r2
 8004038:	46a2      	mov	sl, r4
 800403a:	9304      	str	r3, [sp, #16]
 800403c:	e7d2      	b.n	8003fe4 <_svfiprintf_r+0x9c>
 800403e:	9b03      	ldr	r3, [sp, #12]
 8004040:	1d19      	adds	r1, r3, #4
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	9103      	str	r1, [sp, #12]
 8004046:	2b00      	cmp	r3, #0
 8004048:	bfbb      	ittet	lt
 800404a:	425b      	neglt	r3, r3
 800404c:	f042 0202 	orrlt.w	r2, r2, #2
 8004050:	9307      	strge	r3, [sp, #28]
 8004052:	9307      	strlt	r3, [sp, #28]
 8004054:	bfb8      	it	lt
 8004056:	9204      	strlt	r2, [sp, #16]
 8004058:	7823      	ldrb	r3, [r4, #0]
 800405a:	2b2e      	cmp	r3, #46	; 0x2e
 800405c:	d10c      	bne.n	8004078 <_svfiprintf_r+0x130>
 800405e:	7863      	ldrb	r3, [r4, #1]
 8004060:	2b2a      	cmp	r3, #42	; 0x2a
 8004062:	d135      	bne.n	80040d0 <_svfiprintf_r+0x188>
 8004064:	9b03      	ldr	r3, [sp, #12]
 8004066:	3402      	adds	r4, #2
 8004068:	1d1a      	adds	r2, r3, #4
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	9203      	str	r2, [sp, #12]
 800406e:	2b00      	cmp	r3, #0
 8004070:	bfb8      	it	lt
 8004072:	f04f 33ff 	movlt.w	r3, #4294967295
 8004076:	9305      	str	r3, [sp, #20]
 8004078:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004138 <_svfiprintf_r+0x1f0>
 800407c:	2203      	movs	r2, #3
 800407e:	4650      	mov	r0, sl
 8004080:	7821      	ldrb	r1, [r4, #0]
 8004082:	f000 f9f7 	bl	8004474 <memchr>
 8004086:	b140      	cbz	r0, 800409a <_svfiprintf_r+0x152>
 8004088:	2340      	movs	r3, #64	; 0x40
 800408a:	eba0 000a 	sub.w	r0, r0, sl
 800408e:	fa03 f000 	lsl.w	r0, r3, r0
 8004092:	9b04      	ldr	r3, [sp, #16]
 8004094:	3401      	adds	r4, #1
 8004096:	4303      	orrs	r3, r0
 8004098:	9304      	str	r3, [sp, #16]
 800409a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800409e:	2206      	movs	r2, #6
 80040a0:	4826      	ldr	r0, [pc, #152]	; (800413c <_svfiprintf_r+0x1f4>)
 80040a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040a6:	f000 f9e5 	bl	8004474 <memchr>
 80040aa:	2800      	cmp	r0, #0
 80040ac:	d038      	beq.n	8004120 <_svfiprintf_r+0x1d8>
 80040ae:	4b24      	ldr	r3, [pc, #144]	; (8004140 <_svfiprintf_r+0x1f8>)
 80040b0:	bb1b      	cbnz	r3, 80040fa <_svfiprintf_r+0x1b2>
 80040b2:	9b03      	ldr	r3, [sp, #12]
 80040b4:	3307      	adds	r3, #7
 80040b6:	f023 0307 	bic.w	r3, r3, #7
 80040ba:	3308      	adds	r3, #8
 80040bc:	9303      	str	r3, [sp, #12]
 80040be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040c0:	4433      	add	r3, r6
 80040c2:	9309      	str	r3, [sp, #36]	; 0x24
 80040c4:	e767      	b.n	8003f96 <_svfiprintf_r+0x4e>
 80040c6:	460c      	mov	r4, r1
 80040c8:	2001      	movs	r0, #1
 80040ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80040ce:	e7a5      	b.n	800401c <_svfiprintf_r+0xd4>
 80040d0:	2300      	movs	r3, #0
 80040d2:	f04f 0c0a 	mov.w	ip, #10
 80040d6:	4619      	mov	r1, r3
 80040d8:	3401      	adds	r4, #1
 80040da:	9305      	str	r3, [sp, #20]
 80040dc:	4620      	mov	r0, r4
 80040de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040e2:	3a30      	subs	r2, #48	; 0x30
 80040e4:	2a09      	cmp	r2, #9
 80040e6:	d903      	bls.n	80040f0 <_svfiprintf_r+0x1a8>
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0c5      	beq.n	8004078 <_svfiprintf_r+0x130>
 80040ec:	9105      	str	r1, [sp, #20]
 80040ee:	e7c3      	b.n	8004078 <_svfiprintf_r+0x130>
 80040f0:	4604      	mov	r4, r0
 80040f2:	2301      	movs	r3, #1
 80040f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80040f8:	e7f0      	b.n	80040dc <_svfiprintf_r+0x194>
 80040fa:	ab03      	add	r3, sp, #12
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	462a      	mov	r2, r5
 8004100:	4638      	mov	r0, r7
 8004102:	4b10      	ldr	r3, [pc, #64]	; (8004144 <_svfiprintf_r+0x1fc>)
 8004104:	a904      	add	r1, sp, #16
 8004106:	f3af 8000 	nop.w
 800410a:	1c42      	adds	r2, r0, #1
 800410c:	4606      	mov	r6, r0
 800410e:	d1d6      	bne.n	80040be <_svfiprintf_r+0x176>
 8004110:	89ab      	ldrh	r3, [r5, #12]
 8004112:	065b      	lsls	r3, r3, #25
 8004114:	f53f af2c 	bmi.w	8003f70 <_svfiprintf_r+0x28>
 8004118:	9809      	ldr	r0, [sp, #36]	; 0x24
 800411a:	b01d      	add	sp, #116	; 0x74
 800411c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004120:	ab03      	add	r3, sp, #12
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	462a      	mov	r2, r5
 8004126:	4638      	mov	r0, r7
 8004128:	4b06      	ldr	r3, [pc, #24]	; (8004144 <_svfiprintf_r+0x1fc>)
 800412a:	a904      	add	r1, sp, #16
 800412c:	f000 f87c 	bl	8004228 <_printf_i>
 8004130:	e7eb      	b.n	800410a <_svfiprintf_r+0x1c2>
 8004132:	bf00      	nop
 8004134:	08005558 	.word	0x08005558
 8004138:	0800555e 	.word	0x0800555e
 800413c:	08005562 	.word	0x08005562
 8004140:	00000000 	.word	0x00000000
 8004144:	08003e91 	.word	0x08003e91

08004148 <_printf_common>:
 8004148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800414c:	4616      	mov	r6, r2
 800414e:	4699      	mov	r9, r3
 8004150:	688a      	ldr	r2, [r1, #8]
 8004152:	690b      	ldr	r3, [r1, #16]
 8004154:	4607      	mov	r7, r0
 8004156:	4293      	cmp	r3, r2
 8004158:	bfb8      	it	lt
 800415a:	4613      	movlt	r3, r2
 800415c:	6033      	str	r3, [r6, #0]
 800415e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004162:	460c      	mov	r4, r1
 8004164:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004168:	b10a      	cbz	r2, 800416e <_printf_common+0x26>
 800416a:	3301      	adds	r3, #1
 800416c:	6033      	str	r3, [r6, #0]
 800416e:	6823      	ldr	r3, [r4, #0]
 8004170:	0699      	lsls	r1, r3, #26
 8004172:	bf42      	ittt	mi
 8004174:	6833      	ldrmi	r3, [r6, #0]
 8004176:	3302      	addmi	r3, #2
 8004178:	6033      	strmi	r3, [r6, #0]
 800417a:	6825      	ldr	r5, [r4, #0]
 800417c:	f015 0506 	ands.w	r5, r5, #6
 8004180:	d106      	bne.n	8004190 <_printf_common+0x48>
 8004182:	f104 0a19 	add.w	sl, r4, #25
 8004186:	68e3      	ldr	r3, [r4, #12]
 8004188:	6832      	ldr	r2, [r6, #0]
 800418a:	1a9b      	subs	r3, r3, r2
 800418c:	42ab      	cmp	r3, r5
 800418e:	dc28      	bgt.n	80041e2 <_printf_common+0x9a>
 8004190:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004194:	1e13      	subs	r3, r2, #0
 8004196:	6822      	ldr	r2, [r4, #0]
 8004198:	bf18      	it	ne
 800419a:	2301      	movne	r3, #1
 800419c:	0692      	lsls	r2, r2, #26
 800419e:	d42d      	bmi.n	80041fc <_printf_common+0xb4>
 80041a0:	4649      	mov	r1, r9
 80041a2:	4638      	mov	r0, r7
 80041a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041a8:	47c0      	blx	r8
 80041aa:	3001      	adds	r0, #1
 80041ac:	d020      	beq.n	80041f0 <_printf_common+0xa8>
 80041ae:	6823      	ldr	r3, [r4, #0]
 80041b0:	68e5      	ldr	r5, [r4, #12]
 80041b2:	f003 0306 	and.w	r3, r3, #6
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	bf18      	it	ne
 80041ba:	2500      	movne	r5, #0
 80041bc:	6832      	ldr	r2, [r6, #0]
 80041be:	f04f 0600 	mov.w	r6, #0
 80041c2:	68a3      	ldr	r3, [r4, #8]
 80041c4:	bf08      	it	eq
 80041c6:	1aad      	subeq	r5, r5, r2
 80041c8:	6922      	ldr	r2, [r4, #16]
 80041ca:	bf08      	it	eq
 80041cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041d0:	4293      	cmp	r3, r2
 80041d2:	bfc4      	itt	gt
 80041d4:	1a9b      	subgt	r3, r3, r2
 80041d6:	18ed      	addgt	r5, r5, r3
 80041d8:	341a      	adds	r4, #26
 80041da:	42b5      	cmp	r5, r6
 80041dc:	d11a      	bne.n	8004214 <_printf_common+0xcc>
 80041de:	2000      	movs	r0, #0
 80041e0:	e008      	b.n	80041f4 <_printf_common+0xac>
 80041e2:	2301      	movs	r3, #1
 80041e4:	4652      	mov	r2, sl
 80041e6:	4649      	mov	r1, r9
 80041e8:	4638      	mov	r0, r7
 80041ea:	47c0      	blx	r8
 80041ec:	3001      	adds	r0, #1
 80041ee:	d103      	bne.n	80041f8 <_printf_common+0xb0>
 80041f0:	f04f 30ff 	mov.w	r0, #4294967295
 80041f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041f8:	3501      	adds	r5, #1
 80041fa:	e7c4      	b.n	8004186 <_printf_common+0x3e>
 80041fc:	2030      	movs	r0, #48	; 0x30
 80041fe:	18e1      	adds	r1, r4, r3
 8004200:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004204:	1c5a      	adds	r2, r3, #1
 8004206:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800420a:	4422      	add	r2, r4
 800420c:	3302      	adds	r3, #2
 800420e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004212:	e7c5      	b.n	80041a0 <_printf_common+0x58>
 8004214:	2301      	movs	r3, #1
 8004216:	4622      	mov	r2, r4
 8004218:	4649      	mov	r1, r9
 800421a:	4638      	mov	r0, r7
 800421c:	47c0      	blx	r8
 800421e:	3001      	adds	r0, #1
 8004220:	d0e6      	beq.n	80041f0 <_printf_common+0xa8>
 8004222:	3601      	adds	r6, #1
 8004224:	e7d9      	b.n	80041da <_printf_common+0x92>
	...

08004228 <_printf_i>:
 8004228:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800422c:	7e0f      	ldrb	r7, [r1, #24]
 800422e:	4691      	mov	r9, r2
 8004230:	2f78      	cmp	r7, #120	; 0x78
 8004232:	4680      	mov	r8, r0
 8004234:	460c      	mov	r4, r1
 8004236:	469a      	mov	sl, r3
 8004238:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800423a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800423e:	d807      	bhi.n	8004250 <_printf_i+0x28>
 8004240:	2f62      	cmp	r7, #98	; 0x62
 8004242:	d80a      	bhi.n	800425a <_printf_i+0x32>
 8004244:	2f00      	cmp	r7, #0
 8004246:	f000 80d9 	beq.w	80043fc <_printf_i+0x1d4>
 800424a:	2f58      	cmp	r7, #88	; 0x58
 800424c:	f000 80a4 	beq.w	8004398 <_printf_i+0x170>
 8004250:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004254:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004258:	e03a      	b.n	80042d0 <_printf_i+0xa8>
 800425a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800425e:	2b15      	cmp	r3, #21
 8004260:	d8f6      	bhi.n	8004250 <_printf_i+0x28>
 8004262:	a101      	add	r1, pc, #4	; (adr r1, 8004268 <_printf_i+0x40>)
 8004264:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004268:	080042c1 	.word	0x080042c1
 800426c:	080042d5 	.word	0x080042d5
 8004270:	08004251 	.word	0x08004251
 8004274:	08004251 	.word	0x08004251
 8004278:	08004251 	.word	0x08004251
 800427c:	08004251 	.word	0x08004251
 8004280:	080042d5 	.word	0x080042d5
 8004284:	08004251 	.word	0x08004251
 8004288:	08004251 	.word	0x08004251
 800428c:	08004251 	.word	0x08004251
 8004290:	08004251 	.word	0x08004251
 8004294:	080043e3 	.word	0x080043e3
 8004298:	08004305 	.word	0x08004305
 800429c:	080043c5 	.word	0x080043c5
 80042a0:	08004251 	.word	0x08004251
 80042a4:	08004251 	.word	0x08004251
 80042a8:	08004405 	.word	0x08004405
 80042ac:	08004251 	.word	0x08004251
 80042b0:	08004305 	.word	0x08004305
 80042b4:	08004251 	.word	0x08004251
 80042b8:	08004251 	.word	0x08004251
 80042bc:	080043cd 	.word	0x080043cd
 80042c0:	682b      	ldr	r3, [r5, #0]
 80042c2:	1d1a      	adds	r2, r3, #4
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	602a      	str	r2, [r5, #0]
 80042c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042d0:	2301      	movs	r3, #1
 80042d2:	e0a4      	b.n	800441e <_printf_i+0x1f6>
 80042d4:	6820      	ldr	r0, [r4, #0]
 80042d6:	6829      	ldr	r1, [r5, #0]
 80042d8:	0606      	lsls	r6, r0, #24
 80042da:	f101 0304 	add.w	r3, r1, #4
 80042de:	d50a      	bpl.n	80042f6 <_printf_i+0xce>
 80042e0:	680e      	ldr	r6, [r1, #0]
 80042e2:	602b      	str	r3, [r5, #0]
 80042e4:	2e00      	cmp	r6, #0
 80042e6:	da03      	bge.n	80042f0 <_printf_i+0xc8>
 80042e8:	232d      	movs	r3, #45	; 0x2d
 80042ea:	4276      	negs	r6, r6
 80042ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042f0:	230a      	movs	r3, #10
 80042f2:	485e      	ldr	r0, [pc, #376]	; (800446c <_printf_i+0x244>)
 80042f4:	e019      	b.n	800432a <_printf_i+0x102>
 80042f6:	680e      	ldr	r6, [r1, #0]
 80042f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80042fc:	602b      	str	r3, [r5, #0]
 80042fe:	bf18      	it	ne
 8004300:	b236      	sxthne	r6, r6
 8004302:	e7ef      	b.n	80042e4 <_printf_i+0xbc>
 8004304:	682b      	ldr	r3, [r5, #0]
 8004306:	6820      	ldr	r0, [r4, #0]
 8004308:	1d19      	adds	r1, r3, #4
 800430a:	6029      	str	r1, [r5, #0]
 800430c:	0601      	lsls	r1, r0, #24
 800430e:	d501      	bpl.n	8004314 <_printf_i+0xec>
 8004310:	681e      	ldr	r6, [r3, #0]
 8004312:	e002      	b.n	800431a <_printf_i+0xf2>
 8004314:	0646      	lsls	r6, r0, #25
 8004316:	d5fb      	bpl.n	8004310 <_printf_i+0xe8>
 8004318:	881e      	ldrh	r6, [r3, #0]
 800431a:	2f6f      	cmp	r7, #111	; 0x6f
 800431c:	bf0c      	ite	eq
 800431e:	2308      	moveq	r3, #8
 8004320:	230a      	movne	r3, #10
 8004322:	4852      	ldr	r0, [pc, #328]	; (800446c <_printf_i+0x244>)
 8004324:	2100      	movs	r1, #0
 8004326:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800432a:	6865      	ldr	r5, [r4, #4]
 800432c:	2d00      	cmp	r5, #0
 800432e:	bfa8      	it	ge
 8004330:	6821      	ldrge	r1, [r4, #0]
 8004332:	60a5      	str	r5, [r4, #8]
 8004334:	bfa4      	itt	ge
 8004336:	f021 0104 	bicge.w	r1, r1, #4
 800433a:	6021      	strge	r1, [r4, #0]
 800433c:	b90e      	cbnz	r6, 8004342 <_printf_i+0x11a>
 800433e:	2d00      	cmp	r5, #0
 8004340:	d04d      	beq.n	80043de <_printf_i+0x1b6>
 8004342:	4615      	mov	r5, r2
 8004344:	fbb6 f1f3 	udiv	r1, r6, r3
 8004348:	fb03 6711 	mls	r7, r3, r1, r6
 800434c:	5dc7      	ldrb	r7, [r0, r7]
 800434e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004352:	4637      	mov	r7, r6
 8004354:	42bb      	cmp	r3, r7
 8004356:	460e      	mov	r6, r1
 8004358:	d9f4      	bls.n	8004344 <_printf_i+0x11c>
 800435a:	2b08      	cmp	r3, #8
 800435c:	d10b      	bne.n	8004376 <_printf_i+0x14e>
 800435e:	6823      	ldr	r3, [r4, #0]
 8004360:	07de      	lsls	r6, r3, #31
 8004362:	d508      	bpl.n	8004376 <_printf_i+0x14e>
 8004364:	6923      	ldr	r3, [r4, #16]
 8004366:	6861      	ldr	r1, [r4, #4]
 8004368:	4299      	cmp	r1, r3
 800436a:	bfde      	ittt	le
 800436c:	2330      	movle	r3, #48	; 0x30
 800436e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004372:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004376:	1b52      	subs	r2, r2, r5
 8004378:	6122      	str	r2, [r4, #16]
 800437a:	464b      	mov	r3, r9
 800437c:	4621      	mov	r1, r4
 800437e:	4640      	mov	r0, r8
 8004380:	f8cd a000 	str.w	sl, [sp]
 8004384:	aa03      	add	r2, sp, #12
 8004386:	f7ff fedf 	bl	8004148 <_printf_common>
 800438a:	3001      	adds	r0, #1
 800438c:	d14c      	bne.n	8004428 <_printf_i+0x200>
 800438e:	f04f 30ff 	mov.w	r0, #4294967295
 8004392:	b004      	add	sp, #16
 8004394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004398:	4834      	ldr	r0, [pc, #208]	; (800446c <_printf_i+0x244>)
 800439a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800439e:	6829      	ldr	r1, [r5, #0]
 80043a0:	6823      	ldr	r3, [r4, #0]
 80043a2:	f851 6b04 	ldr.w	r6, [r1], #4
 80043a6:	6029      	str	r1, [r5, #0]
 80043a8:	061d      	lsls	r5, r3, #24
 80043aa:	d514      	bpl.n	80043d6 <_printf_i+0x1ae>
 80043ac:	07df      	lsls	r7, r3, #31
 80043ae:	bf44      	itt	mi
 80043b0:	f043 0320 	orrmi.w	r3, r3, #32
 80043b4:	6023      	strmi	r3, [r4, #0]
 80043b6:	b91e      	cbnz	r6, 80043c0 <_printf_i+0x198>
 80043b8:	6823      	ldr	r3, [r4, #0]
 80043ba:	f023 0320 	bic.w	r3, r3, #32
 80043be:	6023      	str	r3, [r4, #0]
 80043c0:	2310      	movs	r3, #16
 80043c2:	e7af      	b.n	8004324 <_printf_i+0xfc>
 80043c4:	6823      	ldr	r3, [r4, #0]
 80043c6:	f043 0320 	orr.w	r3, r3, #32
 80043ca:	6023      	str	r3, [r4, #0]
 80043cc:	2378      	movs	r3, #120	; 0x78
 80043ce:	4828      	ldr	r0, [pc, #160]	; (8004470 <_printf_i+0x248>)
 80043d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80043d4:	e7e3      	b.n	800439e <_printf_i+0x176>
 80043d6:	0659      	lsls	r1, r3, #25
 80043d8:	bf48      	it	mi
 80043da:	b2b6      	uxthmi	r6, r6
 80043dc:	e7e6      	b.n	80043ac <_printf_i+0x184>
 80043de:	4615      	mov	r5, r2
 80043e0:	e7bb      	b.n	800435a <_printf_i+0x132>
 80043e2:	682b      	ldr	r3, [r5, #0]
 80043e4:	6826      	ldr	r6, [r4, #0]
 80043e6:	1d18      	adds	r0, r3, #4
 80043e8:	6961      	ldr	r1, [r4, #20]
 80043ea:	6028      	str	r0, [r5, #0]
 80043ec:	0635      	lsls	r5, r6, #24
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	d501      	bpl.n	80043f6 <_printf_i+0x1ce>
 80043f2:	6019      	str	r1, [r3, #0]
 80043f4:	e002      	b.n	80043fc <_printf_i+0x1d4>
 80043f6:	0670      	lsls	r0, r6, #25
 80043f8:	d5fb      	bpl.n	80043f2 <_printf_i+0x1ca>
 80043fa:	8019      	strh	r1, [r3, #0]
 80043fc:	2300      	movs	r3, #0
 80043fe:	4615      	mov	r5, r2
 8004400:	6123      	str	r3, [r4, #16]
 8004402:	e7ba      	b.n	800437a <_printf_i+0x152>
 8004404:	682b      	ldr	r3, [r5, #0]
 8004406:	2100      	movs	r1, #0
 8004408:	1d1a      	adds	r2, r3, #4
 800440a:	602a      	str	r2, [r5, #0]
 800440c:	681d      	ldr	r5, [r3, #0]
 800440e:	6862      	ldr	r2, [r4, #4]
 8004410:	4628      	mov	r0, r5
 8004412:	f000 f82f 	bl	8004474 <memchr>
 8004416:	b108      	cbz	r0, 800441c <_printf_i+0x1f4>
 8004418:	1b40      	subs	r0, r0, r5
 800441a:	6060      	str	r0, [r4, #4]
 800441c:	6863      	ldr	r3, [r4, #4]
 800441e:	6123      	str	r3, [r4, #16]
 8004420:	2300      	movs	r3, #0
 8004422:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004426:	e7a8      	b.n	800437a <_printf_i+0x152>
 8004428:	462a      	mov	r2, r5
 800442a:	4649      	mov	r1, r9
 800442c:	4640      	mov	r0, r8
 800442e:	6923      	ldr	r3, [r4, #16]
 8004430:	47d0      	blx	sl
 8004432:	3001      	adds	r0, #1
 8004434:	d0ab      	beq.n	800438e <_printf_i+0x166>
 8004436:	6823      	ldr	r3, [r4, #0]
 8004438:	079b      	lsls	r3, r3, #30
 800443a:	d413      	bmi.n	8004464 <_printf_i+0x23c>
 800443c:	68e0      	ldr	r0, [r4, #12]
 800443e:	9b03      	ldr	r3, [sp, #12]
 8004440:	4298      	cmp	r0, r3
 8004442:	bfb8      	it	lt
 8004444:	4618      	movlt	r0, r3
 8004446:	e7a4      	b.n	8004392 <_printf_i+0x16a>
 8004448:	2301      	movs	r3, #1
 800444a:	4632      	mov	r2, r6
 800444c:	4649      	mov	r1, r9
 800444e:	4640      	mov	r0, r8
 8004450:	47d0      	blx	sl
 8004452:	3001      	adds	r0, #1
 8004454:	d09b      	beq.n	800438e <_printf_i+0x166>
 8004456:	3501      	adds	r5, #1
 8004458:	68e3      	ldr	r3, [r4, #12]
 800445a:	9903      	ldr	r1, [sp, #12]
 800445c:	1a5b      	subs	r3, r3, r1
 800445e:	42ab      	cmp	r3, r5
 8004460:	dcf2      	bgt.n	8004448 <_printf_i+0x220>
 8004462:	e7eb      	b.n	800443c <_printf_i+0x214>
 8004464:	2500      	movs	r5, #0
 8004466:	f104 0619 	add.w	r6, r4, #25
 800446a:	e7f5      	b.n	8004458 <_printf_i+0x230>
 800446c:	08005569 	.word	0x08005569
 8004470:	0800557a 	.word	0x0800557a

08004474 <memchr>:
 8004474:	4603      	mov	r3, r0
 8004476:	b510      	push	{r4, lr}
 8004478:	b2c9      	uxtb	r1, r1
 800447a:	4402      	add	r2, r0
 800447c:	4293      	cmp	r3, r2
 800447e:	4618      	mov	r0, r3
 8004480:	d101      	bne.n	8004486 <memchr+0x12>
 8004482:	2000      	movs	r0, #0
 8004484:	e003      	b.n	800448e <memchr+0x1a>
 8004486:	7804      	ldrb	r4, [r0, #0]
 8004488:	3301      	adds	r3, #1
 800448a:	428c      	cmp	r4, r1
 800448c:	d1f6      	bne.n	800447c <memchr+0x8>
 800448e:	bd10      	pop	{r4, pc}

08004490 <memcpy>:
 8004490:	440a      	add	r2, r1
 8004492:	4291      	cmp	r1, r2
 8004494:	f100 33ff 	add.w	r3, r0, #4294967295
 8004498:	d100      	bne.n	800449c <memcpy+0xc>
 800449a:	4770      	bx	lr
 800449c:	b510      	push	{r4, lr}
 800449e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044a2:	4291      	cmp	r1, r2
 80044a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044a8:	d1f9      	bne.n	800449e <memcpy+0xe>
 80044aa:	bd10      	pop	{r4, pc}

080044ac <memmove>:
 80044ac:	4288      	cmp	r0, r1
 80044ae:	b510      	push	{r4, lr}
 80044b0:	eb01 0402 	add.w	r4, r1, r2
 80044b4:	d902      	bls.n	80044bc <memmove+0x10>
 80044b6:	4284      	cmp	r4, r0
 80044b8:	4623      	mov	r3, r4
 80044ba:	d807      	bhi.n	80044cc <memmove+0x20>
 80044bc:	1e43      	subs	r3, r0, #1
 80044be:	42a1      	cmp	r1, r4
 80044c0:	d008      	beq.n	80044d4 <memmove+0x28>
 80044c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80044ca:	e7f8      	b.n	80044be <memmove+0x12>
 80044cc:	4601      	mov	r1, r0
 80044ce:	4402      	add	r2, r0
 80044d0:	428a      	cmp	r2, r1
 80044d2:	d100      	bne.n	80044d6 <memmove+0x2a>
 80044d4:	bd10      	pop	{r4, pc}
 80044d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80044de:	e7f7      	b.n	80044d0 <memmove+0x24>

080044e0 <_free_r>:
 80044e0:	b538      	push	{r3, r4, r5, lr}
 80044e2:	4605      	mov	r5, r0
 80044e4:	2900      	cmp	r1, #0
 80044e6:	d040      	beq.n	800456a <_free_r+0x8a>
 80044e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044ec:	1f0c      	subs	r4, r1, #4
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	bfb8      	it	lt
 80044f2:	18e4      	addlt	r4, r4, r3
 80044f4:	f000 f910 	bl	8004718 <__malloc_lock>
 80044f8:	4a1c      	ldr	r2, [pc, #112]	; (800456c <_free_r+0x8c>)
 80044fa:	6813      	ldr	r3, [r2, #0]
 80044fc:	b933      	cbnz	r3, 800450c <_free_r+0x2c>
 80044fe:	6063      	str	r3, [r4, #4]
 8004500:	6014      	str	r4, [r2, #0]
 8004502:	4628      	mov	r0, r5
 8004504:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004508:	f000 b90c 	b.w	8004724 <__malloc_unlock>
 800450c:	42a3      	cmp	r3, r4
 800450e:	d908      	bls.n	8004522 <_free_r+0x42>
 8004510:	6820      	ldr	r0, [r4, #0]
 8004512:	1821      	adds	r1, r4, r0
 8004514:	428b      	cmp	r3, r1
 8004516:	bf01      	itttt	eq
 8004518:	6819      	ldreq	r1, [r3, #0]
 800451a:	685b      	ldreq	r3, [r3, #4]
 800451c:	1809      	addeq	r1, r1, r0
 800451e:	6021      	streq	r1, [r4, #0]
 8004520:	e7ed      	b.n	80044fe <_free_r+0x1e>
 8004522:	461a      	mov	r2, r3
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	b10b      	cbz	r3, 800452c <_free_r+0x4c>
 8004528:	42a3      	cmp	r3, r4
 800452a:	d9fa      	bls.n	8004522 <_free_r+0x42>
 800452c:	6811      	ldr	r1, [r2, #0]
 800452e:	1850      	adds	r0, r2, r1
 8004530:	42a0      	cmp	r0, r4
 8004532:	d10b      	bne.n	800454c <_free_r+0x6c>
 8004534:	6820      	ldr	r0, [r4, #0]
 8004536:	4401      	add	r1, r0
 8004538:	1850      	adds	r0, r2, r1
 800453a:	4283      	cmp	r3, r0
 800453c:	6011      	str	r1, [r2, #0]
 800453e:	d1e0      	bne.n	8004502 <_free_r+0x22>
 8004540:	6818      	ldr	r0, [r3, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	4401      	add	r1, r0
 8004546:	6011      	str	r1, [r2, #0]
 8004548:	6053      	str	r3, [r2, #4]
 800454a:	e7da      	b.n	8004502 <_free_r+0x22>
 800454c:	d902      	bls.n	8004554 <_free_r+0x74>
 800454e:	230c      	movs	r3, #12
 8004550:	602b      	str	r3, [r5, #0]
 8004552:	e7d6      	b.n	8004502 <_free_r+0x22>
 8004554:	6820      	ldr	r0, [r4, #0]
 8004556:	1821      	adds	r1, r4, r0
 8004558:	428b      	cmp	r3, r1
 800455a:	bf01      	itttt	eq
 800455c:	6819      	ldreq	r1, [r3, #0]
 800455e:	685b      	ldreq	r3, [r3, #4]
 8004560:	1809      	addeq	r1, r1, r0
 8004562:	6021      	streq	r1, [r4, #0]
 8004564:	6063      	str	r3, [r4, #4]
 8004566:	6054      	str	r4, [r2, #4]
 8004568:	e7cb      	b.n	8004502 <_free_r+0x22>
 800456a:	bd38      	pop	{r3, r4, r5, pc}
 800456c:	20000430 	.word	0x20000430

08004570 <sbrk_aligned>:
 8004570:	b570      	push	{r4, r5, r6, lr}
 8004572:	4e0e      	ldr	r6, [pc, #56]	; (80045ac <sbrk_aligned+0x3c>)
 8004574:	460c      	mov	r4, r1
 8004576:	6831      	ldr	r1, [r6, #0]
 8004578:	4605      	mov	r5, r0
 800457a:	b911      	cbnz	r1, 8004582 <sbrk_aligned+0x12>
 800457c:	f000 f8bc 	bl	80046f8 <_sbrk_r>
 8004580:	6030      	str	r0, [r6, #0]
 8004582:	4621      	mov	r1, r4
 8004584:	4628      	mov	r0, r5
 8004586:	f000 f8b7 	bl	80046f8 <_sbrk_r>
 800458a:	1c43      	adds	r3, r0, #1
 800458c:	d00a      	beq.n	80045a4 <sbrk_aligned+0x34>
 800458e:	1cc4      	adds	r4, r0, #3
 8004590:	f024 0403 	bic.w	r4, r4, #3
 8004594:	42a0      	cmp	r0, r4
 8004596:	d007      	beq.n	80045a8 <sbrk_aligned+0x38>
 8004598:	1a21      	subs	r1, r4, r0
 800459a:	4628      	mov	r0, r5
 800459c:	f000 f8ac 	bl	80046f8 <_sbrk_r>
 80045a0:	3001      	adds	r0, #1
 80045a2:	d101      	bne.n	80045a8 <sbrk_aligned+0x38>
 80045a4:	f04f 34ff 	mov.w	r4, #4294967295
 80045a8:	4620      	mov	r0, r4
 80045aa:	bd70      	pop	{r4, r5, r6, pc}
 80045ac:	20000434 	.word	0x20000434

080045b0 <_malloc_r>:
 80045b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045b4:	1ccd      	adds	r5, r1, #3
 80045b6:	f025 0503 	bic.w	r5, r5, #3
 80045ba:	3508      	adds	r5, #8
 80045bc:	2d0c      	cmp	r5, #12
 80045be:	bf38      	it	cc
 80045c0:	250c      	movcc	r5, #12
 80045c2:	2d00      	cmp	r5, #0
 80045c4:	4607      	mov	r7, r0
 80045c6:	db01      	blt.n	80045cc <_malloc_r+0x1c>
 80045c8:	42a9      	cmp	r1, r5
 80045ca:	d905      	bls.n	80045d8 <_malloc_r+0x28>
 80045cc:	230c      	movs	r3, #12
 80045ce:	2600      	movs	r6, #0
 80045d0:	603b      	str	r3, [r7, #0]
 80045d2:	4630      	mov	r0, r6
 80045d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045d8:	4e2e      	ldr	r6, [pc, #184]	; (8004694 <_malloc_r+0xe4>)
 80045da:	f000 f89d 	bl	8004718 <__malloc_lock>
 80045de:	6833      	ldr	r3, [r6, #0]
 80045e0:	461c      	mov	r4, r3
 80045e2:	bb34      	cbnz	r4, 8004632 <_malloc_r+0x82>
 80045e4:	4629      	mov	r1, r5
 80045e6:	4638      	mov	r0, r7
 80045e8:	f7ff ffc2 	bl	8004570 <sbrk_aligned>
 80045ec:	1c43      	adds	r3, r0, #1
 80045ee:	4604      	mov	r4, r0
 80045f0:	d14d      	bne.n	800468e <_malloc_r+0xde>
 80045f2:	6834      	ldr	r4, [r6, #0]
 80045f4:	4626      	mov	r6, r4
 80045f6:	2e00      	cmp	r6, #0
 80045f8:	d140      	bne.n	800467c <_malloc_r+0xcc>
 80045fa:	6823      	ldr	r3, [r4, #0]
 80045fc:	4631      	mov	r1, r6
 80045fe:	4638      	mov	r0, r7
 8004600:	eb04 0803 	add.w	r8, r4, r3
 8004604:	f000 f878 	bl	80046f8 <_sbrk_r>
 8004608:	4580      	cmp	r8, r0
 800460a:	d13a      	bne.n	8004682 <_malloc_r+0xd2>
 800460c:	6821      	ldr	r1, [r4, #0]
 800460e:	3503      	adds	r5, #3
 8004610:	1a6d      	subs	r5, r5, r1
 8004612:	f025 0503 	bic.w	r5, r5, #3
 8004616:	3508      	adds	r5, #8
 8004618:	2d0c      	cmp	r5, #12
 800461a:	bf38      	it	cc
 800461c:	250c      	movcc	r5, #12
 800461e:	4638      	mov	r0, r7
 8004620:	4629      	mov	r1, r5
 8004622:	f7ff ffa5 	bl	8004570 <sbrk_aligned>
 8004626:	3001      	adds	r0, #1
 8004628:	d02b      	beq.n	8004682 <_malloc_r+0xd2>
 800462a:	6823      	ldr	r3, [r4, #0]
 800462c:	442b      	add	r3, r5
 800462e:	6023      	str	r3, [r4, #0]
 8004630:	e00e      	b.n	8004650 <_malloc_r+0xa0>
 8004632:	6822      	ldr	r2, [r4, #0]
 8004634:	1b52      	subs	r2, r2, r5
 8004636:	d41e      	bmi.n	8004676 <_malloc_r+0xc6>
 8004638:	2a0b      	cmp	r2, #11
 800463a:	d916      	bls.n	800466a <_malloc_r+0xba>
 800463c:	1961      	adds	r1, r4, r5
 800463e:	42a3      	cmp	r3, r4
 8004640:	6025      	str	r5, [r4, #0]
 8004642:	bf18      	it	ne
 8004644:	6059      	strne	r1, [r3, #4]
 8004646:	6863      	ldr	r3, [r4, #4]
 8004648:	bf08      	it	eq
 800464a:	6031      	streq	r1, [r6, #0]
 800464c:	5162      	str	r2, [r4, r5]
 800464e:	604b      	str	r3, [r1, #4]
 8004650:	4638      	mov	r0, r7
 8004652:	f104 060b 	add.w	r6, r4, #11
 8004656:	f000 f865 	bl	8004724 <__malloc_unlock>
 800465a:	f026 0607 	bic.w	r6, r6, #7
 800465e:	1d23      	adds	r3, r4, #4
 8004660:	1af2      	subs	r2, r6, r3
 8004662:	d0b6      	beq.n	80045d2 <_malloc_r+0x22>
 8004664:	1b9b      	subs	r3, r3, r6
 8004666:	50a3      	str	r3, [r4, r2]
 8004668:	e7b3      	b.n	80045d2 <_malloc_r+0x22>
 800466a:	6862      	ldr	r2, [r4, #4]
 800466c:	42a3      	cmp	r3, r4
 800466e:	bf0c      	ite	eq
 8004670:	6032      	streq	r2, [r6, #0]
 8004672:	605a      	strne	r2, [r3, #4]
 8004674:	e7ec      	b.n	8004650 <_malloc_r+0xa0>
 8004676:	4623      	mov	r3, r4
 8004678:	6864      	ldr	r4, [r4, #4]
 800467a:	e7b2      	b.n	80045e2 <_malloc_r+0x32>
 800467c:	4634      	mov	r4, r6
 800467e:	6876      	ldr	r6, [r6, #4]
 8004680:	e7b9      	b.n	80045f6 <_malloc_r+0x46>
 8004682:	230c      	movs	r3, #12
 8004684:	4638      	mov	r0, r7
 8004686:	603b      	str	r3, [r7, #0]
 8004688:	f000 f84c 	bl	8004724 <__malloc_unlock>
 800468c:	e7a1      	b.n	80045d2 <_malloc_r+0x22>
 800468e:	6025      	str	r5, [r4, #0]
 8004690:	e7de      	b.n	8004650 <_malloc_r+0xa0>
 8004692:	bf00      	nop
 8004694:	20000430 	.word	0x20000430

08004698 <_realloc_r>:
 8004698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800469c:	4680      	mov	r8, r0
 800469e:	4614      	mov	r4, r2
 80046a0:	460e      	mov	r6, r1
 80046a2:	b921      	cbnz	r1, 80046ae <_realloc_r+0x16>
 80046a4:	4611      	mov	r1, r2
 80046a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046aa:	f7ff bf81 	b.w	80045b0 <_malloc_r>
 80046ae:	b92a      	cbnz	r2, 80046bc <_realloc_r+0x24>
 80046b0:	f7ff ff16 	bl	80044e0 <_free_r>
 80046b4:	4625      	mov	r5, r4
 80046b6:	4628      	mov	r0, r5
 80046b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046bc:	f000 f838 	bl	8004730 <_malloc_usable_size_r>
 80046c0:	4284      	cmp	r4, r0
 80046c2:	4607      	mov	r7, r0
 80046c4:	d802      	bhi.n	80046cc <_realloc_r+0x34>
 80046c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80046ca:	d812      	bhi.n	80046f2 <_realloc_r+0x5a>
 80046cc:	4621      	mov	r1, r4
 80046ce:	4640      	mov	r0, r8
 80046d0:	f7ff ff6e 	bl	80045b0 <_malloc_r>
 80046d4:	4605      	mov	r5, r0
 80046d6:	2800      	cmp	r0, #0
 80046d8:	d0ed      	beq.n	80046b6 <_realloc_r+0x1e>
 80046da:	42bc      	cmp	r4, r7
 80046dc:	4622      	mov	r2, r4
 80046de:	4631      	mov	r1, r6
 80046e0:	bf28      	it	cs
 80046e2:	463a      	movcs	r2, r7
 80046e4:	f7ff fed4 	bl	8004490 <memcpy>
 80046e8:	4631      	mov	r1, r6
 80046ea:	4640      	mov	r0, r8
 80046ec:	f7ff fef8 	bl	80044e0 <_free_r>
 80046f0:	e7e1      	b.n	80046b6 <_realloc_r+0x1e>
 80046f2:	4635      	mov	r5, r6
 80046f4:	e7df      	b.n	80046b6 <_realloc_r+0x1e>
	...

080046f8 <_sbrk_r>:
 80046f8:	b538      	push	{r3, r4, r5, lr}
 80046fa:	2300      	movs	r3, #0
 80046fc:	4d05      	ldr	r5, [pc, #20]	; (8004714 <_sbrk_r+0x1c>)
 80046fe:	4604      	mov	r4, r0
 8004700:	4608      	mov	r0, r1
 8004702:	602b      	str	r3, [r5, #0]
 8004704:	f7fd fa0e 	bl	8001b24 <_sbrk>
 8004708:	1c43      	adds	r3, r0, #1
 800470a:	d102      	bne.n	8004712 <_sbrk_r+0x1a>
 800470c:	682b      	ldr	r3, [r5, #0]
 800470e:	b103      	cbz	r3, 8004712 <_sbrk_r+0x1a>
 8004710:	6023      	str	r3, [r4, #0]
 8004712:	bd38      	pop	{r3, r4, r5, pc}
 8004714:	20000438 	.word	0x20000438

08004718 <__malloc_lock>:
 8004718:	4801      	ldr	r0, [pc, #4]	; (8004720 <__malloc_lock+0x8>)
 800471a:	f000 b811 	b.w	8004740 <__retarget_lock_acquire_recursive>
 800471e:	bf00      	nop
 8004720:	2000043c 	.word	0x2000043c

08004724 <__malloc_unlock>:
 8004724:	4801      	ldr	r0, [pc, #4]	; (800472c <__malloc_unlock+0x8>)
 8004726:	f000 b80c 	b.w	8004742 <__retarget_lock_release_recursive>
 800472a:	bf00      	nop
 800472c:	2000043c 	.word	0x2000043c

08004730 <_malloc_usable_size_r>:
 8004730:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004734:	1f18      	subs	r0, r3, #4
 8004736:	2b00      	cmp	r3, #0
 8004738:	bfbc      	itt	lt
 800473a:	580b      	ldrlt	r3, [r1, r0]
 800473c:	18c0      	addlt	r0, r0, r3
 800473e:	4770      	bx	lr

08004740 <__retarget_lock_acquire_recursive>:
 8004740:	4770      	bx	lr

08004742 <__retarget_lock_release_recursive>:
 8004742:	4770      	bx	lr

08004744 <pow>:
 8004744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004748:	4614      	mov	r4, r2
 800474a:	461d      	mov	r5, r3
 800474c:	4680      	mov	r8, r0
 800474e:	4689      	mov	r9, r1
 8004750:	f000 f862 	bl	8004818 <__ieee754_pow>
 8004754:	4622      	mov	r2, r4
 8004756:	4606      	mov	r6, r0
 8004758:	460f      	mov	r7, r1
 800475a:	462b      	mov	r3, r5
 800475c:	4620      	mov	r0, r4
 800475e:	4629      	mov	r1, r5
 8004760:	f7fc f94c 	bl	80009fc <__aeabi_dcmpun>
 8004764:	bbc8      	cbnz	r0, 80047da <pow+0x96>
 8004766:	2200      	movs	r2, #0
 8004768:	2300      	movs	r3, #0
 800476a:	4640      	mov	r0, r8
 800476c:	4649      	mov	r1, r9
 800476e:	f7fc f913 	bl	8000998 <__aeabi_dcmpeq>
 8004772:	b1b8      	cbz	r0, 80047a4 <pow+0x60>
 8004774:	2200      	movs	r2, #0
 8004776:	2300      	movs	r3, #0
 8004778:	4620      	mov	r0, r4
 800477a:	4629      	mov	r1, r5
 800477c:	f7fc f90c 	bl	8000998 <__aeabi_dcmpeq>
 8004780:	2800      	cmp	r0, #0
 8004782:	d141      	bne.n	8004808 <pow+0xc4>
 8004784:	4620      	mov	r0, r4
 8004786:	4629      	mov	r1, r5
 8004788:	f000 fe3b 	bl	8005402 <finite>
 800478c:	b328      	cbz	r0, 80047da <pow+0x96>
 800478e:	2200      	movs	r2, #0
 8004790:	2300      	movs	r3, #0
 8004792:	4620      	mov	r0, r4
 8004794:	4629      	mov	r1, r5
 8004796:	f7fc f909 	bl	80009ac <__aeabi_dcmplt>
 800479a:	b1f0      	cbz	r0, 80047da <pow+0x96>
 800479c:	f7ff fb26 	bl	8003dec <__errno>
 80047a0:	2322      	movs	r3, #34	; 0x22
 80047a2:	e019      	b.n	80047d8 <pow+0x94>
 80047a4:	4630      	mov	r0, r6
 80047a6:	4639      	mov	r1, r7
 80047a8:	f000 fe2b 	bl	8005402 <finite>
 80047ac:	b9c8      	cbnz	r0, 80047e2 <pow+0x9e>
 80047ae:	4640      	mov	r0, r8
 80047b0:	4649      	mov	r1, r9
 80047b2:	f000 fe26 	bl	8005402 <finite>
 80047b6:	b1a0      	cbz	r0, 80047e2 <pow+0x9e>
 80047b8:	4620      	mov	r0, r4
 80047ba:	4629      	mov	r1, r5
 80047bc:	f000 fe21 	bl	8005402 <finite>
 80047c0:	b178      	cbz	r0, 80047e2 <pow+0x9e>
 80047c2:	4632      	mov	r2, r6
 80047c4:	463b      	mov	r3, r7
 80047c6:	4630      	mov	r0, r6
 80047c8:	4639      	mov	r1, r7
 80047ca:	f7fc f917 	bl	80009fc <__aeabi_dcmpun>
 80047ce:	2800      	cmp	r0, #0
 80047d0:	d0e4      	beq.n	800479c <pow+0x58>
 80047d2:	f7ff fb0b 	bl	8003dec <__errno>
 80047d6:	2321      	movs	r3, #33	; 0x21
 80047d8:	6003      	str	r3, [r0, #0]
 80047da:	4630      	mov	r0, r6
 80047dc:	4639      	mov	r1, r7
 80047de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047e2:	2200      	movs	r2, #0
 80047e4:	2300      	movs	r3, #0
 80047e6:	4630      	mov	r0, r6
 80047e8:	4639      	mov	r1, r7
 80047ea:	f7fc f8d5 	bl	8000998 <__aeabi_dcmpeq>
 80047ee:	2800      	cmp	r0, #0
 80047f0:	d0f3      	beq.n	80047da <pow+0x96>
 80047f2:	4640      	mov	r0, r8
 80047f4:	4649      	mov	r1, r9
 80047f6:	f000 fe04 	bl	8005402 <finite>
 80047fa:	2800      	cmp	r0, #0
 80047fc:	d0ed      	beq.n	80047da <pow+0x96>
 80047fe:	4620      	mov	r0, r4
 8004800:	4629      	mov	r1, r5
 8004802:	f000 fdfe 	bl	8005402 <finite>
 8004806:	e7c8      	b.n	800479a <pow+0x56>
 8004808:	2600      	movs	r6, #0
 800480a:	4f01      	ldr	r7, [pc, #4]	; (8004810 <pow+0xcc>)
 800480c:	e7e5      	b.n	80047da <pow+0x96>
 800480e:	bf00      	nop
 8004810:	3ff00000 	.word	0x3ff00000
 8004814:	00000000 	.word	0x00000000

08004818 <__ieee754_pow>:
 8004818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800481c:	b093      	sub	sp, #76	; 0x4c
 800481e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004822:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8004826:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800482a:	4689      	mov	r9, r1
 800482c:	ea56 0102 	orrs.w	r1, r6, r2
 8004830:	4680      	mov	r8, r0
 8004832:	d111      	bne.n	8004858 <__ieee754_pow+0x40>
 8004834:	1803      	adds	r3, r0, r0
 8004836:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800483a:	4152      	adcs	r2, r2
 800483c:	4299      	cmp	r1, r3
 800483e:	4b82      	ldr	r3, [pc, #520]	; (8004a48 <__ieee754_pow+0x230>)
 8004840:	4193      	sbcs	r3, r2
 8004842:	f080 84b9 	bcs.w	80051b8 <__ieee754_pow+0x9a0>
 8004846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800484a:	4640      	mov	r0, r8
 800484c:	4649      	mov	r1, r9
 800484e:	f7fb fc85 	bl	800015c <__adddf3>
 8004852:	4683      	mov	fp, r0
 8004854:	468c      	mov	ip, r1
 8004856:	e06f      	b.n	8004938 <__ieee754_pow+0x120>
 8004858:	4b7c      	ldr	r3, [pc, #496]	; (8004a4c <__ieee754_pow+0x234>)
 800485a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800485e:	429c      	cmp	r4, r3
 8004860:	464d      	mov	r5, r9
 8004862:	4682      	mov	sl, r0
 8004864:	dc06      	bgt.n	8004874 <__ieee754_pow+0x5c>
 8004866:	d101      	bne.n	800486c <__ieee754_pow+0x54>
 8004868:	2800      	cmp	r0, #0
 800486a:	d1ec      	bne.n	8004846 <__ieee754_pow+0x2e>
 800486c:	429e      	cmp	r6, r3
 800486e:	dc01      	bgt.n	8004874 <__ieee754_pow+0x5c>
 8004870:	d10f      	bne.n	8004892 <__ieee754_pow+0x7a>
 8004872:	b172      	cbz	r2, 8004892 <__ieee754_pow+0x7a>
 8004874:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8004878:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800487c:	ea55 050a 	orrs.w	r5, r5, sl
 8004880:	d1e1      	bne.n	8004846 <__ieee754_pow+0x2e>
 8004882:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8004886:	18db      	adds	r3, r3, r3
 8004888:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800488c:	4152      	adcs	r2, r2
 800488e:	429d      	cmp	r5, r3
 8004890:	e7d5      	b.n	800483e <__ieee754_pow+0x26>
 8004892:	2d00      	cmp	r5, #0
 8004894:	da39      	bge.n	800490a <__ieee754_pow+0xf2>
 8004896:	4b6e      	ldr	r3, [pc, #440]	; (8004a50 <__ieee754_pow+0x238>)
 8004898:	429e      	cmp	r6, r3
 800489a:	dc52      	bgt.n	8004942 <__ieee754_pow+0x12a>
 800489c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80048a0:	429e      	cmp	r6, r3
 80048a2:	f340 849c 	ble.w	80051de <__ieee754_pow+0x9c6>
 80048a6:	1533      	asrs	r3, r6, #20
 80048a8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80048ac:	2b14      	cmp	r3, #20
 80048ae:	dd0f      	ble.n	80048d0 <__ieee754_pow+0xb8>
 80048b0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80048b4:	fa22 f103 	lsr.w	r1, r2, r3
 80048b8:	fa01 f303 	lsl.w	r3, r1, r3
 80048bc:	4293      	cmp	r3, r2
 80048be:	f040 848e 	bne.w	80051de <__ieee754_pow+0x9c6>
 80048c2:	f001 0101 	and.w	r1, r1, #1
 80048c6:	f1c1 0302 	rsb	r3, r1, #2
 80048ca:	9300      	str	r3, [sp, #0]
 80048cc:	b182      	cbz	r2, 80048f0 <__ieee754_pow+0xd8>
 80048ce:	e05d      	b.n	800498c <__ieee754_pow+0x174>
 80048d0:	2a00      	cmp	r2, #0
 80048d2:	d159      	bne.n	8004988 <__ieee754_pow+0x170>
 80048d4:	f1c3 0314 	rsb	r3, r3, #20
 80048d8:	fa46 f103 	asr.w	r1, r6, r3
 80048dc:	fa01 f303 	lsl.w	r3, r1, r3
 80048e0:	42b3      	cmp	r3, r6
 80048e2:	f040 8479 	bne.w	80051d8 <__ieee754_pow+0x9c0>
 80048e6:	f001 0101 	and.w	r1, r1, #1
 80048ea:	f1c1 0302 	rsb	r3, r1, #2
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	4b58      	ldr	r3, [pc, #352]	; (8004a54 <__ieee754_pow+0x23c>)
 80048f2:	429e      	cmp	r6, r3
 80048f4:	d132      	bne.n	800495c <__ieee754_pow+0x144>
 80048f6:	2f00      	cmp	r7, #0
 80048f8:	f280 846a 	bge.w	80051d0 <__ieee754_pow+0x9b8>
 80048fc:	4642      	mov	r2, r8
 80048fe:	464b      	mov	r3, r9
 8004900:	2000      	movs	r0, #0
 8004902:	4954      	ldr	r1, [pc, #336]	; (8004a54 <__ieee754_pow+0x23c>)
 8004904:	f7fb ff0a 	bl	800071c <__aeabi_ddiv>
 8004908:	e7a3      	b.n	8004852 <__ieee754_pow+0x3a>
 800490a:	2300      	movs	r3, #0
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	2a00      	cmp	r2, #0
 8004910:	d13c      	bne.n	800498c <__ieee754_pow+0x174>
 8004912:	4b4e      	ldr	r3, [pc, #312]	; (8004a4c <__ieee754_pow+0x234>)
 8004914:	429e      	cmp	r6, r3
 8004916:	d1eb      	bne.n	80048f0 <__ieee754_pow+0xd8>
 8004918:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800491c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004920:	ea53 030a 	orrs.w	r3, r3, sl
 8004924:	f000 8448 	beq.w	80051b8 <__ieee754_pow+0x9a0>
 8004928:	4b4b      	ldr	r3, [pc, #300]	; (8004a58 <__ieee754_pow+0x240>)
 800492a:	429c      	cmp	r4, r3
 800492c:	dd0b      	ble.n	8004946 <__ieee754_pow+0x12e>
 800492e:	2f00      	cmp	r7, #0
 8004930:	f2c0 8448 	blt.w	80051c4 <__ieee754_pow+0x9ac>
 8004934:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8004938:	4658      	mov	r0, fp
 800493a:	4661      	mov	r1, ip
 800493c:	b013      	add	sp, #76	; 0x4c
 800493e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004942:	2302      	movs	r3, #2
 8004944:	e7e2      	b.n	800490c <__ieee754_pow+0xf4>
 8004946:	2f00      	cmp	r7, #0
 8004948:	f04f 0b00 	mov.w	fp, #0
 800494c:	f04f 0c00 	mov.w	ip, #0
 8004950:	daf2      	bge.n	8004938 <__ieee754_pow+0x120>
 8004952:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8004956:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800495a:	e7ed      	b.n	8004938 <__ieee754_pow+0x120>
 800495c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8004960:	d106      	bne.n	8004970 <__ieee754_pow+0x158>
 8004962:	4642      	mov	r2, r8
 8004964:	464b      	mov	r3, r9
 8004966:	4640      	mov	r0, r8
 8004968:	4649      	mov	r1, r9
 800496a:	f7fb fdad 	bl	80004c8 <__aeabi_dmul>
 800496e:	e770      	b.n	8004852 <__ieee754_pow+0x3a>
 8004970:	4b3a      	ldr	r3, [pc, #232]	; (8004a5c <__ieee754_pow+0x244>)
 8004972:	429f      	cmp	r7, r3
 8004974:	d10a      	bne.n	800498c <__ieee754_pow+0x174>
 8004976:	2d00      	cmp	r5, #0
 8004978:	db08      	blt.n	800498c <__ieee754_pow+0x174>
 800497a:	4640      	mov	r0, r8
 800497c:	4649      	mov	r1, r9
 800497e:	b013      	add	sp, #76	; 0x4c
 8004980:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004984:	f000 bc5e 	b.w	8005244 <__ieee754_sqrt>
 8004988:	2300      	movs	r3, #0
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	4640      	mov	r0, r8
 800498e:	4649      	mov	r1, r9
 8004990:	f000 fd34 	bl	80053fc <fabs>
 8004994:	4683      	mov	fp, r0
 8004996:	468c      	mov	ip, r1
 8004998:	f1ba 0f00 	cmp.w	sl, #0
 800499c:	d128      	bne.n	80049f0 <__ieee754_pow+0x1d8>
 800499e:	b124      	cbz	r4, 80049aa <__ieee754_pow+0x192>
 80049a0:	4b2c      	ldr	r3, [pc, #176]	; (8004a54 <__ieee754_pow+0x23c>)
 80049a2:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d122      	bne.n	80049f0 <__ieee754_pow+0x1d8>
 80049aa:	2f00      	cmp	r7, #0
 80049ac:	da07      	bge.n	80049be <__ieee754_pow+0x1a6>
 80049ae:	465a      	mov	r2, fp
 80049b0:	4663      	mov	r3, ip
 80049b2:	2000      	movs	r0, #0
 80049b4:	4927      	ldr	r1, [pc, #156]	; (8004a54 <__ieee754_pow+0x23c>)
 80049b6:	f7fb feb1 	bl	800071c <__aeabi_ddiv>
 80049ba:	4683      	mov	fp, r0
 80049bc:	468c      	mov	ip, r1
 80049be:	2d00      	cmp	r5, #0
 80049c0:	daba      	bge.n	8004938 <__ieee754_pow+0x120>
 80049c2:	9b00      	ldr	r3, [sp, #0]
 80049c4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80049c8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80049cc:	4323      	orrs	r3, r4
 80049ce:	d108      	bne.n	80049e2 <__ieee754_pow+0x1ca>
 80049d0:	465a      	mov	r2, fp
 80049d2:	4663      	mov	r3, ip
 80049d4:	4658      	mov	r0, fp
 80049d6:	4661      	mov	r1, ip
 80049d8:	f7fb fbbe 	bl	8000158 <__aeabi_dsub>
 80049dc:	4602      	mov	r2, r0
 80049de:	460b      	mov	r3, r1
 80049e0:	e790      	b.n	8004904 <__ieee754_pow+0xec>
 80049e2:	9b00      	ldr	r3, [sp, #0]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d1a7      	bne.n	8004938 <__ieee754_pow+0x120>
 80049e8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80049ec:	469c      	mov	ip, r3
 80049ee:	e7a3      	b.n	8004938 <__ieee754_pow+0x120>
 80049f0:	0feb      	lsrs	r3, r5, #31
 80049f2:	3b01      	subs	r3, #1
 80049f4:	930c      	str	r3, [sp, #48]	; 0x30
 80049f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80049f8:	9b00      	ldr	r3, [sp, #0]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	d104      	bne.n	8004a08 <__ieee754_pow+0x1f0>
 80049fe:	4642      	mov	r2, r8
 8004a00:	464b      	mov	r3, r9
 8004a02:	4640      	mov	r0, r8
 8004a04:	4649      	mov	r1, r9
 8004a06:	e7e7      	b.n	80049d8 <__ieee754_pow+0x1c0>
 8004a08:	4b15      	ldr	r3, [pc, #84]	; (8004a60 <__ieee754_pow+0x248>)
 8004a0a:	429e      	cmp	r6, r3
 8004a0c:	f340 80f6 	ble.w	8004bfc <__ieee754_pow+0x3e4>
 8004a10:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004a14:	429e      	cmp	r6, r3
 8004a16:	4b10      	ldr	r3, [pc, #64]	; (8004a58 <__ieee754_pow+0x240>)
 8004a18:	dd09      	ble.n	8004a2e <__ieee754_pow+0x216>
 8004a1a:	429c      	cmp	r4, r3
 8004a1c:	dc0c      	bgt.n	8004a38 <__ieee754_pow+0x220>
 8004a1e:	2f00      	cmp	r7, #0
 8004a20:	da0c      	bge.n	8004a3c <__ieee754_pow+0x224>
 8004a22:	2000      	movs	r0, #0
 8004a24:	b013      	add	sp, #76	; 0x4c
 8004a26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a2a:	f000 bce2 	b.w	80053f2 <__math_oflow>
 8004a2e:	429c      	cmp	r4, r3
 8004a30:	dbf5      	blt.n	8004a1e <__ieee754_pow+0x206>
 8004a32:	4b08      	ldr	r3, [pc, #32]	; (8004a54 <__ieee754_pow+0x23c>)
 8004a34:	429c      	cmp	r4, r3
 8004a36:	dd15      	ble.n	8004a64 <__ieee754_pow+0x24c>
 8004a38:	2f00      	cmp	r7, #0
 8004a3a:	dcf2      	bgt.n	8004a22 <__ieee754_pow+0x20a>
 8004a3c:	2000      	movs	r0, #0
 8004a3e:	b013      	add	sp, #76	; 0x4c
 8004a40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a44:	f000 bcd0 	b.w	80053e8 <__math_uflow>
 8004a48:	fff00000 	.word	0xfff00000
 8004a4c:	7ff00000 	.word	0x7ff00000
 8004a50:	433fffff 	.word	0x433fffff
 8004a54:	3ff00000 	.word	0x3ff00000
 8004a58:	3fefffff 	.word	0x3fefffff
 8004a5c:	3fe00000 	.word	0x3fe00000
 8004a60:	41e00000 	.word	0x41e00000
 8004a64:	4661      	mov	r1, ip
 8004a66:	2200      	movs	r2, #0
 8004a68:	4658      	mov	r0, fp
 8004a6a:	4b5f      	ldr	r3, [pc, #380]	; (8004be8 <__ieee754_pow+0x3d0>)
 8004a6c:	f7fb fb74 	bl	8000158 <__aeabi_dsub>
 8004a70:	a355      	add	r3, pc, #340	; (adr r3, 8004bc8 <__ieee754_pow+0x3b0>)
 8004a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a76:	4604      	mov	r4, r0
 8004a78:	460d      	mov	r5, r1
 8004a7a:	f7fb fd25 	bl	80004c8 <__aeabi_dmul>
 8004a7e:	a354      	add	r3, pc, #336	; (adr r3, 8004bd0 <__ieee754_pow+0x3b8>)
 8004a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a84:	4606      	mov	r6, r0
 8004a86:	460f      	mov	r7, r1
 8004a88:	4620      	mov	r0, r4
 8004a8a:	4629      	mov	r1, r5
 8004a8c:	f7fb fd1c 	bl	80004c8 <__aeabi_dmul>
 8004a90:	2200      	movs	r2, #0
 8004a92:	4682      	mov	sl, r0
 8004a94:	468b      	mov	fp, r1
 8004a96:	4620      	mov	r0, r4
 8004a98:	4629      	mov	r1, r5
 8004a9a:	4b54      	ldr	r3, [pc, #336]	; (8004bec <__ieee754_pow+0x3d4>)
 8004a9c:	f7fb fd14 	bl	80004c8 <__aeabi_dmul>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	a14c      	add	r1, pc, #304	; (adr r1, 8004bd8 <__ieee754_pow+0x3c0>)
 8004aa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004aaa:	f7fb fb55 	bl	8000158 <__aeabi_dsub>
 8004aae:	4622      	mov	r2, r4
 8004ab0:	462b      	mov	r3, r5
 8004ab2:	f7fb fd09 	bl	80004c8 <__aeabi_dmul>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	2000      	movs	r0, #0
 8004abc:	494c      	ldr	r1, [pc, #304]	; (8004bf0 <__ieee754_pow+0x3d8>)
 8004abe:	f7fb fb4b 	bl	8000158 <__aeabi_dsub>
 8004ac2:	4622      	mov	r2, r4
 8004ac4:	462b      	mov	r3, r5
 8004ac6:	4680      	mov	r8, r0
 8004ac8:	4689      	mov	r9, r1
 8004aca:	4620      	mov	r0, r4
 8004acc:	4629      	mov	r1, r5
 8004ace:	f7fb fcfb 	bl	80004c8 <__aeabi_dmul>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	4640      	mov	r0, r8
 8004ad8:	4649      	mov	r1, r9
 8004ada:	f7fb fcf5 	bl	80004c8 <__aeabi_dmul>
 8004ade:	a340      	add	r3, pc, #256	; (adr r3, 8004be0 <__ieee754_pow+0x3c8>)
 8004ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae4:	f7fb fcf0 	bl	80004c8 <__aeabi_dmul>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	460b      	mov	r3, r1
 8004aec:	4650      	mov	r0, sl
 8004aee:	4659      	mov	r1, fp
 8004af0:	f7fb fb32 	bl	8000158 <__aeabi_dsub>
 8004af4:	f04f 0a00 	mov.w	sl, #0
 8004af8:	4602      	mov	r2, r0
 8004afa:	460b      	mov	r3, r1
 8004afc:	4604      	mov	r4, r0
 8004afe:	460d      	mov	r5, r1
 8004b00:	4630      	mov	r0, r6
 8004b02:	4639      	mov	r1, r7
 8004b04:	f7fb fb2a 	bl	800015c <__adddf3>
 8004b08:	4632      	mov	r2, r6
 8004b0a:	463b      	mov	r3, r7
 8004b0c:	4650      	mov	r0, sl
 8004b0e:	468b      	mov	fp, r1
 8004b10:	f7fb fb22 	bl	8000158 <__aeabi_dsub>
 8004b14:	4602      	mov	r2, r0
 8004b16:	460b      	mov	r3, r1
 8004b18:	4620      	mov	r0, r4
 8004b1a:	4629      	mov	r1, r5
 8004b1c:	f7fb fb1c 	bl	8000158 <__aeabi_dsub>
 8004b20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004b24:	9b00      	ldr	r3, [sp, #0]
 8004b26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	f04f 0600 	mov.w	r6, #0
 8004b30:	f04f 0200 	mov.w	r2, #0
 8004b34:	bf0c      	ite	eq
 8004b36:	4b2f      	ldreq	r3, [pc, #188]	; (8004bf4 <__ieee754_pow+0x3dc>)
 8004b38:	4b2b      	ldrne	r3, [pc, #172]	; (8004be8 <__ieee754_pow+0x3d0>)
 8004b3a:	4604      	mov	r4, r0
 8004b3c:	460d      	mov	r5, r1
 8004b3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b42:	e9cd 2300 	strd	r2, r3, [sp]
 8004b46:	4632      	mov	r2, r6
 8004b48:	463b      	mov	r3, r7
 8004b4a:	f7fb fb05 	bl	8000158 <__aeabi_dsub>
 8004b4e:	4652      	mov	r2, sl
 8004b50:	465b      	mov	r3, fp
 8004b52:	f7fb fcb9 	bl	80004c8 <__aeabi_dmul>
 8004b56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b5a:	4680      	mov	r8, r0
 8004b5c:	4689      	mov	r9, r1
 8004b5e:	4620      	mov	r0, r4
 8004b60:	4629      	mov	r1, r5
 8004b62:	f7fb fcb1 	bl	80004c8 <__aeabi_dmul>
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4640      	mov	r0, r8
 8004b6c:	4649      	mov	r1, r9
 8004b6e:	f7fb faf5 	bl	800015c <__adddf3>
 8004b72:	4632      	mov	r2, r6
 8004b74:	463b      	mov	r3, r7
 8004b76:	4680      	mov	r8, r0
 8004b78:	4689      	mov	r9, r1
 8004b7a:	4650      	mov	r0, sl
 8004b7c:	4659      	mov	r1, fp
 8004b7e:	f7fb fca3 	bl	80004c8 <__aeabi_dmul>
 8004b82:	4604      	mov	r4, r0
 8004b84:	460d      	mov	r5, r1
 8004b86:	460b      	mov	r3, r1
 8004b88:	4602      	mov	r2, r0
 8004b8a:	4649      	mov	r1, r9
 8004b8c:	4640      	mov	r0, r8
 8004b8e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004b92:	f7fb fae3 	bl	800015c <__adddf3>
 8004b96:	4b18      	ldr	r3, [pc, #96]	; (8004bf8 <__ieee754_pow+0x3e0>)
 8004b98:	4682      	mov	sl, r0
 8004b9a:	4299      	cmp	r1, r3
 8004b9c:	460f      	mov	r7, r1
 8004b9e:	460e      	mov	r6, r1
 8004ba0:	f340 82e5 	ble.w	800516e <__ieee754_pow+0x956>
 8004ba4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004ba8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004bac:	4303      	orrs	r3, r0
 8004bae:	f000 81df 	beq.w	8004f70 <__ieee754_pow+0x758>
 8004bb2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	2300      	movs	r3, #0
 8004bba:	f7fb fef7 	bl	80009ac <__aeabi_dcmplt>
 8004bbe:	3800      	subs	r0, #0
 8004bc0:	bf18      	it	ne
 8004bc2:	2001      	movne	r0, #1
 8004bc4:	e72e      	b.n	8004a24 <__ieee754_pow+0x20c>
 8004bc6:	bf00      	nop
 8004bc8:	60000000 	.word	0x60000000
 8004bcc:	3ff71547 	.word	0x3ff71547
 8004bd0:	f85ddf44 	.word	0xf85ddf44
 8004bd4:	3e54ae0b 	.word	0x3e54ae0b
 8004bd8:	55555555 	.word	0x55555555
 8004bdc:	3fd55555 	.word	0x3fd55555
 8004be0:	652b82fe 	.word	0x652b82fe
 8004be4:	3ff71547 	.word	0x3ff71547
 8004be8:	3ff00000 	.word	0x3ff00000
 8004bec:	3fd00000 	.word	0x3fd00000
 8004bf0:	3fe00000 	.word	0x3fe00000
 8004bf4:	bff00000 	.word	0xbff00000
 8004bf8:	408fffff 	.word	0x408fffff
 8004bfc:	4bd2      	ldr	r3, [pc, #840]	; (8004f48 <__ieee754_pow+0x730>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	402b      	ands	r3, r5
 8004c02:	b943      	cbnz	r3, 8004c16 <__ieee754_pow+0x3fe>
 8004c04:	4658      	mov	r0, fp
 8004c06:	4661      	mov	r1, ip
 8004c08:	4bd0      	ldr	r3, [pc, #832]	; (8004f4c <__ieee754_pow+0x734>)
 8004c0a:	f7fb fc5d 	bl	80004c8 <__aeabi_dmul>
 8004c0e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004c12:	4683      	mov	fp, r0
 8004c14:	460c      	mov	r4, r1
 8004c16:	1523      	asrs	r3, r4, #20
 8004c18:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004c1c:	4413      	add	r3, r2
 8004c1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c20:	4bcb      	ldr	r3, [pc, #812]	; (8004f50 <__ieee754_pow+0x738>)
 8004c22:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004c26:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004c2a:	429c      	cmp	r4, r3
 8004c2c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004c30:	dd08      	ble.n	8004c44 <__ieee754_pow+0x42c>
 8004c32:	4bc8      	ldr	r3, [pc, #800]	; (8004f54 <__ieee754_pow+0x73c>)
 8004c34:	429c      	cmp	r4, r3
 8004c36:	f340 8199 	ble.w	8004f6c <__ieee754_pow+0x754>
 8004c3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c3c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004c40:	3301      	adds	r3, #1
 8004c42:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c44:	2600      	movs	r6, #0
 8004c46:	00f3      	lsls	r3, r6, #3
 8004c48:	930d      	str	r3, [sp, #52]	; 0x34
 8004c4a:	4bc3      	ldr	r3, [pc, #780]	; (8004f58 <__ieee754_pow+0x740>)
 8004c4c:	4658      	mov	r0, fp
 8004c4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004c52:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c56:	4629      	mov	r1, r5
 8004c58:	461a      	mov	r2, r3
 8004c5a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8004c5e:	4623      	mov	r3, r4
 8004c60:	f7fb fa7a 	bl	8000158 <__aeabi_dsub>
 8004c64:	46da      	mov	sl, fp
 8004c66:	462b      	mov	r3, r5
 8004c68:	4652      	mov	r2, sl
 8004c6a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8004c6e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004c72:	f7fb fa73 	bl	800015c <__adddf3>
 8004c76:	4602      	mov	r2, r0
 8004c78:	460b      	mov	r3, r1
 8004c7a:	2000      	movs	r0, #0
 8004c7c:	49b7      	ldr	r1, [pc, #732]	; (8004f5c <__ieee754_pow+0x744>)
 8004c7e:	f7fb fd4d 	bl	800071c <__aeabi_ddiv>
 8004c82:	4602      	mov	r2, r0
 8004c84:	460b      	mov	r3, r1
 8004c86:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004c8a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004c8e:	f7fb fc1b 	bl	80004c8 <__aeabi_dmul>
 8004c92:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004c96:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8004c9a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	46ab      	mov	fp, r5
 8004ca4:	106d      	asrs	r5, r5, #1
 8004ca6:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004caa:	9304      	str	r3, [sp, #16]
 8004cac:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004cb0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004cb4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8004cb8:	4640      	mov	r0, r8
 8004cba:	4649      	mov	r1, r9
 8004cbc:	4614      	mov	r4, r2
 8004cbe:	461d      	mov	r5, r3
 8004cc0:	f7fb fc02 	bl	80004c8 <__aeabi_dmul>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004ccc:	f7fb fa44 	bl	8000158 <__aeabi_dsub>
 8004cd0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004cd4:	4606      	mov	r6, r0
 8004cd6:	460f      	mov	r7, r1
 8004cd8:	4620      	mov	r0, r4
 8004cda:	4629      	mov	r1, r5
 8004cdc:	f7fb fa3c 	bl	8000158 <__aeabi_dsub>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	4650      	mov	r0, sl
 8004ce6:	4659      	mov	r1, fp
 8004ce8:	f7fb fa36 	bl	8000158 <__aeabi_dsub>
 8004cec:	4642      	mov	r2, r8
 8004cee:	464b      	mov	r3, r9
 8004cf0:	f7fb fbea 	bl	80004c8 <__aeabi_dmul>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	4630      	mov	r0, r6
 8004cfa:	4639      	mov	r1, r7
 8004cfc:	f7fb fa2c 	bl	8000158 <__aeabi_dsub>
 8004d00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004d04:	f7fb fbe0 	bl	80004c8 <__aeabi_dmul>
 8004d08:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004d0c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004d10:	4610      	mov	r0, r2
 8004d12:	4619      	mov	r1, r3
 8004d14:	f7fb fbd8 	bl	80004c8 <__aeabi_dmul>
 8004d18:	a379      	add	r3, pc, #484	; (adr r3, 8004f00 <__ieee754_pow+0x6e8>)
 8004d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1e:	4604      	mov	r4, r0
 8004d20:	460d      	mov	r5, r1
 8004d22:	f7fb fbd1 	bl	80004c8 <__aeabi_dmul>
 8004d26:	a378      	add	r3, pc, #480	; (adr r3, 8004f08 <__ieee754_pow+0x6f0>)
 8004d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2c:	f7fb fa16 	bl	800015c <__adddf3>
 8004d30:	4622      	mov	r2, r4
 8004d32:	462b      	mov	r3, r5
 8004d34:	f7fb fbc8 	bl	80004c8 <__aeabi_dmul>
 8004d38:	a375      	add	r3, pc, #468	; (adr r3, 8004f10 <__ieee754_pow+0x6f8>)
 8004d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3e:	f7fb fa0d 	bl	800015c <__adddf3>
 8004d42:	4622      	mov	r2, r4
 8004d44:	462b      	mov	r3, r5
 8004d46:	f7fb fbbf 	bl	80004c8 <__aeabi_dmul>
 8004d4a:	a373      	add	r3, pc, #460	; (adr r3, 8004f18 <__ieee754_pow+0x700>)
 8004d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d50:	f7fb fa04 	bl	800015c <__adddf3>
 8004d54:	4622      	mov	r2, r4
 8004d56:	462b      	mov	r3, r5
 8004d58:	f7fb fbb6 	bl	80004c8 <__aeabi_dmul>
 8004d5c:	a370      	add	r3, pc, #448	; (adr r3, 8004f20 <__ieee754_pow+0x708>)
 8004d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d62:	f7fb f9fb 	bl	800015c <__adddf3>
 8004d66:	4622      	mov	r2, r4
 8004d68:	462b      	mov	r3, r5
 8004d6a:	f7fb fbad 	bl	80004c8 <__aeabi_dmul>
 8004d6e:	a36e      	add	r3, pc, #440	; (adr r3, 8004f28 <__ieee754_pow+0x710>)
 8004d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d74:	f7fb f9f2 	bl	800015c <__adddf3>
 8004d78:	4622      	mov	r2, r4
 8004d7a:	4606      	mov	r6, r0
 8004d7c:	460f      	mov	r7, r1
 8004d7e:	462b      	mov	r3, r5
 8004d80:	4620      	mov	r0, r4
 8004d82:	4629      	mov	r1, r5
 8004d84:	f7fb fba0 	bl	80004c8 <__aeabi_dmul>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4630      	mov	r0, r6
 8004d8e:	4639      	mov	r1, r7
 8004d90:	f7fb fb9a 	bl	80004c8 <__aeabi_dmul>
 8004d94:	4604      	mov	r4, r0
 8004d96:	460d      	mov	r5, r1
 8004d98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d9c:	4642      	mov	r2, r8
 8004d9e:	464b      	mov	r3, r9
 8004da0:	f7fb f9dc 	bl	800015c <__adddf3>
 8004da4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004da8:	f7fb fb8e 	bl	80004c8 <__aeabi_dmul>
 8004dac:	4622      	mov	r2, r4
 8004dae:	462b      	mov	r3, r5
 8004db0:	f7fb f9d4 	bl	800015c <__adddf3>
 8004db4:	4642      	mov	r2, r8
 8004db6:	4606      	mov	r6, r0
 8004db8:	460f      	mov	r7, r1
 8004dba:	464b      	mov	r3, r9
 8004dbc:	4640      	mov	r0, r8
 8004dbe:	4649      	mov	r1, r9
 8004dc0:	f7fb fb82 	bl	80004c8 <__aeabi_dmul>
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	4b66      	ldr	r3, [pc, #408]	; (8004f60 <__ieee754_pow+0x748>)
 8004dc8:	4682      	mov	sl, r0
 8004dca:	468b      	mov	fp, r1
 8004dcc:	f7fb f9c6 	bl	800015c <__adddf3>
 8004dd0:	4632      	mov	r2, r6
 8004dd2:	463b      	mov	r3, r7
 8004dd4:	f7fb f9c2 	bl	800015c <__adddf3>
 8004dd8:	2400      	movs	r4, #0
 8004dda:	460d      	mov	r5, r1
 8004ddc:	4622      	mov	r2, r4
 8004dde:	460b      	mov	r3, r1
 8004de0:	4640      	mov	r0, r8
 8004de2:	4649      	mov	r1, r9
 8004de4:	f7fb fb70 	bl	80004c8 <__aeabi_dmul>
 8004de8:	2200      	movs	r2, #0
 8004dea:	4680      	mov	r8, r0
 8004dec:	4689      	mov	r9, r1
 8004dee:	4620      	mov	r0, r4
 8004df0:	4629      	mov	r1, r5
 8004df2:	4b5b      	ldr	r3, [pc, #364]	; (8004f60 <__ieee754_pow+0x748>)
 8004df4:	f7fb f9b0 	bl	8000158 <__aeabi_dsub>
 8004df8:	4652      	mov	r2, sl
 8004dfa:	465b      	mov	r3, fp
 8004dfc:	f7fb f9ac 	bl	8000158 <__aeabi_dsub>
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	4630      	mov	r0, r6
 8004e06:	4639      	mov	r1, r7
 8004e08:	f7fb f9a6 	bl	8000158 <__aeabi_dsub>
 8004e0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e10:	f7fb fb5a 	bl	80004c8 <__aeabi_dmul>
 8004e14:	4622      	mov	r2, r4
 8004e16:	4606      	mov	r6, r0
 8004e18:	460f      	mov	r7, r1
 8004e1a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004e1e:	462b      	mov	r3, r5
 8004e20:	f7fb fb52 	bl	80004c8 <__aeabi_dmul>
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	4630      	mov	r0, r6
 8004e2a:	4639      	mov	r1, r7
 8004e2c:	f7fb f996 	bl	800015c <__adddf3>
 8004e30:	2400      	movs	r4, #0
 8004e32:	4606      	mov	r6, r0
 8004e34:	460f      	mov	r7, r1
 8004e36:	4602      	mov	r2, r0
 8004e38:	460b      	mov	r3, r1
 8004e3a:	4640      	mov	r0, r8
 8004e3c:	4649      	mov	r1, r9
 8004e3e:	f7fb f98d 	bl	800015c <__adddf3>
 8004e42:	a33b      	add	r3, pc, #236	; (adr r3, 8004f30 <__ieee754_pow+0x718>)
 8004e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e48:	4620      	mov	r0, r4
 8004e4a:	460d      	mov	r5, r1
 8004e4c:	f7fb fb3c 	bl	80004c8 <__aeabi_dmul>
 8004e50:	4642      	mov	r2, r8
 8004e52:	464b      	mov	r3, r9
 8004e54:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004e58:	4620      	mov	r0, r4
 8004e5a:	4629      	mov	r1, r5
 8004e5c:	f7fb f97c 	bl	8000158 <__aeabi_dsub>
 8004e60:	4602      	mov	r2, r0
 8004e62:	460b      	mov	r3, r1
 8004e64:	4630      	mov	r0, r6
 8004e66:	4639      	mov	r1, r7
 8004e68:	f7fb f976 	bl	8000158 <__aeabi_dsub>
 8004e6c:	a332      	add	r3, pc, #200	; (adr r3, 8004f38 <__ieee754_pow+0x720>)
 8004e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e72:	f7fb fb29 	bl	80004c8 <__aeabi_dmul>
 8004e76:	a332      	add	r3, pc, #200	; (adr r3, 8004f40 <__ieee754_pow+0x728>)
 8004e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7c:	4606      	mov	r6, r0
 8004e7e:	460f      	mov	r7, r1
 8004e80:	4620      	mov	r0, r4
 8004e82:	4629      	mov	r1, r5
 8004e84:	f7fb fb20 	bl	80004c8 <__aeabi_dmul>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	4630      	mov	r0, r6
 8004e8e:	4639      	mov	r1, r7
 8004e90:	f7fb f964 	bl	800015c <__adddf3>
 8004e94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004e96:	4b33      	ldr	r3, [pc, #204]	; (8004f64 <__ieee754_pow+0x74c>)
 8004e98:	f04f 0a00 	mov.w	sl, #0
 8004e9c:	4413      	add	r3, r2
 8004e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea2:	f7fb f95b 	bl	800015c <__adddf3>
 8004ea6:	4680      	mov	r8, r0
 8004ea8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004eaa:	4689      	mov	r9, r1
 8004eac:	f7fb faa2 	bl	80003f4 <__aeabi_i2d>
 8004eb0:	4604      	mov	r4, r0
 8004eb2:	460d      	mov	r5, r1
 8004eb4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004eb6:	4b2c      	ldr	r3, [pc, #176]	; (8004f68 <__ieee754_pow+0x750>)
 8004eb8:	4413      	add	r3, r2
 8004eba:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004ebe:	4642      	mov	r2, r8
 8004ec0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ec4:	464b      	mov	r3, r9
 8004ec6:	f7fb f949 	bl	800015c <__adddf3>
 8004eca:	4632      	mov	r2, r6
 8004ecc:	463b      	mov	r3, r7
 8004ece:	f7fb f945 	bl	800015c <__adddf3>
 8004ed2:	4622      	mov	r2, r4
 8004ed4:	462b      	mov	r3, r5
 8004ed6:	f7fb f941 	bl	800015c <__adddf3>
 8004eda:	4622      	mov	r2, r4
 8004edc:	462b      	mov	r3, r5
 8004ede:	4650      	mov	r0, sl
 8004ee0:	468b      	mov	fp, r1
 8004ee2:	f7fb f939 	bl	8000158 <__aeabi_dsub>
 8004ee6:	4632      	mov	r2, r6
 8004ee8:	463b      	mov	r3, r7
 8004eea:	f7fb f935 	bl	8000158 <__aeabi_dsub>
 8004eee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ef2:	f7fb f931 	bl	8000158 <__aeabi_dsub>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	460b      	mov	r3, r1
 8004efa:	4640      	mov	r0, r8
 8004efc:	4649      	mov	r1, r9
 8004efe:	e60d      	b.n	8004b1c <__ieee754_pow+0x304>
 8004f00:	4a454eef 	.word	0x4a454eef
 8004f04:	3fca7e28 	.word	0x3fca7e28
 8004f08:	93c9db65 	.word	0x93c9db65
 8004f0c:	3fcd864a 	.word	0x3fcd864a
 8004f10:	a91d4101 	.word	0xa91d4101
 8004f14:	3fd17460 	.word	0x3fd17460
 8004f18:	518f264d 	.word	0x518f264d
 8004f1c:	3fd55555 	.word	0x3fd55555
 8004f20:	db6fabff 	.word	0xdb6fabff
 8004f24:	3fdb6db6 	.word	0x3fdb6db6
 8004f28:	33333303 	.word	0x33333303
 8004f2c:	3fe33333 	.word	0x3fe33333
 8004f30:	e0000000 	.word	0xe0000000
 8004f34:	3feec709 	.word	0x3feec709
 8004f38:	dc3a03fd 	.word	0xdc3a03fd
 8004f3c:	3feec709 	.word	0x3feec709
 8004f40:	145b01f5 	.word	0x145b01f5
 8004f44:	be3e2fe0 	.word	0xbe3e2fe0
 8004f48:	7ff00000 	.word	0x7ff00000
 8004f4c:	43400000 	.word	0x43400000
 8004f50:	0003988e 	.word	0x0003988e
 8004f54:	000bb679 	.word	0x000bb679
 8004f58:	08005590 	.word	0x08005590
 8004f5c:	3ff00000 	.word	0x3ff00000
 8004f60:	40080000 	.word	0x40080000
 8004f64:	080055b0 	.word	0x080055b0
 8004f68:	080055a0 	.word	0x080055a0
 8004f6c:	2601      	movs	r6, #1
 8004f6e:	e66a      	b.n	8004c46 <__ieee754_pow+0x42e>
 8004f70:	a39d      	add	r3, pc, #628	; (adr r3, 80051e8 <__ieee754_pow+0x9d0>)
 8004f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f76:	4640      	mov	r0, r8
 8004f78:	4649      	mov	r1, r9
 8004f7a:	f7fb f8ef 	bl	800015c <__adddf3>
 8004f7e:	4622      	mov	r2, r4
 8004f80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f84:	462b      	mov	r3, r5
 8004f86:	4650      	mov	r0, sl
 8004f88:	4639      	mov	r1, r7
 8004f8a:	f7fb f8e5 	bl	8000158 <__aeabi_dsub>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	460b      	mov	r3, r1
 8004f92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f96:	f7fb fd27 	bl	80009e8 <__aeabi_dcmpgt>
 8004f9a:	2800      	cmp	r0, #0
 8004f9c:	f47f ae09 	bne.w	8004bb2 <__ieee754_pow+0x39a>
 8004fa0:	4aa3      	ldr	r2, [pc, #652]	; (8005230 <__ieee754_pow+0xa18>)
 8004fa2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	f340 8101 	ble.w	80051ae <__ieee754_pow+0x996>
 8004fac:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004fb0:	2000      	movs	r0, #0
 8004fb2:	151b      	asrs	r3, r3, #20
 8004fb4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004fb8:	fa4a f303 	asr.w	r3, sl, r3
 8004fbc:	4433      	add	r3, r6
 8004fbe:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8004fc2:	4f9c      	ldr	r7, [pc, #624]	; (8005234 <__ieee754_pow+0xa1c>)
 8004fc4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004fc8:	4117      	asrs	r7, r2
 8004fca:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004fce:	ea23 0107 	bic.w	r1, r3, r7
 8004fd2:	f1c2 0214 	rsb	r2, r2, #20
 8004fd6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004fda:	460b      	mov	r3, r1
 8004fdc:	fa4a fa02 	asr.w	sl, sl, r2
 8004fe0:	2e00      	cmp	r6, #0
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	4629      	mov	r1, r5
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	bfb8      	it	lt
 8004fea:	f1ca 0a00 	rsblt	sl, sl, #0
 8004fee:	f7fb f8b3 	bl	8000158 <__aeabi_dsub>
 8004ff2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ff6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ffa:	2400      	movs	r4, #0
 8004ffc:	4642      	mov	r2, r8
 8004ffe:	464b      	mov	r3, r9
 8005000:	f7fb f8ac 	bl	800015c <__adddf3>
 8005004:	a37a      	add	r3, pc, #488	; (adr r3, 80051f0 <__ieee754_pow+0x9d8>)
 8005006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500a:	4620      	mov	r0, r4
 800500c:	460d      	mov	r5, r1
 800500e:	f7fb fa5b 	bl	80004c8 <__aeabi_dmul>
 8005012:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005016:	4606      	mov	r6, r0
 8005018:	460f      	mov	r7, r1
 800501a:	4620      	mov	r0, r4
 800501c:	4629      	mov	r1, r5
 800501e:	f7fb f89b 	bl	8000158 <__aeabi_dsub>
 8005022:	4602      	mov	r2, r0
 8005024:	460b      	mov	r3, r1
 8005026:	4640      	mov	r0, r8
 8005028:	4649      	mov	r1, r9
 800502a:	f7fb f895 	bl	8000158 <__aeabi_dsub>
 800502e:	a372      	add	r3, pc, #456	; (adr r3, 80051f8 <__ieee754_pow+0x9e0>)
 8005030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005034:	f7fb fa48 	bl	80004c8 <__aeabi_dmul>
 8005038:	a371      	add	r3, pc, #452	; (adr r3, 8005200 <__ieee754_pow+0x9e8>)
 800503a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503e:	4680      	mov	r8, r0
 8005040:	4689      	mov	r9, r1
 8005042:	4620      	mov	r0, r4
 8005044:	4629      	mov	r1, r5
 8005046:	f7fb fa3f 	bl	80004c8 <__aeabi_dmul>
 800504a:	4602      	mov	r2, r0
 800504c:	460b      	mov	r3, r1
 800504e:	4640      	mov	r0, r8
 8005050:	4649      	mov	r1, r9
 8005052:	f7fb f883 	bl	800015c <__adddf3>
 8005056:	4604      	mov	r4, r0
 8005058:	460d      	mov	r5, r1
 800505a:	4602      	mov	r2, r0
 800505c:	460b      	mov	r3, r1
 800505e:	4630      	mov	r0, r6
 8005060:	4639      	mov	r1, r7
 8005062:	f7fb f87b 	bl	800015c <__adddf3>
 8005066:	4632      	mov	r2, r6
 8005068:	463b      	mov	r3, r7
 800506a:	4680      	mov	r8, r0
 800506c:	4689      	mov	r9, r1
 800506e:	f7fb f873 	bl	8000158 <__aeabi_dsub>
 8005072:	4602      	mov	r2, r0
 8005074:	460b      	mov	r3, r1
 8005076:	4620      	mov	r0, r4
 8005078:	4629      	mov	r1, r5
 800507a:	f7fb f86d 	bl	8000158 <__aeabi_dsub>
 800507e:	4642      	mov	r2, r8
 8005080:	4606      	mov	r6, r0
 8005082:	460f      	mov	r7, r1
 8005084:	464b      	mov	r3, r9
 8005086:	4640      	mov	r0, r8
 8005088:	4649      	mov	r1, r9
 800508a:	f7fb fa1d 	bl	80004c8 <__aeabi_dmul>
 800508e:	a35e      	add	r3, pc, #376	; (adr r3, 8005208 <__ieee754_pow+0x9f0>)
 8005090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005094:	4604      	mov	r4, r0
 8005096:	460d      	mov	r5, r1
 8005098:	f7fb fa16 	bl	80004c8 <__aeabi_dmul>
 800509c:	a35c      	add	r3, pc, #368	; (adr r3, 8005210 <__ieee754_pow+0x9f8>)
 800509e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a2:	f7fb f859 	bl	8000158 <__aeabi_dsub>
 80050a6:	4622      	mov	r2, r4
 80050a8:	462b      	mov	r3, r5
 80050aa:	f7fb fa0d 	bl	80004c8 <__aeabi_dmul>
 80050ae:	a35a      	add	r3, pc, #360	; (adr r3, 8005218 <__ieee754_pow+0xa00>)
 80050b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b4:	f7fb f852 	bl	800015c <__adddf3>
 80050b8:	4622      	mov	r2, r4
 80050ba:	462b      	mov	r3, r5
 80050bc:	f7fb fa04 	bl	80004c8 <__aeabi_dmul>
 80050c0:	a357      	add	r3, pc, #348	; (adr r3, 8005220 <__ieee754_pow+0xa08>)
 80050c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c6:	f7fb f847 	bl	8000158 <__aeabi_dsub>
 80050ca:	4622      	mov	r2, r4
 80050cc:	462b      	mov	r3, r5
 80050ce:	f7fb f9fb 	bl	80004c8 <__aeabi_dmul>
 80050d2:	a355      	add	r3, pc, #340	; (adr r3, 8005228 <__ieee754_pow+0xa10>)
 80050d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d8:	f7fb f840 	bl	800015c <__adddf3>
 80050dc:	4622      	mov	r2, r4
 80050de:	462b      	mov	r3, r5
 80050e0:	f7fb f9f2 	bl	80004c8 <__aeabi_dmul>
 80050e4:	4602      	mov	r2, r0
 80050e6:	460b      	mov	r3, r1
 80050e8:	4640      	mov	r0, r8
 80050ea:	4649      	mov	r1, r9
 80050ec:	f7fb f834 	bl	8000158 <__aeabi_dsub>
 80050f0:	4604      	mov	r4, r0
 80050f2:	460d      	mov	r5, r1
 80050f4:	4602      	mov	r2, r0
 80050f6:	460b      	mov	r3, r1
 80050f8:	4640      	mov	r0, r8
 80050fa:	4649      	mov	r1, r9
 80050fc:	f7fb f9e4 	bl	80004c8 <__aeabi_dmul>
 8005100:	2200      	movs	r2, #0
 8005102:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005106:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800510a:	4620      	mov	r0, r4
 800510c:	4629      	mov	r1, r5
 800510e:	f7fb f823 	bl	8000158 <__aeabi_dsub>
 8005112:	4602      	mov	r2, r0
 8005114:	460b      	mov	r3, r1
 8005116:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800511a:	f7fb faff 	bl	800071c <__aeabi_ddiv>
 800511e:	4632      	mov	r2, r6
 8005120:	4604      	mov	r4, r0
 8005122:	460d      	mov	r5, r1
 8005124:	463b      	mov	r3, r7
 8005126:	4640      	mov	r0, r8
 8005128:	4649      	mov	r1, r9
 800512a:	f7fb f9cd 	bl	80004c8 <__aeabi_dmul>
 800512e:	4632      	mov	r2, r6
 8005130:	463b      	mov	r3, r7
 8005132:	f7fb f813 	bl	800015c <__adddf3>
 8005136:	4602      	mov	r2, r0
 8005138:	460b      	mov	r3, r1
 800513a:	4620      	mov	r0, r4
 800513c:	4629      	mov	r1, r5
 800513e:	f7fb f80b 	bl	8000158 <__aeabi_dsub>
 8005142:	4642      	mov	r2, r8
 8005144:	464b      	mov	r3, r9
 8005146:	f7fb f807 	bl	8000158 <__aeabi_dsub>
 800514a:	4602      	mov	r2, r0
 800514c:	460b      	mov	r3, r1
 800514e:	2000      	movs	r0, #0
 8005150:	4939      	ldr	r1, [pc, #228]	; (8005238 <__ieee754_pow+0xa20>)
 8005152:	f7fb f801 	bl	8000158 <__aeabi_dsub>
 8005156:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800515a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800515e:	da29      	bge.n	80051b4 <__ieee754_pow+0x99c>
 8005160:	4652      	mov	r2, sl
 8005162:	f000 f955 	bl	8005410 <scalbn>
 8005166:	e9dd 2300 	ldrd	r2, r3, [sp]
 800516a:	f7ff bbfe 	b.w	800496a <__ieee754_pow+0x152>
 800516e:	4b33      	ldr	r3, [pc, #204]	; (800523c <__ieee754_pow+0xa24>)
 8005170:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8005174:	429f      	cmp	r7, r3
 8005176:	f77f af13 	ble.w	8004fa0 <__ieee754_pow+0x788>
 800517a:	4b31      	ldr	r3, [pc, #196]	; (8005240 <__ieee754_pow+0xa28>)
 800517c:	440b      	add	r3, r1
 800517e:	4303      	orrs	r3, r0
 8005180:	d009      	beq.n	8005196 <__ieee754_pow+0x97e>
 8005182:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005186:	2200      	movs	r2, #0
 8005188:	2300      	movs	r3, #0
 800518a:	f7fb fc0f 	bl	80009ac <__aeabi_dcmplt>
 800518e:	3800      	subs	r0, #0
 8005190:	bf18      	it	ne
 8005192:	2001      	movne	r0, #1
 8005194:	e453      	b.n	8004a3e <__ieee754_pow+0x226>
 8005196:	4622      	mov	r2, r4
 8005198:	462b      	mov	r3, r5
 800519a:	f7fa ffdd 	bl	8000158 <__aeabi_dsub>
 800519e:	4642      	mov	r2, r8
 80051a0:	464b      	mov	r3, r9
 80051a2:	f7fb fc17 	bl	80009d4 <__aeabi_dcmpge>
 80051a6:	2800      	cmp	r0, #0
 80051a8:	f43f aefa 	beq.w	8004fa0 <__ieee754_pow+0x788>
 80051ac:	e7e9      	b.n	8005182 <__ieee754_pow+0x96a>
 80051ae:	f04f 0a00 	mov.w	sl, #0
 80051b2:	e720      	b.n	8004ff6 <__ieee754_pow+0x7de>
 80051b4:	4621      	mov	r1, r4
 80051b6:	e7d6      	b.n	8005166 <__ieee754_pow+0x94e>
 80051b8:	f04f 0b00 	mov.w	fp, #0
 80051bc:	f8df c078 	ldr.w	ip, [pc, #120]	; 8005238 <__ieee754_pow+0xa20>
 80051c0:	f7ff bbba 	b.w	8004938 <__ieee754_pow+0x120>
 80051c4:	f04f 0b00 	mov.w	fp, #0
 80051c8:	f04f 0c00 	mov.w	ip, #0
 80051cc:	f7ff bbb4 	b.w	8004938 <__ieee754_pow+0x120>
 80051d0:	4640      	mov	r0, r8
 80051d2:	4649      	mov	r1, r9
 80051d4:	f7ff bb3d 	b.w	8004852 <__ieee754_pow+0x3a>
 80051d8:	9200      	str	r2, [sp, #0]
 80051da:	f7ff bb89 	b.w	80048f0 <__ieee754_pow+0xd8>
 80051de:	2300      	movs	r3, #0
 80051e0:	f7ff bb73 	b.w	80048ca <__ieee754_pow+0xb2>
 80051e4:	f3af 8000 	nop.w
 80051e8:	652b82fe 	.word	0x652b82fe
 80051ec:	3c971547 	.word	0x3c971547
 80051f0:	00000000 	.word	0x00000000
 80051f4:	3fe62e43 	.word	0x3fe62e43
 80051f8:	fefa39ef 	.word	0xfefa39ef
 80051fc:	3fe62e42 	.word	0x3fe62e42
 8005200:	0ca86c39 	.word	0x0ca86c39
 8005204:	be205c61 	.word	0xbe205c61
 8005208:	72bea4d0 	.word	0x72bea4d0
 800520c:	3e663769 	.word	0x3e663769
 8005210:	c5d26bf1 	.word	0xc5d26bf1
 8005214:	3ebbbd41 	.word	0x3ebbbd41
 8005218:	af25de2c 	.word	0xaf25de2c
 800521c:	3f11566a 	.word	0x3f11566a
 8005220:	16bebd93 	.word	0x16bebd93
 8005224:	3f66c16c 	.word	0x3f66c16c
 8005228:	5555553e 	.word	0x5555553e
 800522c:	3fc55555 	.word	0x3fc55555
 8005230:	3fe00000 	.word	0x3fe00000
 8005234:	000fffff 	.word	0x000fffff
 8005238:	3ff00000 	.word	0x3ff00000
 800523c:	4090cbff 	.word	0x4090cbff
 8005240:	3f6f3400 	.word	0x3f6f3400

08005244 <__ieee754_sqrt>:
 8005244:	f8df c158 	ldr.w	ip, [pc, #344]	; 80053a0 <__ieee754_sqrt+0x15c>
 8005248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800524c:	ea3c 0c01 	bics.w	ip, ip, r1
 8005250:	4606      	mov	r6, r0
 8005252:	460d      	mov	r5, r1
 8005254:	460c      	mov	r4, r1
 8005256:	460a      	mov	r2, r1
 8005258:	4607      	mov	r7, r0
 800525a:	4603      	mov	r3, r0
 800525c:	d10f      	bne.n	800527e <__ieee754_sqrt+0x3a>
 800525e:	4602      	mov	r2, r0
 8005260:	460b      	mov	r3, r1
 8005262:	f7fb f931 	bl	80004c8 <__aeabi_dmul>
 8005266:	4602      	mov	r2, r0
 8005268:	460b      	mov	r3, r1
 800526a:	4630      	mov	r0, r6
 800526c:	4629      	mov	r1, r5
 800526e:	f7fa ff75 	bl	800015c <__adddf3>
 8005272:	4606      	mov	r6, r0
 8005274:	460d      	mov	r5, r1
 8005276:	4630      	mov	r0, r6
 8005278:	4629      	mov	r1, r5
 800527a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800527e:	2900      	cmp	r1, #0
 8005280:	dc0e      	bgt.n	80052a0 <__ieee754_sqrt+0x5c>
 8005282:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8005286:	ea5c 0707 	orrs.w	r7, ip, r7
 800528a:	d0f4      	beq.n	8005276 <__ieee754_sqrt+0x32>
 800528c:	b141      	cbz	r1, 80052a0 <__ieee754_sqrt+0x5c>
 800528e:	4602      	mov	r2, r0
 8005290:	460b      	mov	r3, r1
 8005292:	f7fa ff61 	bl	8000158 <__aeabi_dsub>
 8005296:	4602      	mov	r2, r0
 8005298:	460b      	mov	r3, r1
 800529a:	f7fb fa3f 	bl	800071c <__aeabi_ddiv>
 800529e:	e7e8      	b.n	8005272 <__ieee754_sqrt+0x2e>
 80052a0:	1521      	asrs	r1, r4, #20
 80052a2:	d075      	beq.n	8005390 <__ieee754_sqrt+0x14c>
 80052a4:	07cc      	lsls	r4, r1, #31
 80052a6:	f04f 0400 	mov.w	r4, #0
 80052aa:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80052ae:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 80052b2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80052b6:	bf5e      	ittt	pl
 80052b8:	0fd9      	lsrpl	r1, r3, #31
 80052ba:	005b      	lslpl	r3, r3, #1
 80052bc:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 80052c0:	0fd9      	lsrs	r1, r3, #31
 80052c2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80052c6:	2516      	movs	r5, #22
 80052c8:	4620      	mov	r0, r4
 80052ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052ce:	107f      	asrs	r7, r7, #1
 80052d0:	005b      	lsls	r3, r3, #1
 80052d2:	1846      	adds	r6, r0, r1
 80052d4:	4296      	cmp	r6, r2
 80052d6:	bfde      	ittt	le
 80052d8:	1b92      	suble	r2, r2, r6
 80052da:	1870      	addle	r0, r6, r1
 80052dc:	1864      	addle	r4, r4, r1
 80052de:	0052      	lsls	r2, r2, #1
 80052e0:	3d01      	subs	r5, #1
 80052e2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80052e6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80052ea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80052ee:	d1f0      	bne.n	80052d2 <__ieee754_sqrt+0x8e>
 80052f0:	4629      	mov	r1, r5
 80052f2:	f04f 0e20 	mov.w	lr, #32
 80052f6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80052fa:	4282      	cmp	r2, r0
 80052fc:	eb06 0c05 	add.w	ip, r6, r5
 8005300:	dc02      	bgt.n	8005308 <__ieee754_sqrt+0xc4>
 8005302:	d113      	bne.n	800532c <__ieee754_sqrt+0xe8>
 8005304:	459c      	cmp	ip, r3
 8005306:	d811      	bhi.n	800532c <__ieee754_sqrt+0xe8>
 8005308:	f1bc 0f00 	cmp.w	ip, #0
 800530c:	eb0c 0506 	add.w	r5, ip, r6
 8005310:	da43      	bge.n	800539a <__ieee754_sqrt+0x156>
 8005312:	2d00      	cmp	r5, #0
 8005314:	db41      	blt.n	800539a <__ieee754_sqrt+0x156>
 8005316:	f100 0801 	add.w	r8, r0, #1
 800531a:	1a12      	subs	r2, r2, r0
 800531c:	4640      	mov	r0, r8
 800531e:	459c      	cmp	ip, r3
 8005320:	bf88      	it	hi
 8005322:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8005326:	eba3 030c 	sub.w	r3, r3, ip
 800532a:	4431      	add	r1, r6
 800532c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8005330:	f1be 0e01 	subs.w	lr, lr, #1
 8005334:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8005338:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800533c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005340:	d1db      	bne.n	80052fa <__ieee754_sqrt+0xb6>
 8005342:	4313      	orrs	r3, r2
 8005344:	d006      	beq.n	8005354 <__ieee754_sqrt+0x110>
 8005346:	1c48      	adds	r0, r1, #1
 8005348:	bf0b      	itete	eq
 800534a:	4671      	moveq	r1, lr
 800534c:	3101      	addne	r1, #1
 800534e:	3401      	addeq	r4, #1
 8005350:	f021 0101 	bicne.w	r1, r1, #1
 8005354:	1063      	asrs	r3, r4, #1
 8005356:	0849      	lsrs	r1, r1, #1
 8005358:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800535c:	07e2      	lsls	r2, r4, #31
 800535e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005362:	bf48      	it	mi
 8005364:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8005368:	460e      	mov	r6, r1
 800536a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800536e:	e782      	b.n	8005276 <__ieee754_sqrt+0x32>
 8005370:	0ada      	lsrs	r2, r3, #11
 8005372:	3815      	subs	r0, #21
 8005374:	055b      	lsls	r3, r3, #21
 8005376:	2a00      	cmp	r2, #0
 8005378:	d0fa      	beq.n	8005370 <__ieee754_sqrt+0x12c>
 800537a:	02d5      	lsls	r5, r2, #11
 800537c:	d50a      	bpl.n	8005394 <__ieee754_sqrt+0x150>
 800537e:	f1c1 0420 	rsb	r4, r1, #32
 8005382:	fa23 f404 	lsr.w	r4, r3, r4
 8005386:	1e4d      	subs	r5, r1, #1
 8005388:	408b      	lsls	r3, r1
 800538a:	4322      	orrs	r2, r4
 800538c:	1b41      	subs	r1, r0, r5
 800538e:	e789      	b.n	80052a4 <__ieee754_sqrt+0x60>
 8005390:	4608      	mov	r0, r1
 8005392:	e7f0      	b.n	8005376 <__ieee754_sqrt+0x132>
 8005394:	0052      	lsls	r2, r2, #1
 8005396:	3101      	adds	r1, #1
 8005398:	e7ef      	b.n	800537a <__ieee754_sqrt+0x136>
 800539a:	4680      	mov	r8, r0
 800539c:	e7bd      	b.n	800531a <__ieee754_sqrt+0xd6>
 800539e:	bf00      	nop
 80053a0:	7ff00000 	.word	0x7ff00000

080053a4 <with_errno>:
 80053a4:	b570      	push	{r4, r5, r6, lr}
 80053a6:	4604      	mov	r4, r0
 80053a8:	460d      	mov	r5, r1
 80053aa:	4616      	mov	r6, r2
 80053ac:	f7fe fd1e 	bl	8003dec <__errno>
 80053b0:	4629      	mov	r1, r5
 80053b2:	6006      	str	r6, [r0, #0]
 80053b4:	4620      	mov	r0, r4
 80053b6:	bd70      	pop	{r4, r5, r6, pc}

080053b8 <xflow>:
 80053b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053ba:	4615      	mov	r5, r2
 80053bc:	461c      	mov	r4, r3
 80053be:	b180      	cbz	r0, 80053e2 <xflow+0x2a>
 80053c0:	4610      	mov	r0, r2
 80053c2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80053c6:	e9cd 0100 	strd	r0, r1, [sp]
 80053ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80053ce:	4628      	mov	r0, r5
 80053d0:	4621      	mov	r1, r4
 80053d2:	f7fb f879 	bl	80004c8 <__aeabi_dmul>
 80053d6:	2222      	movs	r2, #34	; 0x22
 80053d8:	b003      	add	sp, #12
 80053da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053de:	f7ff bfe1 	b.w	80053a4 <with_errno>
 80053e2:	4610      	mov	r0, r2
 80053e4:	4619      	mov	r1, r3
 80053e6:	e7ee      	b.n	80053c6 <xflow+0xe>

080053e8 <__math_uflow>:
 80053e8:	2200      	movs	r2, #0
 80053ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80053ee:	f7ff bfe3 	b.w	80053b8 <xflow>

080053f2 <__math_oflow>:
 80053f2:	2200      	movs	r2, #0
 80053f4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80053f8:	f7ff bfde 	b.w	80053b8 <xflow>

080053fc <fabs>:
 80053fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005400:	4770      	bx	lr

08005402 <finite>:
 8005402:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8005406:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800540a:	0fc0      	lsrs	r0, r0, #31
 800540c:	4770      	bx	lr
	...

08005410 <scalbn>:
 8005410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005412:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8005416:	4604      	mov	r4, r0
 8005418:	460d      	mov	r5, r1
 800541a:	4617      	mov	r7, r2
 800541c:	460b      	mov	r3, r1
 800541e:	b996      	cbnz	r6, 8005446 <scalbn+0x36>
 8005420:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005424:	4303      	orrs	r3, r0
 8005426:	d039      	beq.n	800549c <scalbn+0x8c>
 8005428:	4b33      	ldr	r3, [pc, #204]	; (80054f8 <scalbn+0xe8>)
 800542a:	2200      	movs	r2, #0
 800542c:	f7fb f84c 	bl	80004c8 <__aeabi_dmul>
 8005430:	4b32      	ldr	r3, [pc, #200]	; (80054fc <scalbn+0xec>)
 8005432:	4604      	mov	r4, r0
 8005434:	429f      	cmp	r7, r3
 8005436:	460d      	mov	r5, r1
 8005438:	da0f      	bge.n	800545a <scalbn+0x4a>
 800543a:	a32b      	add	r3, pc, #172	; (adr r3, 80054e8 <scalbn+0xd8>)
 800543c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005440:	f7fb f842 	bl	80004c8 <__aeabi_dmul>
 8005444:	e006      	b.n	8005454 <scalbn+0x44>
 8005446:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800544a:	4296      	cmp	r6, r2
 800544c:	d10a      	bne.n	8005464 <scalbn+0x54>
 800544e:	4602      	mov	r2, r0
 8005450:	f7fa fe84 	bl	800015c <__adddf3>
 8005454:	4604      	mov	r4, r0
 8005456:	460d      	mov	r5, r1
 8005458:	e020      	b.n	800549c <scalbn+0x8c>
 800545a:	460b      	mov	r3, r1
 800545c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005460:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8005464:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8005468:	19b9      	adds	r1, r7, r6
 800546a:	4291      	cmp	r1, r2
 800546c:	dd0e      	ble.n	800548c <scalbn+0x7c>
 800546e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8005472:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8005476:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800547a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800547e:	4820      	ldr	r0, [pc, #128]	; (8005500 <scalbn+0xf0>)
 8005480:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8005484:	a31a      	add	r3, pc, #104	; (adr r3, 80054f0 <scalbn+0xe0>)
 8005486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548a:	e7d9      	b.n	8005440 <scalbn+0x30>
 800548c:	2900      	cmp	r1, #0
 800548e:	dd08      	ble.n	80054a2 <scalbn+0x92>
 8005490:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005494:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005498:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800549c:	4620      	mov	r0, r4
 800549e:	4629      	mov	r1, r5
 80054a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054a2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 80054a6:	da12      	bge.n	80054ce <scalbn+0xbe>
 80054a8:	f24c 3350 	movw	r3, #50000	; 0xc350
 80054ac:	429f      	cmp	r7, r3
 80054ae:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 80054b2:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 80054b6:	dcdc      	bgt.n	8005472 <scalbn+0x62>
 80054b8:	a30b      	add	r3, pc, #44	; (adr r3, 80054e8 <scalbn+0xd8>)
 80054ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054be:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 80054c2:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80054c6:	480f      	ldr	r0, [pc, #60]	; (8005504 <scalbn+0xf4>)
 80054c8:	f041 011f 	orr.w	r1, r1, #31
 80054cc:	e7b8      	b.n	8005440 <scalbn+0x30>
 80054ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80054d2:	3136      	adds	r1, #54	; 0x36
 80054d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80054d8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80054dc:	4620      	mov	r0, r4
 80054de:	4629      	mov	r1, r5
 80054e0:	2200      	movs	r2, #0
 80054e2:	4b09      	ldr	r3, [pc, #36]	; (8005508 <scalbn+0xf8>)
 80054e4:	e7ac      	b.n	8005440 <scalbn+0x30>
 80054e6:	bf00      	nop
 80054e8:	c2f8f359 	.word	0xc2f8f359
 80054ec:	01a56e1f 	.word	0x01a56e1f
 80054f0:	8800759c 	.word	0x8800759c
 80054f4:	7e37e43c 	.word	0x7e37e43c
 80054f8:	43500000 	.word	0x43500000
 80054fc:	ffff3cb0 	.word	0xffff3cb0
 8005500:	8800759c 	.word	0x8800759c
 8005504:	c2f8f359 	.word	0xc2f8f359
 8005508:	3c900000 	.word	0x3c900000

0800550c <_init>:
 800550c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800550e:	bf00      	nop
 8005510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005512:	bc08      	pop	{r3}
 8005514:	469e      	mov	lr, r3
 8005516:	4770      	bx	lr

08005518 <_fini>:
 8005518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800551a:	bf00      	nop
 800551c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800551e:	bc08      	pop	{r3}
 8005520:	469e      	mov	lr, r3
 8005522:	4770      	bx	lr
